{
    "version": "https://jsonfeed.org/version/1",
    "title": "欢迎来到我的个人博客 • All posts by \"java javaweb\" tag",
    "description": "",
    "home_page_url": "http://zhanglin233.github.io",
    "items": [
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-15-Filter&Listener/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-15-Filter&Listener/",
            "title": "JavaWEB之sl&jstl",
            "date_published": "2021-11-26T17:22:09.529Z",
            "content_html": "<h2 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h2>\n<pre><code>1. Filter：过滤器\n2. Listner: 监听器\n</code></pre>\n<h1 id=\"filter-过滤器\"><a class=\"anchor\" href=\"#filter-过滤器\">#</a> Filter: 过滤器</h1>\n<pre><code>1. 概念：\n    * 生活中的过滤器： 净水器，土匪\n    * web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能\n    * 过滤器的作用：\n        * 一般用于完成通用的操作。如：登陆验证、统一编码处理，敏感字符过滤\n\n2. 快速入门\n    1. 步骤：\n        1. 定义一个类，实现接口Filter\n        2. 复写方法\n        3. 设置拦截路径\n            1. web.xml\n            2. 注解\n    2. 代码：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 过滤器块石 == 快速入门</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//@WebFilter (\"/*\")  // 访问所有资源都会执行该过滤器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterDemo1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"过滤器FilterDemo1被执行了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span>servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>3. 过滤器细节：\n    1. web.xml的配置\n</code></pre>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>cn.itcast.web.filter.FilterDemo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token comment\">&lt;!-- 拦截路径 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code>    2. 过滤器执行过程\n        1. 执行过滤器\n        2. 执行放行后的资源\n        3. 回来执行过滤器放行代码下边的代码\n    3. 过滤器的生命周期方法\n        1. init: 在服务器启动后，会创建Filter对象，然后调用init方法，只执行一次。\n        2. doFilter: 每一次请求被拦截资源时会执行。可以执行多次。\n        3. destroy: 在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。\n    4. 过滤器配置详解\n        * 拦截路径设置：\n            * 具体资源路径： /index.jsp  只有访问index.jsp资源时，过滤器才会被执行。\n            * 拦截目录： /user/*  访问user目录下的所有资源都会执行过滤器\n            * 后缀名拦截 *.jsp 访问所有后缀名为jsp的资源时会执行过滤器\n            * 拦截所有资源：/*  访问所有资源时，都会执行过滤器。\n        * 拦截方式配置：资源被访问的方式\n            * 注解配置：\n                * 设置dispatchTypes属性\n                    1. REQUEST：默认值。浏览器直接请求资源\n                    2. FORWARD：转发请求资源\n                    3. INCLUDE: 包含访问资源\n                    4. ERROR：错误跳转资源\n                    5. ASYNC：异步访问资源\n\n            * web.xml\n                * 设置&lt;dispatcher&gt;&lt;/dispatcher&gt;标签即可\n\n    5. 过滤器链（配置多个过滤器）\n        * 执行顺序：如果有两个过滤器：过滤器1和过滤器2\n            1. 过滤器1\n            2. 过滤器2\n            3. 资源执行\n            4. 过滤器2\n            5. 过滤器1\n        * 过滤器先后顺序问题\n            1. 注解配置：按照类名的字符串比较规则比较，较小的限制性\n                * 如AFilter和BFilter,AFilter就先执行\n            2. web.xml配置：&lt;filter-mapping&gt;谁定义在上边谁先执行。\n\n4. 案例：\n    1. 案例1_登陆验证\n        * 需求：\n            1. 访问day_17_case案例的资源。验证其是否登录\n            2. 如果登陆了，则直接放行。\n            3. 如果没有登录，则跳转到登陆页面，提示：“您好，您尚未登陆”。\n\n    2. 案例2_敏感词汇过滤：\n        * 分析：\n            1. 对request对象进行增强。增强获取参数相关方法\n            2. 放行。传递代理对象\n                * 概念:\n                    1. 真实对象：被代理的对象\n                    2. 代理对象：\n                    3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的\n                * 实现方式：\n                    1. 静态代理：有一个类文件 描述代理模式。\n                    2. 动态模式：在内存中形成代理类\n                        * 实现步骤：\n                            1. 代理对象和真实对象实现相同的接口\n                            2. 代理对象 = Proxy.newProxyInstance();\n                            3. 使用代理对象调用方法\n                            4. 增强方法\n                        * 增强方式:\n                            1. 增强参数列表\n                            2. 增强返回值类型\n                            3. 增强方法体执行逻辑\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * 敏感词汇过滤器</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SensitiveWordsFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> resp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1. 创建代理对象，增强 getParameter 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">ServletRequest</span> proxy_req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 增强 getParameter 方法</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 判断是否是 getParameter 方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getParameter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 增强返回值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 获取返回值</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">return</span>  value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 判断方法名是否是 getParameterMap</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">// 判断方法名是否是 getParameterValue</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">//2. 放行</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>proxy_req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 敏感词汇集合</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> config<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">//1. 获取文件真实路径</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">ServletContext</span> servletContext <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">String</span> realPath <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/classes/敏感词汇.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">//2. 读取文件</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">//3. 将文件的每一行数据添加到 list 中</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"listener-监听器\"><a class=\"anchor\" href=\"#listener-监听器\">#</a> Listener: 监听器</h2>\n<pre><code>* 监听器：web的三大组件之一。\n    * 事件监听机制\n        * 事件： 一件事情\n        * 事件源：事件发生的地方\n        * 监听器： 一个对象\n        * 注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码\n* ServletContextListener: 监听ServletContext对象的创建和销毁\n    * 方法：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">contextDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContextEvent</span> sce<span class=\"token punctuation\">)</span> <span class=\"token comment\">//ServletContext 对象被销毁之前会调用该方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">contextInitialized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContextEvent</span> sce<span class=\"token punctuation\">)</span><span class=\"token comment\">//ServletContext 对象创建后会调用该方法</span></pre></td></tr></table></figure><pre><code>    * 步骤：\n        1. 定义一个类，实现ServletContextListener接口\n        2. 复写方法\n        3. 配置\n            1. web.xml\n</code></pre>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>              cn.itcast.web.listener.ContextLoaderListener</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code>            2. 注解\n                * @WebListener\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-sl&jstl/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-sl&jstl/",
            "title": "javaweb之sl&jstl",
            "date_published": "2021-11-26T17:22:09.527Z",
            "content_html": "<h1 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h1>\n<pre><code>1. JSP:\n    1. 指令\n    2. 注释\n    3. 内置对象\n2. MVC开发模式\n3. EL表达式\n4. JSTL标签\n5. 三层架构\n</code></pre>\n<h2 id=\"jsp\"><a class=\"anchor\" href=\"#jsp\">#</a> JSP:</h2>\n<pre><code>1. 指令\n    * 作用：用于配置JSP页面，导入资源文件\n    * 格式：&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2...%&gt;\n    * 分类：\n        1. page：配置JSP页面的\n            * contentType:等同于response.setContentType()\n                1. 设置响应体的mime类型及字符级\n                2. 设置当前JSP页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）\n            * import: 导包\n            * errorPage: 当前页面发生异常后，会自动跳转到指定的错误页面\n            * isErrorPage；标识当前页面是否是错误页面\n                * true:是，可以使用内置对象exception\n                * false: 否。默认值。不可以使用内置对象exception\n        2. include:页面包含的。导入页面的资源文件\n            * &lt;%@include file=&quot;top.jsp&quot;%&gt;\n        3. taglib:导入资源\n          * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;\n              * prefix：前缀，自定义的\n2. 注释\n    1. html注释\n        &lt;!----&gt;只能注释html代码片段\n    2. jsp注释：推荐使用\n    &lt;%----%&gt;可以注释所有\n3. 内置对象\n    * 在jsp页面中不需要创建，直接使用的对象\n    * 一共有9个：\n              变量名                      真实类型\n          * pageContext                  PageContext\n          * request                      HttpServletRequest\n          * session                      HttpSession\n          * application                  ServletContext\n          * page                         OPbject\n          * response                     HttpServletResponse\n          * out                          JspWriter\n          * config                       ServletConfig\n          * exception                    Throwable\n</code></pre>\n<h2 id=\"开发模式\"><a class=\"anchor\" href=\"#开发模式\">#</a> 开发模式</h2>\n<pre><code>1. jsp演变历史\n    1. 早期只有servlet,只能使用response输出标签数据，非常麻烦\n    2. 后来又有JSP,简化了Servlet的开发，如果过度使用了jsp，在jsp中既写大量的java代码，又写html表，造成难于维护，难以分工协作\n    3. 再后来，java的web开发，借鉴MVC开发模式，使得程序的设计更加合理\n2. MVC\n    1. M:Model,模型。JavaBean\n        * 完成具体的业务操作，如：查询数据库，封装对象\n    2. V: View，视图。JSP\n    3. C: Controller,控制器。Servlet\n        * 获取用户的输入\n        * 调用模型\n        * 将数据交给视图展示\n    * 优缺点：\n        1. 优点：\n            1. 耦合性低，方便维护，利于分工协作\n            2. 重用性高\n        2. 缺点\n            1. 使得项目架构变得复杂，对开发人员要求高\n</code></pre>\n<h2 id=\"el表达式\"><a class=\"anchor\" href=\"#el表达式\">#</a> EL 表达式</h2>\n<pre><code>1. 概念：Expression Language  表达式语言\n2. 作用： 替换和简化jsp页面中java语言代码的编写\n3. 语法：$&#123;表达式&#125;\n4. 注意：\n    * jsp默认支持el表达式。如果要忽略el表达式\n        1. 设置jsp中page指令中:isElIgnored = &quot;true&quot; 忽略当前jsp页面中所有的el表达式\n        2. \\$&#123;表达式&#125;： 忽略当前这个el表达式\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-Cookie&Session/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-Cookie&Session/",
            "title": "javaweb之Cookie&Session",
            "date_published": "2021-11-26T17:22:09.527Z",
            "content_html": "<h1 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h1>\n<ol>\n<li>会话技术\n<ol>\n<li>Cookie</li>\n<li>Session</li>\n</ol>\n</li>\n<li>JSP: 入门学习</li>\n</ol>\n<h1 id=\"会话技术\"><a class=\"anchor\" href=\"#会话技术\">#</a> 会话技术</h1>\n<ol>\n<li>会话：一次会话中包含多次请求和响应\n<ul>\n<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li>\n</ul>\n</li>\n<li>功能：在一次会话的范围内的多次请求间共享数据</li>\n<li>方式：\n<ol>\n<li>客户端会话技术: Cookie</li>\n<li>服务器端会话技术：Session</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie:</h1>\n<ol>\n<li>\n<p>概念：客户端会话技术，将数据保存到客户端</p>\n</li>\n<li>\n<p>快速入门：</p>\n<ul>\n<li>使用步骤：\n<ol>\n<li>创建 Cookie 对象，绑定数据\n<ul>\n<li>new Cookie(String name,String value)</li>\n</ul>\n</li>\n<li>发送 Cookie 对象，绑定数据\n<ul>\n<li>response.addCookie(Cookie cookie)</li>\n</ul>\n</li>\n<li>获取 Cookie, 拿到数据\n<ul>\n<li>Cookie[] cookies = request.getCookies();</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>实现原理</p>\n<ul>\n<li>基于响应头 set-cookie 和请求头 cookie 实现</li>\n</ul>\n</li>\n<li>\n<p>cookie 的细节</p>\n<ol>\n<li>一次可不可以发送多个 cookie?\n<ul>\n<li>可以</li>\n<li>可以创建多个 COokie 对象，使用 response 调用多次方法发送 cookie 即可</li>\n</ul>\n</li>\n<li>cookie 在 cookie 中保持多长时间？\n<ul>\n<li>默认情况下，当浏览器关闭后，cookie 数据被销毁</li>\n<li>持久化储存</li>\n<li>setMaxAge(int seconds)</li>\n</ul>\n<ol>\n<li>正数：将 Cookie 数据写到硬盘中，持久化储存。并指定 cookie 存活时间，时间到后，cookie 文件自动失效。</li>\n<li>负数，默认值<br />\n 3. 删除 cookie 值</li>\n</ol>\n</li>\n<li>cookie 能不能存中文？\n<ul>\n<li>tomcat 8 之前 cookie 不能直接存中文\n<ul>\n<li>需要将中文数据转码 --- 一般采用 URL 编码（% E3)</li>\n</ul>\n</li>\n<li>在 tomcat 8 之后，cookie 支持中文数据，特殊字符还是不支持，如空格，建议还是使用 URL 编码转储。</li>\n</ul>\n</li>\n<li>cookie 共享问题：\n<ol>\n<li>假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享？</li>\n</ol>\n<ul>\n<li>默认情况下 cookie 不能共享</li>\n<li>setPath (String path): 设置 cookie 的获取范围。默认情况下，设置当前虚拟目录</li>\n<li>如果要共享，则可以将 path 设置为 &quot;/&quot;</li>\n</ul>\n<ol start=\"2\">\n<li>不同的 tomcat 服务器间 cookie 共享问题？\n<ul>\n<li>setDomain (String path): 如果设置一级域名相同，那么多个服务器之间 cookie 可以共享</li>\n<li>setDomain (&quot;.baidu.com&quot;), 那么 tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>5. Cookie的特点和使用\n  1. cookie储存数据在客户端浏览器\n  2. 浏览器对于单个cookie的=大小有限制（4kb)以及对同一个域名下的总cokie数量也有限制（20个）\n  * 作用\n    1. cookie一般用于存储少量的不太敏感的数据\n    2. 在不登录的情况下，完成服务器对客户端的身份识别\n\n6. 案例：记住上一次访问时间\n  1. 需求：\n    1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问\n    2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串。\n  2. 分析：\n    1. 可以采用cokie来完成\n    2. 在服务器中的servlet判断是否有一个明为lastTime的cookie\n      1. 有：不是第一次访问\n        1. 响应数据：1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20\n\t\t\t    2. 写回Cookie：lastTime=2018年6月10日11:50:01\n\t\t    2. 没有：是第一次访问\n\t\t\t    1. 响应数据：您好，欢迎您首次访问\n\t\t\t    2. 写回Cookie：lastTime=2018年6月10日11:50:01\n\n    3. 代码实现：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>cookie</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cookieTest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CookieTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 设置响应的消息体的数据格式及编码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有 cookie 为 lastTime</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//1. 获取所有 cookie</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 遍历 cookie 数组</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>cookies<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> c<span class=\"token operator\">:</span>cookies</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 获取 cookie 的名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//                String value = c.getValue();</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">//4. 判断名称是不是 lastTime</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 有该 cookie，不是第一次访问</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 设置 cookie 的 value</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token comment\">// 获取当前时间，重新设置 cookie，重新发送 cookie</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    c<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token comment\">// 设置 cookie 存活时间</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    c<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置为 1 个月</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重新发送 cookie</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token comment\">// 响应数据</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token comment\">// 获取 cookie 的 value 时间</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>欢迎回来，您上次访问时间为：\"</span><span class=\"token operator\">+</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span> cookies<span class=\"token punctuation\">.</span>length<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>flag<span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 没有，第一次访问</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">,</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 设置 cookie 存活时间</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置为 1 个月</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重新发送 cookie</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>您好，欢迎首次访问&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jsp-入门学习\"><a class=\"anchor\" href=\"#jsp-入门学习\">#</a> JSP: 入门学习</h2>\n<ol>\n<li>概念：<br />\n* Java serve Pages: java 服务器端页面\n<ul>\n<li>了可以理解为：一个特殊的页面，其中既可以指定定义 html 标签，又可以定义 java 代码</li>\n<li>用于简化书写</li>\n</ul>\n</li>\n<li>原理：<br />\n* jsp 本质上就是一个 Servlet</li>\n<li>jsp 的脚本：JSP 定义 java 代码的格式：<br />\n1. &lt;% 代码 %&gt;：定义 java 的代码，在 service 方法中可以定义什么，该脚本中就可以定义什么。<br />\n2. &lt;%! 代码 %&gt; 定义的 java 代码，在 jsp 转化后的 java 类的成员位置。<br />\n3. &lt;%= 代码 %&gt;：定义的 java 代码，会输出到页面上。输出语句可以定义什么，该脚本中就可以定义什么</li>\n<li>JSP 的内置对象：<br />\n* 在 jsp 对象中不需要获取和创建，可以直接使用的对象<br />\n * JSP 中一共有 9 个内置对象<br />\n * 先学 3 个：\n<ul>\n<li>request</li>\n<li>response</li>\n<li>out：字符输出流对象。可以将数据输出到页面上。和 response.getWriter () 类似\n<ul>\n<li>response.getWriter () 和 out.write () 的区别\n<ul>\n<li>在 tomcat 服务器真正给客户端做出响应前，会先找到 response 缓冲区数据，再找 out 缓冲区。</li>\n<li>response.getWriter () 数据输出永远在 out.write () 之前，与代码位置没有关系。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"session-主菜\"><a class=\"anchor\" href=\"#session-主菜\">#</a> Session: 主菜</h2>\n<ol>\n<li>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</li>\n<li>快速入门：<br />\n1. 获取 HttpSession 对象：<br />\nHttpSession session = request.getSession();<br />\n2. 使用 HttpSession 对象：<br />\nObject getAttribute(String name);<br />\nvoid setAttribute(String name,Object value);<br />\nvoid removeAttribute(String name)<br />\n 3. 原理\n<ul>\n<li>Session 的实现是依赖于 Cookie 的。</li>\n</ul>\n</li>\n</ol>\n<pre><code>4. 细节：\n  1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？\n    * 默认情况下，不是\n    * 如果需要相同，则可以创建COokie，键为JESSIONID,设置最大存活时间，让cookie持久化保存。\n      Cookie c = new Cookie(&quot;JESSIONID&quot;,session.getID());\n      c.setMaxAge(60*60);\n      response.addCookie(c);\n  2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？\n    * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作：\n      * session的钝化：\n        * 在服务器正常关闭之前，将session对象系列硬化到硬盘上，\n      * session的活化：\n        * 在服务器启动后，将session文件转化为内存中的session对象即可。\n  3. session什么时候被销毁\n    1. 服务器关闭\n    2. session对象调用invalidate()。\n    3. session默认失效时间30分钟\n      选择性配置修改\n      &lt;session-config&gt;\n        &lt;session-timeout&gt;30&lt;/session-timeout&gt;\n      &lt;/session-config&gt;\n5. session的特点\n  1. session用于存储一次会话的多次请求的数据，存在服务器端\n  2. session可以存储任意数据类型，任意大小的数据\n\n  * session与Cookie的区别：\n    1. session存储数据在服务器端，Cookie在客户端\n    2. session没有数据大小限制。，cookie有\n    3. session数据安全，Cookie相对于不安全\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-11-Servlet&HTTP&Resuest/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-11-Servlet&HTTP&Resuest/",
            "title": "JavaWEB之Servlet&HTTP&Request",
            "date_published": "2021-11-26T17:22:09.525Z",
            "content_html": "<h1 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h1>\n<h2 id=\"1概念\"><a class=\"anchor\" href=\"#1概念\">#</a> 1. 概念</h2>\n<p>Servlet（Server Applet）是 Java Servlet 的简称，称为小服务程序或服务连接器。</p>\n<p>狭义的 Servlet 是指 Java 语言实现的一个接口，<br />\n广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。</p>\n<h2 id=\"2步骤\"><a class=\"anchor\" href=\"#2步骤\">#</a> 2. 步骤</h2>\n<h2 id=\"3执行原理\"><a class=\"anchor\" href=\"#3执行原理\">#</a> 3. 执行原理</h2>\n<p>当服务器接收到浏览器客户的请求之后，会解析请求的 URL 路径，获取访问的 servlet 的资源路径，找到项目，查找 web.xml 文件，是否有对应的标签体内容，如果有，则找到对应的标签内的全类名，tomcat 会将字节码文件加载进内存，并且创建其对象，调用其方法。</p>\n<h2 id=\"4生命周期\"><a class=\"anchor\" href=\"#4生命周期\">#</a> 4. 生命周期</h2>\n<h3 id=\"被创建\"><a class=\"anchor\" href=\"#被创建\">#</a> 被创建：</h3>\n<p>执行 servlet 的 init () 方法 ， 只执行一次，说明 servlet 在内存中是单例的（多用户同时访问，可能存在线程安全问题，尽量不要在 servlet 中定义成员变量，即使定义了成员变量，也不要对其修改值），默认情况下，第一次被访问时被创建（可配置 servlet 的创建时期：值为负整数，第一次被访问时创建 / 值为 0 或者为正整数，则在服务器启动时创建</p>\n<h3 id=\"提供服务\"><a class=\"anchor\" href=\"#提供服务\">#</a> 提供服务：</h3>\n<p>执行 service（）方法，每次访问 servlet 时，service（）方法都会被调用一次。</p>\n<h3 id=\"被销毁\"><a class=\"anchor\" href=\"#被销毁\">#</a> 被销毁：</h3>\n<p>destory（）方法在 servlet 被销毁之前只执行一次，用于释放资源。服务器关闭时，servlet 被销毁。只有服服务器正常关闭时，才会执行 destory () 方法。</p>\n<h2 id=\"5servlet30注解配置\"><a class=\"anchor\" href=\"#5servlet30注解配置\">#</a> 5.Servlet3.0 注解配置</h2>\n<h3 id=\"什么是servlet30\"><a class=\"anchor\" href=\"#什么是servlet30\">#</a> 什么是 Servlet3.0</h3>\n<p>Servlet3.0 是 Java EE6 规范的一部分，Servlet3.0 提供了注解 (annotation)，使得不再需要在 web.xml 文件中进行 Servlet 的部署描述，简化开发流程。</p>\n<h3 id=\"开发servlet30程序的所需要的环境\"><a class=\"anchor\" href=\"#开发servlet30程序的所需要的环境\">#</a> 开发 Servlet3.0 程序的所需要的环境</h3>\n<p>开发 Servlet3.0 的程序需要一定的环境支持。MyEclipse10 和 Tomcat7 都提供了对 Java EE6 规范的支持。Tomcat 需要 Tomcat7 才支持 Java EE6，Tomcat7 需要使用 JDK1.6 以上的版本。<br />\n详细内容 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGRwLWdhY2wvcC80MjIyOTAyLmh0bWw=\">https://www.cnblogs.com/xdp-gacl/p/4222902.html</span>)</p>\n<h2 id=\"6servlet的体系结构\"><a class=\"anchor\" href=\"#6servlet的体系结构\">#</a> 6.Servlet 的体系结构</h2>\n<p>Servlet -- 接口<br />\n |<br />\nGenericServlet -- 抽象类<br />\n |<br />\nHttpServlet -- 抽象类</p>\n<h3 id=\"genericservlet将servlet接口中其他的方法做了默认空实现只将service方法作为抽象将来定义servlet类时可以继承genericservlet实现service方法即可\"><a class=\"anchor\" href=\"#genericservlet将servlet接口中其他的方法做了默认空实现只将service方法作为抽象将来定义servlet类时可以继承genericservlet实现service方法即可\">#</a> GenericServlet：将 Servlet 接口中其他的方法做了默认空实现，只将 service () 方法作为抽象，将来定义 Servlet 类时，可以继承 GenericServlet，实现 service () 方法即可</h3>\n<h3 id=\"httpservlet对http协议的一种封装简化操作\"><a class=\"anchor\" href=\"#httpservlet对http协议的一种封装简化操作\">#</a> HttpServlet：对 http 协议的一种封装，简化操作</h3>\n<h4 id=\"定义类继承httpservlet\"><a class=\"anchor\" href=\"#定义类继承httpservlet\">#</a> 定义类继承 HttpServlet</h4>\n<h4 id=\"复写dogetdopost方法\"><a class=\"anchor\" href=\"#复写dogetdopost方法\">#</a> 复写 doGet/doPost 方法</h4>\n<h1 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>Hyper Text Transfer Protocol 超文本传输协议</p>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<ul>\n<li>基于 TCP/IP 的高级协议</li>\n<li>默认端口号：80</li>\n<li>基于请求 / 响应模型的：一次请求对应一次响应</li>\n<li>无状态的：每次请求之间相互独立，不能交互数</li>\n</ul>\n<h3 id=\"版本\"><a class=\"anchor\" href=\"#版本\">#</a> 版本</h3>\n<p>1.0 版本：每一次连接都会建立新的连接<br />\n 1.1 版本：复用链接</p>\n<h2 id=\"请求消息数据格式\"><a class=\"anchor\" href=\"#请求消息数据格式\">#</a> 请求消息数据格式</h2>\n<h3 id=\"1请求行\"><a class=\"anchor\" href=\"#1请求行\">#</a> 1. 请求行</h3>\n<p>请求方式  请求 url      请求协议 / 版本<br />\n GET      /login.html  HTTP/1.1</p>\n<h4 id=\"http协议有7种请求方式常用的有2种\"><a class=\"anchor\" href=\"#http协议有7种请求方式常用的有2种\">#</a> HTTP 协议有 7 种请求方式，常用的有 2 种</h4>\n<h5 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> GET:</h5>\n<ul>\n<li>请求参数在请求行中，在 url 后</li>\n<li>请求的 url 长度有限制</li>\n<li>不太安全</li>\n</ul>\n<h5 id=\"post\"><a class=\"anchor\" href=\"#post\">#</a> POST：</h5>\n<ul>\n<li>请求参数在请求体中</li>\n<li>请求的 url 长度没有限制</li>\n<li>相对安全</li>\n</ul>\n<h3 id=\"2请求头-客户端告诉服务器一些信息\"><a class=\"anchor\" href=\"#2请求头-客户端告诉服务器一些信息\">#</a> 2. 请求头：客户端告诉服务器一些信息</h3>\n<p>请求头名称：请求头值</p>\n<h4 id=\"常见的请求头\"><a class=\"anchor\" href=\"#常见的请求头\">#</a> 常见的请求头</h4>\n<ul>\n<li>user-agent: 浏览器告诉服务器，我访问你使用的浏览器版本信息。可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li>\n<li>Referer: ：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9sb2dpbi5odG1s\">http://localhost/login.html</span><br />\n 告诉服务器，我 (当前请求) 从哪里来？</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo3</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\">// 获取请求头数据：user-agent</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token class-name\">String</span> agent <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user-agent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token comment\">// 判断 agent 的浏览器版本</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chrome\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token comment\">// 谷歌</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"谷歌.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Firefox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"火狐来了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用：</h5>\n<h6 id=\"防盗链\"><a class=\"anchor\" href=\"#防盗链\">#</a> 防盗链：</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo4</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\">// 演示获取请求头数据:reference</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token class-name\">String</span> refer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"referer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\">// 防盗链</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>refer<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/day14_servlet_http_request_war_exploded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">//                System.out.println (\"播放电影\");</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放电影\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                  <span class=\"token comment\">// 盗链</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">//                System.out.println (\"想看电影吗\");</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"想看电影吗\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"统计工作\"><a class=\"anchor\" href=\"#统计工作\">#</a> 统计工作：</h6>\n<h3 id=\"3请求空行\"><a class=\"anchor\" href=\"#3请求空行\">#</a> 3. 请求空行</h3>\n<p>空行，就是用于分割 POST 请求头和请求体的</p>\n<h3 id=\"4请求体正文\"><a class=\"anchor\" href=\"#4请求体正文\">#</a> 4. 请求体 (正文)</h3>\n<ul>\n<li>封装 POST 请求消息的请求参数</li>\n<li>字符串格式：</li>\n</ul>\n<pre><code>POST /login.html HTTP/1.1\nHost: localhost\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101\nFirefox/60.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nReferer: http://localhost/login.html\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nusername=zhangsan\n</code></pre>\n<h1 id=\"request\"><a class=\"anchor\" href=\"#request\">#</a> Request</h1>\n<h2 id=\"1request对象和response对象的原理\"><a class=\"anchor\" href=\"#1request对象和response对象的原理\">#</a> 1.request 对象和 response 对象的原理</h2>\n<h3 id=\"1request和response对象是由服务器创建的我们来使用它\"><a class=\"anchor\" href=\"#1request和response对象是由服务器创建的我们来使用它\">#</a> 1.request 和 response 对象是由服务器创建的，我们来使用它。</h3>\n<h3 id=\"2request对象是来获取请求消息response对象是来设置响应信息\"><a class=\"anchor\" href=\"#2request对象是来获取请求消息response对象是来设置响应信息\">#</a> 2.request 对象是来获取请求消息，response 对象是来设置响应信息</h3>\n<h2 id=\"2request对象继承体系结构\"><a class=\"anchor\" href=\"#2request对象继承体系结构\">#</a> 2.request 对象继承体系结构</h2>\n<pre><code>ServletRequest -- 接口\n\t| 继承\nHttpServletRequest -- 接口\n\t| 实现\norg.apache.catalina.connector.RequestFacade 类(tomcat)\n</code></pre>\n<h2 id=\"3request功能\"><a class=\"anchor\" href=\"#3request功能\">#</a> 3.request 功能</h2>\n<h3 id=\"1获取请求消息数据\"><a class=\"anchor\" href=\"#1获取请求消息数据\">#</a> 1 获取请求消息数据</h3>\n<h4 id=\"1获取请求行数据\"><a class=\"anchor\" href=\"#1获取请求行数据\">#</a> 1. 获取请求行数据</h4>\n<h5 id=\"get-day14demo1namezhangsan-http11\"><a class=\"anchor\" href=\"#get-day14demo1namezhangsan-http11\">#</a> GET /day14/demo1?name=zhangsan HTTP/1.1</h5>\n<p>方法：</p>\n<ul>\n<li>\n<p>获取请求方式 ：GET<br />\nString getMethod()</p>\n</li>\n<li>\n<p>获取虚拟目录：/day14</p>\n<p>String getContextPath()</p>\n</li>\n<li>\n<p>获取 Servlet 路径: /demo1<br />\nString getServletPath()</p>\n</li>\n<li>\n<p>获取 get 方式请求参数：name=zhangsan<br />\nString getQueryString()</p>\n</li>\n<li>\n<p>获取请求 URI：/day14/demo1<br />\nString getRequestURI(): /day14/demo1<br />\nStringBuffer getRequestURL() :<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==\">http://localhost/day14/demo1</span><br />\nURL: 统一资源定位符 ： <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==\">http://localhost/day14/demo1</span> 中华人民共和国<br />\n URI：统一资源标识符 : /day14/demo1 共和国</p>\n</li>\n<li>\n<p>获取协议及版本：HTTP/1.1<br />\nString getProtocol()</p>\n</li>\n<li>\n<p>获取客户机的 IP 地址：<br />\nString getRemoteAddr()</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         * GET</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         * /day14_servlet_http_request_war_exploded</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         * /requestDemo1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         * null</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         * /day14_servlet_http_request_war_exploded/requestDemo1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         * HTTP/1.1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         * 0:0:0:0:0:0:0:1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//1. 获取请求方式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//2. 获取虚拟路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> contextPath <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>contextPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//3. 获取 servlet 路径：/demo1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">String</span> servletPath <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getServletPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>servletPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//4. 获取 get 方式请求参数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> queryString <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queryString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//5. 获取请求 URI</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> requestURI <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//6. 获取协议及版本</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> protocol <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getProtocol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//7. 获取客户机的 ip 地址</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">String</span> remoteAddr <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>remoteAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2获取请求头数据\"><a class=\"anchor\" href=\"#2获取请求头数据\">#</a> 2. 获取请求头数据</h4>\n<pre><code>方法：\n* String getHeader(String name):通过请求头的名称获取请求头的值\n</code></pre>\n<p>Enumeration&lt;String&gt; getHeaderNames (): 获取所有的请求头名称</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 演示获取请求头数据:reference</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> refer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"referer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 演示获取请求头数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//1. 获取所有请求头名称</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headerNames <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaderNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>headerNames<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> headerNames<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"------\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3获取请求体数据\"><a class=\"anchor\" href=\"#3获取请求体数据\">#</a> 3. 获取请求体数据:</h4>\n<ul>\n<li>请求体：只有 POST 请求方式才有请求体，在请求体中封装了 POST 请求的请求参数</li>\n<li>步骤：\n<ol>\n<li>获取流对象\n<ul>\n<li>BufferedReader getReader ()：获取字符输入流，只能操作字符数据</li>\n<li>ServletInputStream getInputStream ()：获取字节输入流，可以操作所有类型数据案例：用户登录</li>\n<li>在文件上传知识点后讲解</li>\n</ul>\n</li>\n<li>再从流对象中拿数据</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"其它功能\"><a class=\"anchor\" href=\"#其它功能\">#</a> 其它功能</h2>\n<h3 id=\"1-获取请求参数通用方式不论get还是post请求方式都可以使用下列方法来获取请求参数\"><a class=\"anchor\" href=\"#1-获取请求参数通用方式不论get还是post请求方式都可以使用下列方法来获取请求参数\">#</a> 1. 获取请求参数通用方式：不论 get 还是 post 请求方式都可以使用下列方法来获取请求参数</h3>\n<h4 id=\"1-string-getparameterstring-name根据参数名称获取参数值-usernamezspassword123\"><a class=\"anchor\" href=\"#1-string-getparameterstring-name根据参数名称获取参数值-usernamezspassword123\">#</a> 1. String getParameter (String name): 根据参数名称获取参数值 username=zs&amp;password=123</h4>\n<h4 id=\"2-string-getparametervaluesstring-name根据参数名称获取参数值的数组\"><a class=\"anchor\" href=\"#2-string-getparametervaluesstring-name根据参数名称获取参数值的数组\">#</a> 2. String [] getParameterValues (String name): 根据参数名称获取参数值的数组</h4>\n<p>hobby=xx&amp;hobby=game</p>\n<h4 id=\"3-enumerationstring-getparameternames获取所有请求的参数名称\"><a class=\"anchor\" href=\"#3-enumerationstring-getparameternames获取所有请求的参数名称\">#</a> 3. Enumeration&lt;String&gt; getParameterNames (): 获取所有请求的参数名称</h4>\n<h4 id=\"4-mapstringstring-getparametermap获取所有参数的map集合\"><a class=\"anchor\" href=\"#4-mapstringstring-getparametermap获取所有参数的map集合\">#</a> 4. Map&lt;String,String []&gt; getParameterMap (): 获取所有参数的 map 集合</h4>\n<ul>\n<li>中文乱码问题：</li>\n<li>get 方式：tomcat 8 已经将 get 方式乱码问题解决了</li>\n<li>post 方式：会乱码</li>\n<li>解决：在获取参数前，设置 request 的编码 request.setCharacterEncoding (&quot;utf-8&quot;);</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Enumeration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo6</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 获取参数通用方式：不论是 get 方式还是 Post 方式都可以使用下列方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//post 获取请求参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//post 请求中文乱码问题</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1. 设置流的编码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 根据参数名获取参数值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//        System.out.println(\"post\");</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        System.out.println(username);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 根据参数名获取参数值的数组</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hobbies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterValues</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hobby\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//        for (String hobby:hobbies</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//             ) &#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//            System.out.println(hobby);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> parameterNames <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//        while(parameterNames.hasMoreElements())&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//            String name = parameterNames.nextElement();</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//            System.out.println(name);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//            String value = request.getParameter(name);</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//            System.out.println(value);</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//            System.out.println(\"------------------------------\");</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 获取所有参数 map 集合</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> parameterMap <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySets <span class=\"token operator\">=</span> parameterMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token operator\">:</span>keySets</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>             <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values <span class=\"token operator\">=</span> parameterMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token operator\">:</span>values</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">//get 获取请求参数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">//        String username = request.getParameter(\"username\");</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">//        System.out.println(\"get\");</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">//        System.out.println(username);</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2-请求转发一种在服务器内部的资源跳转方式\"><a class=\"anchor\" href=\"#2-请求转发一种在服务器内部的资源跳转方式\">#</a> 2. 请求转发：一种在服务器内部的资源跳转方式</h3>\n<h4 id=\"1-步骤\"><a class=\"anchor\" href=\"#1-步骤\">#</a> 1. 步骤：</h4>\n<ul>\n<li>通过 request 对象获取请求转发器对象：RequestDispatcher<br />\ngetRequestDispatcher(String path)</li>\n<li>使用 RequestDispatcher 对象来进行转发：forward (ServletRequest request,<br />\nServletResponse response)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"2特点\"><a class=\"anchor\" href=\"#2特点\">#</a> 2. 特点：</h4>\n<ul>\n<li>浏览器地址栏路径不发生变化</li>\n<li>只能转发到当前服务器内部资源中。</li>\n<li>转发是一次请求<br />\n ###3. 共享数据：</li>\n</ul>\n<ul>\n<li>域对象：一个有作用范围的对象，可以在范围内共享数据</li>\n<li>request 域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li>\n</ul>\n<h4 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法：</h4>\n<ul>\n<li>\n<p>void setAttribute (String name,Object obj): 存储数据</p>\n</li>\n<li>\n<p>Object getAttitude (String name): 通过键获取值</p>\n</li>\n<li>\n<p>void removeAttribute (String name): 通过键移除键值对</p>\n</li>\n<li>\n<p>获取 ServletContext：</p>\n<ul>\n<li>ServletContext getServletContext()</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "Java JavaWEB"
            ]
        }
    ]
}