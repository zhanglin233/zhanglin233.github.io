<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>欢迎来到我的个人博客 • Posts by &#34;智能控制&#34; category</title>
        <link>http://zhanglin233.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 28 Nov 2021 02:24:07 +0800</pubDate>
        <lastBuildDate>Sun, 28 Nov 2021 02:24:07 +0800</lastBuildDate>
        <category>智能控制</category>
        <category>博客</category>
        <category>前端</category>
        <category>Nginx</category>
        <category>前端 React</category>
        <category>Java JavaSE</category>
        <category>Java JavaWEB</category>
        <category>java SpringBoot</category>
        <category>java springboot</category>
        <category>Python 爬虫</category>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/28/computer-science/course_1/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E9%94%AE%E7%9B%98%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</guid>
            <title>键盘及其接口技术</title>
            <link>http://zhanglin233.github.io/2021/11/28/computer-science/course_1/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E9%94%AE%E7%9B%98%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</link>
            <category>智能控制</category>
            <pubDate>Sun, 28 Nov 2021 02:24:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;键盘输入电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#键盘输入电路&#34;&gt;#&lt;/a&gt; 键盘输入电路&lt;/h1&gt;
&lt;p&gt;计算机控制系统中的键盘通常采用触点式按键，触点式按键是利用机械触点的闭合或断开来输入信息&lt;/p&gt;
&lt;h2 id=&#34;键盘的抖动干扰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#键盘的抖动干扰&#34;&gt;#&lt;/a&gt; 键盘的抖动干扰&lt;/h2&gt;
&lt;p&gt;由于机械触点的弹性振动，按键在按下时不会马上稳定地接通，在谈起时也不能一下子完全断开，因而在按键闭合和断开的瞬间均会出现一连串的抖动，这种抖动称为按键的抖动干扰，其产生的波形如图所示&lt;br /&gt;
&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128020838.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当按键按下时会产生前沿抖动，当按键弹起时会产生后沿抖动。这是所有机械触点式按键在状态输出时的共性问题，抖动的时间长短取决于按键的机械特性与操作状态，一般为 10 ms~100 ms, 这是键处理设计时要考虑的一个重要参数。&lt;/p&gt;
&lt;h2 id=&#34;抖动干扰的消除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抖动干扰的消除&#34;&gt;#&lt;/a&gt; 抖动干扰的消除&lt;/h2&gt;
&lt;p&gt;按键的抖动会造成按一次产生的开关状态被 CPU 误读几次。为了使 CPU 能正确地读取按键状态，必须在按键闭合或断开时，消除产生的前沿或后沿抖动，去抖动的方法有硬件方法与软件方法。&lt;/p&gt;
&lt;h3 id=&#34;硬件方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件方法&#34;&gt;#&lt;/a&gt; 硬件方法&lt;/h3&gt;
&lt;p&gt;​	硬件方法是设计一个滤波延时电路或单稳态电路等硬件电路来避开按键的抖动时间。滤波延时消抖电路如图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128021627.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;设置在按键 s 与 CPU 数据线 Di 之间。按键 S 未按下时，电容两端电压为 0，即非门输入 Vi 为 0，输出 V0 为 1。当 S 按下时，由于 C 两端电压不能突变，充电电压 Vi 在充电时间内未达到非门的开启电压，输出 V0 将不会改变，直到充电电压 Vi 大于门的开启电压，其输出 Vi 才变为 0，这段充电延迟时间取决于 R1、R2 和 C 值得大小，电路设计时只需要使之大于等于 100 ms 即可避开按键抖动的影响。同理，按键 S 断开时，即使出现抖动，由于 C 的放电延迟过程，也会消除按键抖动的影响。&lt;/p&gt;
&lt;p&gt;下图中 V1 是未施加滤波电路含有前沿抖动、后沿抖动的波形，V2 是施加滤波电路后消除抖动的波形。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128022924.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;软件方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件方法&#34;&gt;#&lt;/a&gt; 软件方法&lt;/h3&gt;
&lt;p&gt;​	软件方法是指编制一段时间大于 100 ms 的延时程序，在第一次检测到有键按下时，执行这段延时子程序使键的前沿抖动消失后再检测该键状态，如果该键仍保持闭合状态电平，则确认为该键已经按下，否则无键按下，从而消除了抖动的影响。同理，在检测到按键释放后，页同样要延迟一段时间，以消除后沿抖动，然后转入对该按键的处理。&lt;/p&gt;
&lt;h1 id=&#34;非编码矩阵式键盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非编码矩阵式键盘&#34;&gt;#&lt;/a&gt; 非编码矩阵式键盘&lt;/h1&gt;
&lt;p&gt;​	当按键数量较多时，为了少占用 CPU 的 I/O 口线，通常将键排列成矩阵式结构。矩阵式结构也是非编码键盘中的一种形式。&lt;/p&gt;
&lt;h2 id=&#34;矩阵式键盘的结构构成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵式键盘的结构构成&#34;&gt;#&lt;/a&gt; 矩阵式键盘的结构构成&lt;/h2&gt;
&lt;p&gt;​	矩阵式键盘又叫行列式键盘，是用 I/O 口线组成的行、列矩阵结构，在每根行线与列线的交叉处，二线不直接相通而是通过一个按键跨接接通。采用这种矩阵结构只需要 M 根行输出线和 N 根列输入线，就可连接 MxN 个按键，再通过键盘处理程序便可识别键值。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128024347.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128024421.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	在键盘中无任何键按下时，所有的行线和列线被断开且相互独立，输入线 Y 0~Y 7 列都为高电平，当有一键按下时，则该键所在的行线与列线接通，因此，该列线的电平取决于该键所在的行线。基于此，产生了 “行扫描法” 与 “线反转法” 两种识别方法.&lt;/p&gt;
&lt;p&gt;​	行扫描法又称逐行零扫描法，即逐行输出行扫描信号 “0”，使各行依次为低电平，然后分别读入列数据检测，检查此（低电平）行中是否有键按下。如果读得某列线为低电平，则表示此（低电平）行线与此列线的交叉处有键按下，再对该键进行编码计算出键值，然后转入该建的功能子程序入口地址；如果没有任何一根列线为低电平，则说明此（低电平）行没有键按下。接着进行下一行的 “0” 行扫描与列读入，直到 8 行全部查完，若无键按下则返回。&lt;/p&gt;
&lt;p&gt;​	有时为了快速判断键盘中是否有键按下，也可先将全部行线同时置为低电平，然后检测列线的电平状态，若所有列线均为高电平，则说明键盘中无键按下，立即返回；若要有一列的电平为低，则表示键盘中有键按下，然后再如上那样逐行扫描。&lt;/p&gt;
&lt;h2 id=&#34;矩阵式键盘的程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵式键盘的程序设计&#34;&gt;#&lt;/a&gt; 矩阵式键盘的程序设计&lt;/h2&gt;
&lt;p&gt;​	在计算机控制系统中，键盘扫描只是 CPU 工作的一部分。因此在设计键盘扫描程序时，必须保证键盘操作的实时性，又不能占用 CPU 太多的时间，还要充分考虑到抖动干扰的消除，一般可根据情况选用编程扫描、定时扫描或中断扫描中的一种方式。&lt;/p&gt;
&lt;h4 id=&#34;扫描程序的编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扫描程序的编写&#34;&gt;#&lt;/a&gt; 扫描程序的编写&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128212635.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-basH&#34;&gt;key:  # 行值寄存器CL和列值寄存器DL清零
      MOV AL, 0
      MOV CL, AL
      MOV DL, AL
      # 使所有行线为低电平
      MOV AL, 0FFH
      OUT PORT1, AL
      # 读列均值
      IN AL, PORTQ
      # 检查是否有键按下
      CMP AL, 0FFH
      # 无键按下转返回
      JZ DONE
      # 有键按下调延时100 ms子程序
      CALL DELAY
      # 重复上述扫描
      MOV AL, 0FFH
      OUT PORT1, AL
      IN AL, 0FFH
      CMP AL, 0FFH
      # 无键按下转返回
      JZ DONE
      # 行数08送AH
      MOV AH, 08
      # 行扫描初值（即X0线）送BL
      MOV BL, 01H
      
key1: # 输出使某行为低电平
	  MOV AL, BL
	  OUT PORT1, AL  
	  # 读入列值
	  IN AL, PORT1   
	  # 判断此行是否有键按下
	  CMP AL, 0FFH
	  # 有键按下转KEY2
	  JNZ KEY2
	  # 无键按下，行值寄存器加08
	  MOV AL, CL
	  ADD AL, 08H
	  DAA
	  MOV CL, AL
	  # 求下一行为低电平的输出代码
	  RCL	BL, 1
	  DEC AH
	  JNZ KEY1
		
DONE: IRET
KEY2: INC DL
	  RCR AL, 1
	  JC KEY2
	  MOV AL, CL
	  ADD AL, DL
	  DAA
	  MOV [BUFF], AL
	  JMP KEYADR
	  END KEY
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;编码键盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码键盘&#34;&gt;#&lt;/a&gt; 编码键盘&lt;/h1&gt;
&lt;p&gt;​	上面所述的非编码都是通过软件方法来实现键盘扫描、键值处理和消除抖动干扰的。&lt;/p&gt;
&lt;p&gt;​	显然，这将占用较多的 CPU 时间。在一个较大的控制系统中，不允许 CPU 主要用来执行键盘程序，这将严重影响系统的实时控制。下面以二进制编码键盘为例，介绍一种用硬件方法来识别和解决抖动干扰的键盘编码器及编码键盘接口电路。&lt;/p&gt;
&lt;h3 id=&#34;二进制编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二进制编码&#34;&gt;#&lt;/a&gt; 二进制编码&lt;/h3&gt;
&lt;p&gt;​	具有优先级的二进制 8 位编码器 CD4532B 的真值表如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128235658.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	表示芯片优先级的输入允许端 E&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 为 0 时，无论编码器的信号输入 I&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为何状态，编码器输出全为 0，芯片处于屏蔽状态，同时 E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为 0，也屏蔽下一级芯片；当输入允许端 E&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 为 1 时，且编码器的 I&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 全为 0 时，编译输出也为 0，但输出允许端 E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为，表明此编码器输入端无键按下，却允许优先级低的相邻编码器处于编码状态。这两种情形下的工作状态端 GS 均为 “0”。&lt;/p&gt;
&lt;p&gt;​	该芯片的 8 个输入端中，I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 的优先级最高，I&amp;lt;sub&amp;gt;7&amp;lt;/sub &amp;gt; 优先级最低。当有多个按键按下时，优先级高的被选中，同时自动屏蔽优先级低的各输入端和下一级芯片（使 E0 端为 0）。比如处于正常编码状态即 Ei 为 1，当 I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 端为 1 时，其余各输入端无论为 1 或 0，编码输出端均为二进制 000，同时 GS 端为 1，E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 端为 0，而当 I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 端为 0，I&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 端为 1 时，编码输出则为二进制 001；以此类推・・・・・・，输入端的键值号与二进制编码输出一一对应。&lt;/p&gt;
&lt;h3 id=&#34;编码键盘接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码键盘接口电路&#34;&gt;#&lt;/a&gt; 编码键盘接口电路&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129000949.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	如图是一种采用两片 CD4532B 构成的 16 个按键的二进制编码接口电路。其中，由于 U&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 的 E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 作为 U2 的 Ui, 所以按键 S0 的优先级最高，S&amp;lt;sub&amp;gt;15&amp;lt;/sub &amp;gt; 的优先级最低。U&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 和 U&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 的输出 O&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;~O&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 经或门 A&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~A&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 输出，已形成低 3 位编码 D&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;。而最高位 D&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 则有 U&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 的 GS 产生。当按键 S&amp;lt;sub&amp;gt;8&amp;lt;/sub&amp;gt;~S&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 中有一个闭合时，其输出为 1。从而 S&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;~S&amp;lt;sub&amp;gt;15&amp;lt;/sub &amp;gt; 任意一个键被按下，由编码位 D&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 均可消除相应的 4 位二进制码。&lt;/p&gt;
&lt;p&gt;​	为了消除按键按下时产生的抖动干扰，该接口电路还设置了由与非门 B&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、B&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;、电阻 R&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、R&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;、电容 C&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 组成的单稳电路和由或门 A&amp;lt;sub&amp;gt;4&amp;lt;/sub&amp;gt;、电阻 R&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、电容 C&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 组成的延时电路，电路中 E、F、G 、H 和 I 这五点的波形如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129003055.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
