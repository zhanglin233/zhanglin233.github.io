<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://zhanglin233.github.io</id>
    <title>欢迎来到我的个人博客 • Posts by &#34;面试&#34; category</title>
    <link href="http://zhanglin233.github.io" />
    <updated>2022-09-11T08:49:38.943Z</updated>
    <category term="C++" />
    <category term="算法" />
    <category term="博客" />
    <category term="智能控制" />
    <category term="前端" />
    <category term="面试" />
    <category term="linux" />
    <category term="Nginx" />
    <category term="前端 React" />
    <category term="Java JavaWEB" />
    <category term="Java JavaSE" />
    <category term="java SpringBoot" />
    <category term="java springboot" />
    <category term="Python 爬虫" />
    <category term="面试 数据库" />
    <entry>
        <id>http://zhanglin233.github.io/2022/09/11/computer-science/interview/docker%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/</id>
        <title>docker面试常问</title>
        <link rel="alternate" href="http://zhanglin233.github.io/2022/09/11/computer-science/interview/docker%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDIwNTIzNC9hcnRpY2xlL2RldGFpbHMvMTI0NjE0NzIw&#34;&gt;20 道经典 Redis 面试题_CSDN 砖家的博客 - CSDN 博客_redis 面试题&lt;/span&gt; ****&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExMDUzNDEyNi9hcnRpY2xlL2RldGFpbHMvMTIzODczNzYx&#34;&gt;docker 常见面试题_普通网友的博客 - CSDN 博客_docker 面试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodWFuZ3NoYW5nYmVpZG9uZy9hcnRpY2xlL2RldGFpbHMvMTI0MjY3MDQ2&#34;&gt;Docker 常见面试题_肌肌腹肌肌的博客 - CSDN 博客_docker 面试题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTQzMTMwNTg3MTUwNDM0MzQx&#34;&gt;数据库索引，终于懂了 - 掘金 (juejin.cn)&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="面试" />
        <updated>2022-09-11T08:49:38.943Z</updated>
    </entry>
    <entry>
        <id>http://zhanglin233.github.io/2022/01/12/computer-science/interview/HR%20%E9%9D%A2/</id>
        <title>hr面常问问题</title>
        <link rel="alternate" href="http://zhanglin233.github.io/2022/01/12/computer-science/interview/HR%20%E9%9D%A2/"/>
        <content type="html">&lt;h1 id=&#34;为什么选择我们公司&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么选择我们公司&#34;&gt;#&lt;/a&gt; 为什么选择我们公司&lt;/h1&gt;
&lt;p&gt;1. 从自身角度出发，可以结合自己的专业和兴趣来扩招；&lt;/p&gt;
&lt;p&gt;2. 从行业、企业角度出发，想要在这个行业长期发展；&lt;/p&gt;
&lt;p&gt;3. 最后可以说说，相较于行业内其他公司（竞争对手），该公司对你有哪些吸引点或优势。&lt;/p&gt;
&lt;h1 id=&#34;你最大的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#你最大的缺点&#34;&gt;#&lt;/a&gt; 你最大的缺点&lt;/h1&gt;
&lt;p&gt;** 问题分析：** 考察候选人的自我认知能力，个人优点是否符合岗位要求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考建议：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一，不宜说自己没有缺点，只要是人就有缺点，这么说一定会令人反感。&lt;/p&gt;
&lt;p&gt;第二，年轻经验不足、缺乏磨炼、有些着急、对待效率低下的人缺乏耐心等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根据以上的关键点，缺点参考回复：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我刚毕业，经验方面不足，我会在工作中积极完成工作，积累各方面经验&lt;/p&gt;
&lt;p&gt;其次，性子急，对待效率低下的人缺乏耐心，但是我平时和别人聊天的时候会控制自己语速和讲话，慢慢培养自己耐心，避免浮躁。（&lt;strong&gt;遵循一个原则避重就轻&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;**Tips：** 利用你的优点改正你的缺点，比如，工作追求细节极致，导致项目无法按时完成，通过时间管理，得以解决。一定不能说对应聘岗位的硬伤的缺点，以及无法弥补的缺点。&lt;/p&gt;
&lt;h1 id=&#34;你还有什么要问我的吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#你还有什么要问我的吗&#34;&gt;#&lt;/a&gt; 你还有什么要问我的吗？&lt;/h1&gt;
&lt;p&gt;当你听到 HR 这样问你时，也差不多快结束了，但千万不要觉得可以放松了&lt;/p&gt;
&lt;p&gt;如果你回答 “没有”，会让面试官觉得你对应聘公司、工作岗位没有太大的兴趣，会让面试官产生误解，影响面试评判&lt;/p&gt;
&lt;p&gt;这个时候面试官将问题抛出，你必须把握住主动权，让面试官知道你是认真对待这次面试，而不是敷衍的流水线面试&lt;/p&gt;
&lt;p&gt;提出来的问题要问到 “点子” 上，要能展现你是不是有思考带着问题来的，有没有提前做好功课，对公司企业背景、文化有没有了解等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回答技巧：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提问的时候要表现这个岗位对我的吸引力，以及我非常想进这家公司，表达诚意&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;死亡回答&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;️我没什么要问的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;️薪资：请问该岗位薪资多少？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;️规章制度类：需不需要打卡？有多少带薪年假？需不需要加班？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;️&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNSVBNSVCRCVFOSVBQiU5OCVFOSVBQSU5QiVFOCVCRiU5QyZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYW5zd2VyJTIyJTJDJTIyc291cmNlSWQlMjIlM0EyMDAxMDI1NjIzJTdE&#34;&gt;好高骛远&lt;/span&gt;类：请问贵公司未来 10 年的发展规划是什么？请问贵司现在面临的最大挑战是什么？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;️个人问题类：今晚能出结果吗？我面试成功了吗？多久可以升职？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;️网上一搜就有类：请问公司 / 这个岗位是干什么的？&lt;/p&gt;
&lt;p&gt;正确回答：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请问贵司的培训机制 / 晋升机制是什么样的？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;️请问这个岗位工作内容的侧重点是哪一块？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;️请问这个岗位的工作日常大概是什么样的？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;️您认为胜任该岗位的人选需要具备哪些核心能力？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;️如果我得以加入这个团队，贵司对我有什么期望？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;️这个岗位的部门人员 / 部门定位是怎么样的呢？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;️为了胜任该岗位，我需要提前学习哪些技术知识？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;️这个岗位的晋升路线是什么样的？&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;你有什么兴趣爱好&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#你有什么兴趣爱好&#34;&gt;#&lt;/a&gt; 你有什么兴趣爱好&lt;/h1&gt;
&lt;p&gt;分析：你以为面试官问你兴趣爱好只是想跟你闲聊找话题吗？Too Simple! 从兴趣爱好入手可以对人才进行全面的评估。表现出一个工作狂形象，或者只是喜欢刷微博微信等对工作毫无帮助的社交狂人，是很难获得好感的。&lt;/p&gt;
&lt;p&gt;✕ 错误回答：&lt;/p&gt;
&lt;p&gt;范例 1：我工作太忙了，实在没时间发展什么兴趣爱好。&lt;/p&gt;
&lt;p&gt;范例 2：我喜欢看电视剧，和闺蜜喝下午茶，还喜欢研究星座……&lt;/p&gt;
&lt;p&gt;✔正确回答：&lt;/p&gt;
&lt;p&gt;根据你应聘的职位酌情回答你的爱好。如果你应聘设计师，那你肯定热爱画画和与艺术有关的活动；如果你应聘一个高管职位，那么在徒步旅行的团体中充当积极活跃的角色，肯定证明你具有团队号召力。当然，这些都要建立在实话实说的基础上。&lt;/p&gt;
</content>
        <category term="面试" />
        <updated>2022-01-12T06:32:32.678Z</updated>
    </entry>
    <entry>
        <id>http://zhanglin233.github.io/2022/01/06/computer-science/interview/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
        <title>后端面试之数据库</title>
        <link rel="alternate" href="http://zhanglin233.github.io/2022/01/06/computer-science/interview/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
        <content type="html">&lt;h1 id=&#34;事务的概念和特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务的概念和特性&#34;&gt;#&lt;/a&gt; 事务的概念和特性？&lt;/h1&gt;
&lt;p&gt;概念：事务（Transaction）是一个操作序列，不可分割的工作单位，以 BEGIN TRANSACTION 开始，以 ROLLBACK/COMMIT 结束&lt;/p&gt;
&lt;p&gt;特性（ACID）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原子性&lt;/strong&gt;（Atomicity）：逻辑上是不可分割的操作单元，事务的所有操作要么全部提交成功，要么全部失败回滚（用回滚日志实现，反向执行日志中的操作）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;（Consistency）：事务的执行必须使数据库保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（Isolation）：一个事务所做的修改在最终提交以前，对其它事务是不可见的（并发执行的事务之间不能相互影响）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久性&lt;/strong&gt;（Durability）：一旦事务提交成功，对数据的修改是永久性的&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;事务四大特性分别由什么保证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务四大特性分别由什么保证&#34;&gt;#&lt;/a&gt; 事务四大特性分别由什么保证？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原子性：由 undo log 保证。undo log 记录了需要回滚的日志信息，回滚时根据 undo log 撤销已经执行成功的 sql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致性：由其他三大特性保证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隔离性：由 MVCC + 锁机制保证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久性：由内存 + redo log 保证&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;事务会出现哪些并发一致性问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务会出现哪些并发一致性问题&#34;&gt;#&lt;/a&gt; 事务会出现哪些并发一致性问题？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;丢失修改&lt;/strong&gt;：一个事务对数据进行了修改，在事务提交之前，另一个事务对同一个数据进行了修改，覆盖了之前的修改；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脏读&lt;/strong&gt;（Dirty Read）：一个事务读取了被另一个事务修改、但未提交（进行了回滚）的数据，造成两个事务得到的数据不一致；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;（Nonrepeatable Read）：在同一个事务中，某查询操作在一个时间读取某一行数据和之后一个时间读取该行数据，发现数据已经发生修改（针对&lt;strong&gt; update&lt;/strong&gt; 操作）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;幻读&lt;/strong&gt;（Phantom Read）：当同一查询多次执行时，由于其它事务在这个数据范围内执行了插入操作，会导致每次返回不同的结果集（和不可重复读的区别：针对的是一个数据整体 / 范围；并且针对&lt;strong&gt; insert&lt;/strong&gt; 操作）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据库的四种隔离级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的四种隔离级别&#34;&gt;#&lt;/a&gt; 数据库的四种隔离级别？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;未提交读&lt;/strong&gt;（Read Uncommited）：在一个事务提交之前，它的执行结果对其它事务也是可见的。会导致脏读、不可重复读、幻读；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提交读&lt;/strong&gt;（Read Commited）：一个事务只能看见已经提交的事务所作的改变。可避免脏读问题；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可重复读&lt;/strong&gt;（Repeatable Read）：可以确保同一个事务在多次读取同样的数据时得到相同的结果。（MySQL 的默认隔离级别）。可避免不可重复读；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可串行化&lt;/strong&gt;（Serializable）：强制事务串行执行，使之不可能相互冲突，从而解决幻读问题。可能导致大量的超时现象和锁竞争，实际很少使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据库左连接右连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库左连接右连接&#34;&gt;#&lt;/a&gt; 数据库左连接，右连接&lt;/h1&gt;
&lt;p&gt;左连接 where 只影向右表，右连接 where 只影响左表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;select * from tbl1 Left Join tbl2 where &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RibDEuSUQ=&#34;&gt;tbl1.ID&lt;/span&gt; = &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RibDIuSUQ=&#34;&gt;tbl2.ID&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;左连接后的检索结果是显示 tbl1 的所有数据和 tbl2 中满足 where 条件的数据。&lt;/p&gt;
&lt;p&gt;简言之 Left Join 影响到的是右边的表&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;select * from tbl1 Right Join tbl2 where &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RibDEuSUQ=&#34;&gt;tbl1.ID&lt;/span&gt; = &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RibDIuSUQ=&#34;&gt;tbl2.ID&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;检索结果是 tbl2 的所有数据和 tbl1 中满足 where 条件的数据。&lt;/p&gt;
&lt;p&gt;简言之 Right Join 影响到的是左边的表。&lt;/p&gt;
&lt;h1 id=&#34;为什么性别字段不适合建立索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么性别字段不适合建立索引&#34;&gt;#&lt;/a&gt; 为什么性别字段不适合建立索引？&lt;/h1&gt;
&lt;p&gt;性别字段一般只有两种值，重复率太高，导致索引选择性太低，索引性价比低。&lt;/p&gt;
&lt;p&gt;因为你访问索引需要付出额外的 IO 开销，你从索引中拿到的只是地址，要想真正访问到数据还是要对表进行一次 IO。&lt;/p&gt;
&lt;p&gt;假如你要从表的 100 万行数据中取几个数据，那么利用索引迅速定位，访问索引的这 IO 开销就非常值了。但如果你是从 100 万行数据中取 50 万行数据，就比如性别字段，那你相对需要访问 50 万次索引，再访问 50 万次表，加起来的开销并不会比直接对表进行一次完整扫描小。&lt;/p&gt;
&lt;p&gt;同时，虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT、UPDATE 和 DELETE。因为更新表时，MySQL 不仅要保存数据还要更新索引。建立索引会占用磁盘空间。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。&lt;/p&gt;
&lt;h1 id=&#34;什么是乐观锁和悲观锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是乐观锁和悲观锁&#34;&gt;#&lt;/a&gt; 什么是乐观锁和悲观锁？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;悲观锁：认为数据随时会被修改，因此每次读取数据之前都会上锁，防止其它事务读取或修改数据；应用于&lt;strong&gt;数据更新比较频繁&lt;/strong&gt;的场景；&lt;/li&gt;
&lt;li&gt;乐观锁：操作数据时不会上锁，但是更新时会判断在此期间有没有别的事务更新这个数据，若被更新过，则失败重试；适用于&lt;strong&gt;读多写少&lt;/strong&gt;的场景。乐观锁的实现方式有：&lt;/li&gt;
&lt;li&gt;加一个版本号或者时间戳字段，每次数据更新时同时更新这个字段；&lt;/li&gt;
&lt;li&gt;先读取想要更新的字段或者所有字段，更新的时候比较一下，只有字段没有变化才进行更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;封锁粒度的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封锁粒度的概念&#34;&gt;#&lt;/a&gt; 封锁粒度的概念&lt;/h1&gt;
&lt;p&gt;MySQL 中提供了两种封锁粒度：&lt;strong&gt;行级锁&lt;/strong&gt;以及&lt;strong&gt;表级锁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;封锁粒度小：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好处：锁定的数据量越少，发生锁争用的可能就越小，系统的&lt;strong&gt;并发程度&lt;/strong&gt;就越高；&lt;/li&gt;
&lt;li&gt;坏处：&lt;strong&gt;系统开销&lt;/strong&gt;大（加锁、释放锁、检查锁的状态都需要消耗资源）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;什么是存储过程有哪些优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是存储过程有哪些优缺点&#34;&gt;#&lt;/a&gt; 什么是存储过程？有哪些优缺点？&lt;/h1&gt;
&lt;p&gt;存储过程是事先经过编译并存储在数据库中的一段 SQL 语句的集合。想要实现相应的功能时，只需要调用这个存储过程就行了（类似于函数，输入具有输出参数）。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预先编译，而不需要每次运行时编译，提高了数据库执行&lt;strong&gt;效率&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;封装了一系列操作，对于一些数据交互比较多的操作，相比于单独执行 SQL 语句，可以&lt;strong&gt;减少网络通信量&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;具有&lt;strong&gt;可复用性&lt;/strong&gt;，减少了数据库开发的工作量；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性高&lt;/strong&gt;，可以让没有权限的用户通过存储过程间接操作数据库；&lt;/li&gt;
&lt;li&gt;更&lt;strong&gt;易于维护&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可移植性差&lt;/strong&gt;，存储过程将应用程序绑定到了数据库上；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发调试复杂&lt;/strong&gt;：没有好的 IDE；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改复杂&lt;/strong&gt;，需要重新编译，有时还需要更新程序中的代码以更新调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;什么是三级封锁协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是三级封锁协议&#34;&gt;#&lt;/a&gt; 什么是三级封锁协议？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一级封锁协议：事务在修改数据之前必须先对其加 X 锁，直到事务结束才释放。可以解决丢失修改问题（两个事务不能同时对一个数据加 X 锁，避免了修改被覆盖）；&lt;/li&gt;
&lt;li&gt;二级封锁协议：在一级的基础上，事务在读取数据之前必须先加 S 锁，读完后释放。可以解决脏读问题（如果已经有事务在修改数据，就意味着已经加了 X 锁，此时想要读取数据的事务并不能加 S 锁，也就无法进行读取，避免了读取脏数据）；&lt;/li&gt;
&lt;li&gt;三级封锁协议：在二级的基础上，事务在读取数据之前必须先加 S 锁，直到事务结束才能释放。可以解决不可重复读问题（避免了在事务结束前其它事务对数据加 X 锁进行修改，保证了事务期间数据不会被其它事务更新）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;介绍acid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍acid&#34;&gt;#&lt;/a&gt; 介绍 ACID？&lt;/h1&gt;
&lt;p&gt;**Atomicity：** 事务本身被视为不可分割的最小单元，事务的操作要么全部成功要么全部失败回滚。&lt;/p&gt;
&lt;p&gt;**Consistency：** 数据库在事务的执行前后都保持一致，&lt;strong&gt;所有事务对同一数据的读取结果都相同&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;**Isolation：** 一个事务的操作在提交之前，对其他事务是不可见的&lt;/p&gt;
&lt;p&gt;**Durability：** 一旦事务提交之后对于数据库的更改就是永久不可回退的&lt;/p&gt;
&lt;h1 id=&#34;不符合范式会出现哪些异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不符合范式会出现哪些异常&#34;&gt;#&lt;/a&gt; 不符合范式会出现哪些异常？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冗余数据：某些同样的数据多次出现（如学生姓名）；&lt;/li&gt;
&lt;li&gt;修改异常：修改了一个记录中的信息，另一个记录中相同的信息却没有修改；&lt;/li&gt;
&lt;li&gt;删除异常：删除一个信息，那么也会丢失其它信息（删除一个课程，丢失了一个学生的信息）；&lt;/li&gt;
&lt;li&gt;插入异常：无法插入（插入一个还没有课程信息的学生）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;事务的-acid-特性在mysql中的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务的-acid-特性在mysql中的实现&#34;&gt;#&lt;/a&gt; 事务的 ACID 特性在 MySQL 中的实现？&lt;/h1&gt;
&lt;p&gt;原子性：利用 undo log 实现的&lt;/p&gt;
&lt;p&gt;持久性：利用 redo log 实现的&lt;/p&gt;
&lt;p&gt;一致性：是利用 原子性、持久性、隔离性来实现的。事务的四大特性中一致性是目的，其他都是保证一致性的手段。&lt;/p&gt;
&lt;p&gt;**redo log 😗* 记录了数据操作在物理层面的修改，事务进行中会不断的产生 redo log 在事务进行提交时一次 flush 操作保存到磁盘中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;undo log:&lt;/strong&gt; 记录事务的修改操作，可以实现事务的回滚。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务的隔离性由 MVCC（多版本并发控制）与锁实现&lt;/strong&gt;：因而隔离性也可以叫做并发控制。&lt;/p&gt;
&lt;h1 id=&#34;什么是两段锁协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是两段锁协议&#34;&gt;#&lt;/a&gt; 什么是两段锁协议？&lt;/h1&gt;
&lt;p&gt;事务必须严格分为两个阶段对数据进行加锁和解锁的操作，第一阶段加锁，第二阶段解锁。也就是说一个事务中一旦释放了锁，就不能再申请新锁了。&lt;/p&gt;
&lt;p&gt;可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。事务遵循两段锁协议是保证可串行化调度的充分条件。&lt;/p&gt;
&lt;h1 id=&#34;什么是-mvcc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是-mvcc&#34;&gt;#&lt;/a&gt; 什么是 MVCC？&lt;/h1&gt;
&lt;p&gt;​	多版本并发控制（Multi-Version Concurrency Control, MVCC），MVCC 在每行记录后面都保存有两个隐藏的列，用来存储&lt;strong&gt;创建版本号&lt;/strong&gt;和&lt;strong&gt;删除版本号&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建版本号：创建一个数据行时的事务版本号（&lt;strong&gt;事务版本号&lt;/strong&gt;：事务开始时的系统版本号；系统版本号：每开始一个新的事务，系统版本号就会自动递增）；&lt;/li&gt;
&lt;li&gt;删除版本号：删除操作时的事务版本号；&lt;/li&gt;
&lt;li&gt;各种操作：&lt;/li&gt;
&lt;li&gt;插入操作时，记录创建版本号；&lt;/li&gt;
&lt;li&gt;删除操作时，记录删除版本号；&lt;/li&gt;
&lt;li&gt;更新操作时，先记录删除版本号，再新增一行记录创建版本号；&lt;/li&gt;
&lt;li&gt;查询操作时，要符合以下条件才能被查询出来：删除版本号未定义或大于当前事务版本号（删除操作是在当前事务启动之后做的）；创建版本号小于或等于当前事务版本号（创建操作是事务完成或者在事务启动之前完成）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	通过版本号减少了锁的争用，&lt;strong&gt;提高了系统性能&lt;/strong&gt;；可以实现&lt;strong&gt;提交读&lt;/strong&gt;和&lt;strong&gt;可重复读&lt;/strong&gt;两种隔离级别，未提交读无需使用 MVCC&lt;/p&gt;
&lt;h1 id=&#34;数据库的范式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的范式&#34;&gt;#&lt;/a&gt; 数据库的范式？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一范式&lt;/strong&gt;（1NF，Normal Form）：&lt;strong&gt;属性不应该是可分的&lt;/strong&gt;。举例：如果将 “电话” 作为一个属性（一列），是不符合 1NF 的，因为电话这个属性可以分解为家庭电话和移动电话... 如果将 “移动电话” 作为一个属性，就符合 1NF；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二范式&lt;/strong&gt; 2NF：每个非主属性&lt;strong&gt;完全依赖&lt;/strong&gt;于主属性集（候选键集）；&lt;/li&gt;
&lt;li&gt;B 完全依赖于 A，就是说 A 中的所有属性唯一决定 B，属性少了就不能唯一决定，属性多了则有冗余（叫依赖不叫完全依赖）。举例：（学号，课程名）这个主属性集可以唯一决定成绩，但是对于学生姓名这个属性，（学号，课程名）这个属性集就是冗余的，所以学生姓名不完全依赖于（学号，课程名）这一属性集；&lt;/li&gt;
&lt;li&gt;主属性集 / 候选码集：某一组属性能够唯一确定其它的属性（主键就是从候选键集中选的一个键），而其子集不能，这样的属性组中的属性就是主属性；不在候选码集中的属性成为非主属性；&lt;/li&gt;
&lt;li&gt;可以通过分解来满足 2NF：将（学号，课程名，成绩）做成一张表；（学号，学生姓名）做成另一张表，避免大量的数据冗余； 满足 1NF 后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三范式&lt;/strong&gt; 3NF：在 2NF 的基础上，非主属性&lt;strong&gt;不传递依赖&lt;/strong&gt;于主属性&lt;/li&gt;
&lt;li&gt;传递依赖：如果 C 依赖于 B，B 依赖于 A，那么 C 传递依赖于 A；&lt;/li&gt;
&lt;li&gt;3NF 在 2NF 的基础上，消除了非主属性之间的依赖；比如一个表中，主属性有（学号），非主属性有（姓名，院系，院长名），可以看到院长名这个非主属性依赖于院系，传递依赖于学号。消除的办法是分解。 必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用索引的优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用索引的优点&#34;&gt;#&lt;/a&gt; 使用索引的优点&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大大加快了数据的&lt;strong&gt;检索速度&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;可以显著减少查询中&lt;strong&gt;分组和排序&lt;/strong&gt;的时间；&lt;/li&gt;
&lt;li&gt;通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性；&lt;/li&gt;
&lt;li&gt;将随机 I/O 变为&lt;strong&gt;顺序 I/O&lt;/strong&gt;（B+Tree 索引是有序的，会将相邻的数据都存储在一起）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	缺点：建立和维护索引耗费时间空间，更新索引很慢。&lt;/p&gt;
&lt;h1 id=&#34;哪些情况下索引会失效&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哪些情况下索引会失效&#34;&gt;#&lt;/a&gt; 哪些情况下索引会失效？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以 “%(表示任意 0 个或多个字符)” 开头的 LIKE 语句；&lt;/li&gt;
&lt;li&gt;OR 语句前后没有同时使用索引；&lt;/li&gt;
&lt;li&gt;数据类型出现隐式转化（如 varchar 不加单引号的话可能会自动转换为 int 型）；&lt;/li&gt;
&lt;li&gt;对于多列索引，必须满足 &lt;strong&gt;最左匹配原则&lt;/strong&gt; / 最左前缀原则 (最左优先，eg：多列索引 col1、col2 和 col3，则 索引生效的情形包括 col1 或 col1，col2 或 col1，col2，col3)；&lt;/li&gt;
&lt;li&gt;如果 MySQL 估计全表扫描比索引快，则不使用索引（比如非常小的表）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;索引的分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引的分类&#34;&gt;#&lt;/a&gt; 索引的分类？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通索引&lt;/li&gt;
&lt;li&gt;唯一索引 UNIQUE：索引列的值必须唯一，但允许有空值；&lt;/li&gt;
&lt;li&gt;主键索引 PRIMARY KEY：必须唯一，不允许空值（是一种特殊的唯一索引；MySQL 创建主键时默认为聚集索引，但主键也可以是非聚集索引）；&lt;/li&gt;
&lt;li&gt;单列索引和多列索引 / 复合索引（Composite）：索引的列数；&lt;/li&gt;
&lt;li&gt;覆盖（Covering）索引：索引包含了所有满足查询所需要的数据，查询的时候只需要读取索引而不需要回表读取数据；&lt;/li&gt;
&lt;li&gt;聚集（Clustered）索引 / 非聚集索引：对磁盘上存放数据的物理地址重新组织以使这些数据按照指定规则排序的一种索引（数据的物理排列顺序和索引排列顺序一致）。因此每张表只能创建一个聚集索引（因为要改变物理存储顺序）。优点是查询速度快，因为可以直接按照顺序得到需要数据的物理地址。缺点是进行修改的速度较慢。对于需要经常搜索范围的值很有效。非聚集索引只记录逻辑顺序，并不改变物理顺序；&lt;/li&gt;
&lt;li&gt;分区索引（？）&lt;/li&gt;
&lt;li&gt;虚拟索引（Virtual）：模拟索引的存在而不用真正创建一个索引，用于快速测试创建索引对执行计划的影响。没有相关的索引段，不增加存储空间的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mysql的两种存储引擎-innodb-和-myisam-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql的两种存储引擎-innodb-和-myisam-的区别&#34;&gt;#&lt;/a&gt; MySQL 的两种存储引擎 InnoDB 和 MyISAM 的区别？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB&lt;strong&gt; 支持事务&lt;/strong&gt;，可以进行 Commit 和 Rollback；&lt;/li&gt;
&lt;li&gt;MyISAM 只支持表级锁，而 InnoDB 还&lt;strong&gt;支持行级锁&lt;/strong&gt;，提高了并发操作的性能；&lt;/li&gt;
&lt;li&gt;InnoDB &lt;strong&gt;支持外键&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;MyISAM &lt;strong&gt;崩溃&lt;/strong&gt;后发生损坏的概率比 InnoDB 高很多，而且&lt;strong&gt;恢复的速度&lt;/strong&gt;也更慢；&lt;/li&gt;
&lt;li&gt;MyISAM 支持&lt;strong&gt;压缩&lt;/strong&gt;表和空间数据索引，InnoDB 需要更多的内存和存储；&lt;/li&gt;
&lt;li&gt;InnoDB 支持在线&lt;strong&gt;热备份&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;为什么用mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么用mysql&#34;&gt;#&lt;/a&gt; 为什么用 MySQL？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql 性能卓越，服务稳定，很少出现异常宕机。&lt;/li&gt;
&lt;li&gt;mysql 开放源代码且无版权制约，自主性及使用成本低。&lt;/li&gt;
&lt;li&gt;mysql 历史悠久，社区及用户非常活跃，遇到问题，可以寻求帮助。&lt;/li&gt;
&lt;li&gt;mysql 软件体积小，安装使用简单，并且易于维护，安装及维护成本低。&lt;/li&gt;
&lt;li&gt;mysql 品牌口碑效应，使得企业无需考虑就直接用之，lamp,lnmp 流行架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据库是怎么去做持久性的做持久性的时候可能会遇到什么问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库是怎么去做持久性的做持久性的时候可能会遇到什么问题&#34;&gt;#&lt;/a&gt; 数据库是怎么去做持久性的，做持久性的时候可能会遇到什么问题？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;利用 redo log 做持久性，redo log 主要记录了 data 在物理层面的修改。redo log 在事务进行提交时&lt;strong&gt;一次 flush 操作保存到磁盘中&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;什么是视图什么是游标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是视图什么是游标&#34;&gt;#&lt;/a&gt; 什么是视图？什么是游标？&lt;/h1&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视图：从数据库的基本表中通过查询选取出来的数据组成的&lt;strong&gt;虚拟表&lt;/strong&gt;（数据库中存放视图的定义）。可以对其进行增 / 删 / 改 / 查等操作。视图是对若干张基本表的引用，一张虚表，查询语句执行的结果，不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）；可以跟基本表一样，进行增删改查操作 (ps: 增删改操作有条件限制)；如连表查询产生的视图无法进行，对视图的增删改会影响原表的数据。好处：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过只给用户访问视图的权限，保证数据的&lt;strong&gt;安全性&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;简化&lt;/strong&gt;复杂的 SQL 操作，隐藏数据的复杂性（比如复杂的连接）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;游标（Cursor）：用于定位在查询返回的&lt;strong&gt;结果集的特定行&lt;/strong&gt;，以对特定行进行操作。使用游标可以方便地对结果集进行移动遍历，根据需要滚动或对浏览 / 修改任意行中的数据。主要用于交互式应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面试 数据库" />
        <updated>2022-01-06T08:15:49.695Z</updated>
    </entry>
    <entry>
        <id>http://zhanglin233.github.io/2021/12/26/computer-science/interview/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
        <title>后端面试之操作系统</title>
        <link rel="alternate" href="http://zhanglin233.github.io/2021/12/26/computer-science/interview/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h1 id=&#34;操作系统基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统基础&#34;&gt;#&lt;/a&gt; 操作系统基础&lt;/h1&gt;
&lt;h2 id=&#34;基本特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本特征&#34;&gt;#&lt;/a&gt; 基本特征&lt;/h2&gt;
&lt;h3 id=&#34;并发和并行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发和并行&#34;&gt;#&lt;/a&gt; 并发和并行&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;并发是指宏观上在一段时间内能同时运行多个程序，而并行是指在同一时刻可以同时运行多个指令&lt;/li&gt;
&lt;li&gt;操作系统通过引入进程和线程，使得程序能够并发运行&lt;/li&gt;
&lt;li&gt;并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享&#34;&gt;#&lt;/a&gt; 共享&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共享是指系统中的资源可以被多个并发进程共同使用&lt;/li&gt;
&lt;li&gt;共享的方式有两种：&lt;strong&gt;互斥共享和同时共享&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;互斥共享的资源称为临界资源；例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;虚拟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟&#34;&gt;#&lt;/a&gt; 虚拟&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;虚拟技术把一个物理实体转换为多个逻辑实体&lt;/li&gt;
&lt;li&gt;虚拟技术主要有两种：时（时间）分复用技术和空（空间）分复用技术&lt;/li&gt;
&lt;li&gt;多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换&lt;/li&gt;
&lt;li&gt;虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行&lt;strong&gt;页面置换算法&lt;/strong&gt;，将该页置换到内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;异步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步&#34;&gt;#&lt;/a&gt; 异步&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本功能&#34;&gt;#&lt;/a&gt; 基本功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程管理&lt;/strong&gt;：进程控制、进程同步、进程通信、死锁处理、处理机调度等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存管理&lt;/strong&gt;：内存分配、地址映射、内存保护与共享、虚拟内存等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件管理&lt;/strong&gt;：文件存储空间的管理、目录管理、文件读写管理和保护等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备管理&lt;/strong&gt;：完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率，主要包括缓冲管理、设备分配、设备处理、虚拟设备等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用&#34;&gt;#&lt;/a&gt; 系统调用&lt;/h2&gt;
&lt;p&gt;如果一个进程在用户态需要使用内核态功能，就进行系统调用从而陷入内核态，之后由操作系统代为完成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作流程为：
&lt;ul&gt;
&lt;li&gt;用户态程序将一些数据值放在寄存器中，或者使用参数创建一个栈帧 (stack frame), 以此表明需要操作系统提供的服务&lt;/li&gt;
&lt;li&gt;用户态程序执行陷阱指令（Trap Instruction，系统调用在 CPU 中的实现）&lt;/li&gt;
&lt;li&gt;CPU 切换到内核态，并跳到位于内存指定位置的指令，这些指令是操作系统的一部分，他们具有内存保护，不可被用户态程序访问&lt;/li&gt;
&lt;li&gt;这些指令称之为陷阱 (trap) 或者系统调用处理器 (system call handler). 他们会读取程序放入内存的数据参数，并执行程序请求的服务&lt;/li&gt;
&lt;li&gt;系统调用完成后，操作系统会重置 CPU 为用户态并返回系统调用的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux 的系统调用功能主要有：
&lt;ul&gt;
&lt;li&gt;进程控制： &lt;code&gt;fork();exit();wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进程通信： &lt;code&gt;pipe();shmget();mmap()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件操作： &lt;code&gt;open();read();write()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备操作： &lt;code&gt;ioctl();read();write()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;信息维护： &lt;code&gt;getpid();alarm();sleep()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安全： &lt;code&gt;chmod();umask();chown()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户态和内核态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户态和内核态&#34;&gt;#&lt;/a&gt; 用户态和内核态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内核态：CPU 可以访问内存的所有数据，包括外围设备，CPU 也可以将自己从一个程序切换到另一个程序&lt;/li&gt;
&lt;li&gt;用户态：只能受限的访问内存，且不允许访问外围设备，占用 CPU 的能力被剥夺，CPU 资源可以被其他程序获取&lt;/li&gt;
&lt;li&gt;切换的三种方式：系统调用（用户进程主动）、中断（被动）、外围设备中断（被动）
&lt;ul&gt;
&lt;li&gt;中断：当 CPU 在用户态下运行时发生一些没有预知的异常，这会触发由当前运行进程切换到处理此异常的内核相关进程中，也就是切换到内核态，比如缺页异常&lt;/li&gt;
&lt;li&gt;外围设备中断：当外围设备完成用户请求操作后，会向 CPU 发出相应的中断信号，这时 CPU 会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户态切换到内核态的步骤：
&lt;ul&gt;
&lt;li&gt;从当前进程的描述符中提取其内核栈的 &lt;code&gt;ss0&lt;/code&gt;  和 &lt;code&gt;esp0&lt;/code&gt;  信息&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;ss0&lt;/code&gt;  和 &lt;code&gt;esp0&lt;/code&gt;  指向的内核栈将当前进程的 &lt;code&gt;cs,eip,eflags,ss,esp&lt;/code&gt;  信息保存起来，这个过程也完成了用户栈到内核栈的切换过程，同时保存了被暂停执行的程序的下一条指令&lt;/li&gt;
&lt;li&gt;将先前由中断向量检索得到的中断处理程序的 &lt;code&gt;cs,eip&lt;/code&gt;  信息装入相应的寄存器，开始执行中断处理程序，这时就转到了内核态的程序执行了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中断分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中断分类&#34;&gt;#&lt;/a&gt; 中断分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外中断&lt;/strong&gt;：由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入 / 输出处理已经完成，处理器能够发送下一个输入 / 输出请求。此外还有时钟中断、控制台中断等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常&lt;/strong&gt;：由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;陷入&lt;/strong&gt;：用户程序使用系统调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内核分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内核分类&#34;&gt;#&lt;/a&gt; 内核分类&lt;/h2&gt;
&lt;h3 id=&#34;大内核&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大内核&#34;&gt;#&lt;/a&gt; 大内核&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大内核是将操作系统功能作为一个紧密结合的整体放到内核&lt;/li&gt;
&lt;li&gt;由于各模块共享信息，因此有很高的性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微内核&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微内核&#34;&gt;#&lt;/a&gt; 微内核&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立&lt;/li&gt;
&lt;li&gt;在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态&lt;/li&gt;
&lt;li&gt;因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软链接和硬链接区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软链接和硬链接区别&#34;&gt;#&lt;/a&gt; 软链接和硬链接区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;建立软链接和硬链接的语法
&lt;ul&gt;
&lt;li&gt;软链接：ln -s 源文件 目标文件&lt;/li&gt;
&lt;li&gt;硬链接：ln 源文件 目标文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软硬连接的理解
&lt;ul&gt;
&lt;li&gt;软连接类似于快捷方式，指向源文件的地址&lt;/li&gt;
&lt;li&gt;硬连接类似于 cp -p 加上同步更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除原文件对软硬链接的影响
&lt;ul&gt;
&lt;li&gt;软链接失效&lt;/li&gt;
&lt;li&gt;硬链接还可以查看&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字节序大端小端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字节序大端小端&#34;&gt;#&lt;/a&gt; 字节序（大端小端）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大端字节序：高位字节在前，低位字节在后，这是人类读写数值的方法。&lt;/li&gt;
&lt;li&gt;小端字节序：低位字节在前，高位字节在后&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么要有大端小段？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。&lt;/li&gt;
&lt;li&gt;但是，人类还是习惯读写大端字节序。所以，除了计算机的内部处理，其他的场合几乎都是大端字节序，比如网络传输和文件储存。&lt;/li&gt;
&lt;li&gt;一般只有读取外部数据的时候才需要考虑字节序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用系统的大小端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;x86 字节序：小端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;macos：大端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络字节序大端：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//将主机字节序转换为网络字节序
 unit32_t htonl (unit32_t hostlong);
 unit16_t htons (unit16_t hostshort);
 //将网络字节序转换为主机字节序
 unit32_t ntohl (unit32_t netlong);
 unit16_t ntohs (unit16_t netshort);
123456
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何判断&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;** 判断的思路是：** 确定一个多字节的值（下面使用的是 4 字节的整数），将其写入内存（即赋值给一个变量），然后用指针取其首地址所对应的字节（即低地址的一个字节），判断该字节存放的是高位还是低位，高位说明是 Big endian，低位说明是 Little endian。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux查看端口-进程常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux查看端口-进程常用命令&#34;&gt;#&lt;/a&gt; linux 查看端口、进程 (常用命令)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;netstat -tunlp&lt;/li&gt;
&lt;li&gt;ps aux&lt;/li&gt;
&lt;li&gt;cat /proc/cpuinfo 显示 CPU info 的信息&lt;/li&gt;
&lt;li&gt;df -h 显示已经挂载的分区列表&lt;/li&gt;
&lt;li&gt;chmod ugo+rwx directory1 设置目录的所有人 (u)、群组 (g) 以及其他人 (o) 以读（r ）、&lt;/li&gt;
&lt;li&gt;tar -cvfj archive.tar.bz2 dir1 创建一个 bzip2 格式的压缩包&lt;br /&gt;
 tar -jxvf archive.tar.bz2 解压一个 bzip2 格式的压缩包&lt;br /&gt;
 tar -cvfz archive.tar.gz dir1 创建一个 gzip 格式的压缩包&lt;br /&gt;
 tar -zxvf archive.tar.gz 解压一个 gzip 格式的压缩包&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;操作系统进程与线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统进程与线程&#34;&gt;#&lt;/a&gt; 操作系统进程与线程&lt;/h1&gt;
&lt;h2 id=&#34;进程-线程和协程的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程-线程和协程的概念&#34;&gt;#&lt;/a&gt; 进程、线程和协程的概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进程是对运行时程序的封装，是系统进行资源调度和分配的的基本单位，实现了操作系统的并发。&lt;/li&gt;
&lt;li&gt;线程是进程内的一个执行实体或执行单元，是 CPU 调度和分派的基本单位，实现进程内部的并发。&lt;/li&gt;
&lt;li&gt;区别：
&lt;ul&gt;
&lt;li&gt;调度
&lt;ul&gt;
&lt;li&gt;一个线程只能属于一个进程，而一个进程至少有一个线程。&lt;/li&gt;
&lt;li&gt;进程不会相互影响，而线程挂掉一个就会导致整个进程挂掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源角度：
&lt;ul&gt;
&lt;li&gt;进程在执行过程中拥有独立的内存单元，而同一进程的多个线程共享进程的内存。每个线程都由自己独立的栈段。&lt;/li&gt;
&lt;li&gt;进程是资源分配的最小单位，线程是 CPU 调度的最小单位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统开销
&lt;ul&gt;
&lt;li&gt;进程的创造销毁切换所花费的系统开销要与远大于线程的开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程间通信依靠 IPC，线程间通信直接读取共享数据段&lt;/li&gt;
&lt;li&gt;协程和线程区别
&lt;ul&gt;
&lt;li&gt;和多线程比，协程最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。&lt;/li&gt;
&lt;li&gt;第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阻塞非阻塞同步异步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阻塞非阻塞同步异步&#34;&gt;#&lt;/a&gt; 阻塞，非阻塞，同步，异步&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同步：在发出一个功能调用的时候，在没有得到结果之前，该调用就不返回。（该调用还处于激活状态）&lt;/li&gt;
&lt;li&gt;异步：当一个异步调用发出后，调用这并不能立刻得到结果。实际处理调用的部件在完成后通过状态、通知和回调来通知调用者。&lt;/li&gt;
&lt;li&gt;阻塞：阻塞调用在调用结果返回之前，线程会被挂起。只有在得到结果之后才会返回。&lt;/li&gt;
&lt;li&gt;非阻塞：调用再不能立刻得到结果之前，函数不会阻塞当前进程，而会立刻返回。（recv 接收数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程状态转换图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程状态转换图&#34;&gt;#&lt;/a&gt; 进程状态转换图&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/img_convert/522239cb3769cbcb3953658c24d3831f.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1）创建状态：进程正在被创建&lt;/p&gt;
&lt;p&gt;2）就绪状态：进程被加入到就绪队列中等待 CPU 调度运行&lt;/p&gt;
&lt;p&gt;3）执行状态：进程正在被运行&lt;/p&gt;
&lt;p&gt;4）等待阻塞状态：进程因为某种原因，比如等待 I/O，等待设备，而暂时不能运行。&lt;/p&gt;
&lt;p&gt;5）终止状态：进程运行完毕&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;交换技术&lt;/p&gt;
&lt;p&gt;当多个进程竞争内存资源时，会造成内存资源紧张，并且，如果此时没有就绪进程，处理机会空闲，I/0 速度比处理机速度慢得多，可能出现全部进程阻塞等待 I/O。&lt;/p&gt;
&lt;p&gt;针对以上问题，提出了两种解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）交换技术：换出一部分进程到外存，腾出内存空间。&lt;/li&gt;
&lt;li&gt;2）虚拟存储技术：每个进程只能装入一部分程序和数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在交换技术上，将内存暂时不能运行的进程，或者暂时不用的数据和程序，换出到外存，来腾出足够的内存空间，把已经具备运行条件的进程，或进程所需的数据和程序换入到内存。从而出现了进程的挂起状态：进程被交换到外存，进程状态就成为了挂起状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活动阻塞，静止阻塞，活动就绪，静止就绪&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）活动阻塞：进程在内存，但是由于某种原因被阻塞了。&lt;/li&gt;
&lt;li&gt;2）静止阻塞：进程在外存，同时被某种原因阻塞了。&lt;/li&gt;
&lt;li&gt;3）活动就绪：进程在内存，处于就绪状态，只要给 CPU 和调度就可以直接运行。&lt;/li&gt;
&lt;li&gt;4）静止就绪：进程在外存，处于就绪状态，只要调度到内存，给 CPU 和调度就可以运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哪些情况进程会由运行转化为阻塞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哪些情况进程会由运行转化为阻塞&#34;&gt;#&lt;/a&gt; 哪些情况进程会由运行转化为阻塞&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进程缺少相应 io 资源&lt;/li&gt;
&lt;li&gt;访问正在被其他进程访问的临界资源，等待解锁&lt;/li&gt;
&lt;li&gt;进程睡眠&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程之间的通信方式以及优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程之间的通信方式以及优缺点&#34;&gt;#&lt;/a&gt; 进程之间的通信方式以及优缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管道（PIPE）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有名管道：一种半双工的通信方式，它允许无亲缘关系进程间的通信
&lt;ul&gt;
&lt;li&gt;优点：可以实现任意关系的进程间的通信&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;长期存于系统中，使用不当容易出错&lt;/li&gt;
&lt;li&gt;缓冲区有限&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;int&lt;/strong&gt; &lt;strong&gt;mkfifo&lt;/strong&gt;(&lt;strong&gt;const&lt;/strong&gt; &lt;strong&gt;char&lt;/strong&gt; *path, &lt;strong&gt;mode_t&lt;/strong&gt; mode);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;int&lt;/strong&gt; &lt;strong&gt;mkfifoat&lt;/strong&gt;(&lt;strong&gt;int&lt;/strong&gt; fd, &lt;strong&gt;const&lt;/strong&gt; &lt;strong&gt;char&lt;/strong&gt; *path, &lt;strong&gt;mode_t&lt;/strong&gt; mode);&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无名管道：一种半双工的通信方式，只能在具有亲缘关系的进程间使用（父子进程）
&lt;ul&gt;
&lt;li&gt;优点：简单方便&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;局限于单向通信&lt;/li&gt;
&lt;li&gt;只能创建在它的进程以及其有亲缘关系的进程之间&lt;/li&gt;
&lt;li&gt;缓冲区有限&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用：
&lt;ol&gt;
&lt;li&gt;父进程创建一个管道，创建一个数组作为索引。（int pipe（int fd [2]））&lt;/li&gt;
&lt;li&gt;fork 一个子进程，子进程会复制父进程的管道文件。父子进程根据需要各自关闭读写端。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号量（Semaphore）：一个计数器，可以用来控制多个线程对共享资源的访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：可以同步进程&lt;/li&gt;
&lt;li&gt;缺点：信号量有限&lt;/li&gt;
&lt;li&gt;使用（SIGHUP）子进程监视父进程是否存在，接收父进程死亡的信号&lt;/li&gt;
&lt;li&gt;只有当管道所有的读端都被关闭时，才会产生 SIGPIPE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号（Signal）：一种比较复杂的通信方式，用于通知接收进程某个事件已经发生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息队列（Message Queue）：是消息的链表，存放在内核中并由消息队列标识符标识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：可以实现任意进程间的通信，并通过系统调用函数来实现消息发送和接收之间的同步，无需考虑同步问题，方便&lt;/li&gt;
&lt;li&gt;缺点：信息的复制需要额外消耗 CPU 的时间，不适宜于信息量大或操作频繁的场合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共享内存（Shared Memory）：共享内存就是允许两个或多个进程共享一定的存储区。就如同 malloc () 函数向不同进程返回了指向同一个物理内存区域的指针。当一个进程改变了这块地址中的内容的时候，其它进程都会察觉到这个更改。因为数据不需要在客户机和服务器端之间复制，数据直接写到内存，不用若干次数据拷贝，所以这是最快的一种 IPC。&lt;/p&gt;
&lt;p&gt;注：共享内存没有任何的同步与互斥机制，所以要使用信号量来实现对共享内存的存取的同步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：无须复制，快捷，信息量大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信是通过将共享空间缓冲区直接附加到进程的虚拟地址空间中来实现的，因此进程间的读写操作的同步问题&lt;/li&gt;
&lt;li&gt;利用内存缓冲区直接交换信息，内存的实体存在于计算机中，只能同一个计算机系统中的诸多进程共享，不方便网络通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;int` `shmget(key_t key, ``size_t` `size, ``int` `shmflg);
1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1) 第一个参数 key 是长整型（唯一非零），系统建立 IPC 通讯 （ 消息队列、 信号量和 共享内存） 时必须指定一个 ID 值。通常情况下，该 id 值通过 ftok 函数得到，由内核变成标识符，要想让两个进程看到同一个信号集，只需设置 key 值不变就可以。&lt;/p&gt;
&lt;p&gt;(2) 第二个参数 size 指定共享内存的大小，它的值一般为一页大小的整数倍（未到一页，操作系统向上对齐到一页，但是用户实际能使用只有自己所申请的大小）。&lt;/p&gt;
&lt;p&gt;(3) 第三个参数 shmflg 是一组标志，创建一个新的共享内存，将 shmflg 设置了 IPC_CREAT 标志后，共享内存存在就打开。而 IPC_CREAT | IPC_EXCL 则可以创建一个新的，唯一的共享内存，如果共享内存已存在，返回一个错误。一般我们会还或上一个文件权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;套接字（Socket）：可用于不同计算机间的进程通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;传输数据为字节级，传输数据可自定义，数据量小效率高&lt;/li&gt;
&lt;li&gt;传输数据时间短，性能高&lt;/li&gt;
&lt;li&gt;适合于客户端和服务器端之间信息实时交互&lt;/li&gt;
&lt;li&gt;可以加密，数据安全性强&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：需对传输的数据进行解析，转化成应用级的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程间的调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程间的调度算法&#34;&gt;#&lt;/a&gt; 进程间的调度算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;批处理系统：先来先服务、短作业优先、最短剩余时间优先&lt;/li&gt;
&lt;li&gt;交互式系统：时间片轮转、优先级调度，多级反馈队列&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程之间的通信方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程之间的通信方式&#34;&gt;#&lt;/a&gt; 线程之间的通信方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;锁机制：包括互斥锁 / 量（mutex）、读写锁（reader-writer lock）、自旋锁（spin lock）、条件变量（condition）
&lt;ul&gt;
&lt;li&gt;互斥锁 / 量（mutex）：提供了以排他方式防止数据结构被并发修改的方法。&lt;/li&gt;
&lt;li&gt;读写锁（reader-writer lock）：允许多个线程同时读共享数据，而对写操作是互斥的。（shared_mutex）
&lt;ul&gt;
&lt;li&gt;shared_mutex 比一般的 mutex 多了函数 lock_shared ()/unlock_shared (), 允许多个（读者）线程同时加锁、解锁，而 shared_lock 则相当于共享版的 lock_guard。&lt;/li&gt;
&lt;li&gt;对 shared_mutex 使用 lock_guard 或者 unique_lock 即达到了写着独占的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自旋锁（spin lock）与互斥锁类似，都是为了保护共享资源。互斥锁是当资源被占用，申请者进入睡眠状态；而自旋锁则循环检测保持者是否已经释放锁。
&lt;ul&gt;
&lt;li&gt;自旋锁主要适用于被持有时间短，线程不希望在重新调度上花过多时间的情况。实际上许多其他类型的锁在底层使用了自旋锁实现，例如多数互斥锁在试图获取锁的时候会先自旋一小段时间，然后才会休眠。如果在持锁时间很长的场景下使用自旋锁，则会导致 CPU 在这个线程的时间片用尽之前一直消耗在无意义的忙等上，造成计算资源的浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;条件变量（condition）：可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。
&lt;ul&gt;
&lt;li&gt;condition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信号量机制 (Semaphore)
&lt;ul&gt;
&lt;li&gt;无名线程信号量&lt;/li&gt;
&lt;li&gt;命名线程信号量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信号机制 (Signal)：类似进程间的信号处理&lt;/li&gt;
&lt;li&gt;屏障（barrier）：屏障允许每个线程等待，直到所有的合作线程都达到某一点，然后从该点继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制&lt;/p&gt;
&lt;h2 id=&#34;进程-线程之间私有和共享的资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程-线程之间私有和共享的资源&#34;&gt;#&lt;/a&gt; 进程、线程之间私有和共享的资源&lt;/h2&gt;
&lt;h3 id=&#34;进程之间私有和共享的资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程之间私有和共享的资源&#34;&gt;#&lt;/a&gt; 进程之间私有和共享的资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;私有：地址空间、堆、全局变量、栈、寄存器&lt;/li&gt;
&lt;li&gt;共享：代码段，公共数据，进程目录，进程 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程之间私有和共享的资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程之间私有和共享的资源&#34;&gt;#&lt;/a&gt; 线程之间私有和共享的资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;私有：线程栈，寄存器，程序计数器&lt;/li&gt;
&lt;li&gt;共享：堆，地址空间，全局变量，静态变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多进程和多线程对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多进程和多线程对比&#34;&gt;#&lt;/a&gt; 多进程和多线程对比&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对比维度&lt;/th&gt;
&lt;th&gt;多进程&lt;/th&gt;
&lt;th&gt;多线程&lt;/th&gt;
&lt;th&gt;总结&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据共享、同步&lt;/td&gt;
&lt;td&gt;数据共享复杂，需要用 IPC；数据是分开的，同步简单&lt;/td&gt;
&lt;td&gt;因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂&lt;/td&gt;
&lt;td&gt;各有优势&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存、CPU&lt;/td&gt;
&lt;td&gt;占用内存多，切换复杂，CPU 利用率低&lt;/td&gt;
&lt;td&gt;占用内存少，切换简单，CPU 利用率高&lt;/td&gt;
&lt;td&gt;线程占优&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;创建销毁、切换&lt;/td&gt;
&lt;td&gt;创建销毁、切换复杂，速度慢&lt;/td&gt;
&lt;td&gt;创建销毁、切换简单，速度很快&lt;/td&gt;
&lt;td&gt;线程占优&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;编程、调试&lt;/td&gt;
&lt;td&gt;编程简单，调试简单&lt;/td&gt;
&lt;td&gt;编程复杂，调试复杂&lt;/td&gt;
&lt;td&gt;进程占优&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可靠性&lt;/td&gt;
&lt;td&gt;进程间不会互相影响&lt;/td&gt;
&lt;td&gt;一个线程挂掉将导致整个进程挂掉&lt;/td&gt;
&lt;td&gt;进程占优&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分布式&lt;/td&gt;
&lt;td&gt;适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单&lt;/td&gt;
&lt;td&gt;适应于多核分布式&lt;/td&gt;
&lt;td&gt;进程占优&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;多进程和多线程优劣&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多进程和多线程优劣&#34;&gt;#&lt;/a&gt; 多进程和多线程优劣&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;优劣&lt;/th&gt;
&lt;th&gt;多进程&lt;/th&gt;
&lt;th&gt;多线程&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;优点&lt;/td&gt;
&lt;td&gt;编程、调试简单，可靠性较高&lt;/td&gt;
&lt;td&gt;创建、销毁、切换速度快，内存、资源占用小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;缺点&lt;/td&gt;
&lt;td&gt;创建、销毁、切换速度慢，内存、资源占用大&lt;/td&gt;
&lt;td&gt;编程、调试复杂，可靠性较差&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;多进程和多线程选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多进程和多线程选择&#34;&gt;#&lt;/a&gt; 多进程和多线程选择&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要频繁创建销毁的优先用线程&lt;/li&gt;
&lt;li&gt;需要进行大量计算的优先使用线程&lt;/li&gt;
&lt;li&gt;强相关的处理用线程，弱相关的处理用进程&lt;/li&gt;
&lt;li&gt;可能要扩展到多机分布的用进程，多核分布的用线程&lt;/li&gt;
&lt;li&gt;都满足需求的情况下，用你最熟悉、最拿手的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fork函数pid_t-fork-void&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fork函数pid_t-fork-void&#34;&gt;#&lt;/a&gt; fork 函数（pid_t fork (void);）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调用后执行的功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向系统申请一个新 PID&lt;/li&gt;
&lt;li&gt;创建子进程，复制父进程的 PCB，获得父进程的数据空间、堆、栈等资源的副本&lt;/li&gt;
&lt;li&gt;在父进程中返回子进程的 PID，在子进程中返回 0&lt;/li&gt;
&lt;li&gt;执行完以上动作后，父进程和子进程便开始并发执行了。&lt;/li&gt;
&lt;li&gt;fork () 返回值&lt;/li&gt;
&lt;li&gt;父进程中的 fork () 结束后返回子进程的 pid&lt;/li&gt;
&lt;li&gt;子进程中的 fork () 结束后返回 0&lt;/li&gt;
&lt;li&gt;错误返回负值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写时拷贝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果每一次 fork () 都要拷贝很浪费内存，linux 中就在 fork () 后让父子进程共享内存，当进行写操作时再进行拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fork 和 vfork 的区别：&lt;/p&gt;
&lt;p&gt;\1. fork () 的子进程拷贝父进程的数据段和代码段；vfork () 的子进程与父进程共享数据段&lt;/p&gt;
&lt;p&gt;\2. fork () 的父子进程的执行次序不确定；vfork () 保证子进程先运行，在调用 exec 或 exit 之前与父进程数据是共享的，在它调用 exec 或 exit 之后父进程才可能被调度运行。&lt;/p&gt;
&lt;p&gt;\3. vfork ( ) 保证子进程先运行，在它调用 exec 或 exit 之后父进程才可能被调度运行。如果在调用这两个函数之前子进程依赖于父进程的进一步动作，则会导致死锁。&lt;/p&gt;
&lt;p&gt;4. 当需要改变共享数据段中变量的值，则拷贝父进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fork 实例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token class-name&#34;&gt;pid_t&lt;/span&gt; pid&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;SIGCHLD&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; SIG_IGN&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;before fork pid:%d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getpid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; abc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	pid &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pid&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;tile&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pid&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        abc&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;child:%d,parent: %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getpid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getppid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abc:%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; abc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pid&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        abc&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;parent:pid:%d \n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getpid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abc:%d \n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; abc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;fork after...\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;123456789101112131415161718192021222324&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h3&gt;
&lt;h2 id=&#34;线程池原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池原理&#34;&gt;#&lt;/a&gt; 线程池原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多线程技术主要解决处理器单元内多个线程执行的问题，它可以显著减少处理器单元的闲置时间，增加处理器单元的吞吐能力，假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。&lt;/li&gt;
&lt;li&gt;如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。&lt;/li&gt;
&lt;li&gt;一个线程池包括以下四个基本组成部分：&lt;br /&gt;
1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；&lt;br /&gt;
2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；&lt;br /&gt;
3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；&lt;br /&gt;
4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。&lt;/li&gt;
&lt;li&gt;线程池技术正是关注如何缩短或调整 T1,T3 时间的技术，从而提高服务器程序性能的。它把 T1，T3 分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有 T1，T3 的开销了。&lt;br /&gt;
线程池不仅调整 T1,T3 产生的时间段，而且它还显著减少了创建线程的数目，看一个例子：&lt;br /&gt;
假设一个服务器一天要处理 50000 个请求，并且每个请求需要一个单独的线程完成。在线程池中，线程数一般是固定的，所以产生线程总数不会超过线程池中线程的数目，而如果服务器不利用线程池来处理这些请求则线程总数为 50000。一般线程池大小是远小于 50000。所以利用线程池的服务器程序不会为了创建 50000 而在处理请求时浪费时间，从而提高效率。&lt;/li&gt;
&lt;li&gt;怎么实现线程池
&lt;ul&gt;
&lt;li&gt;1. 设置一个生产者消费者队列，作为临界资源&lt;/li&gt;
&lt;li&gt;2. 初始化 n 个线程，并让其运行起来，加锁去队列取任务运行&lt;/li&gt;
&lt;li&gt;3. 当任务队列为空的时候，所有线程阻塞&lt;/li&gt;
&lt;li&gt;4. 当生产者队列来了一个任务后，先对队列加锁，把任务挂在到队列上，然后使用条件变量去通知阻塞中的一个线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;正常进程-僵尸进程和孤儿进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正常进程-僵尸进程和孤儿进程&#34;&gt;#&lt;/a&gt; 正常进程、僵尸进程和孤儿进程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正常进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正常情况下，子进程是通过父进程创建的，子进程再创建新的进程。子进程的结束和父进程的运行是一个异步过程，即父进程永远无法预测子进程到底什么时候结束。 当一个进程完成它的工作终止之后，它的父进程需要调用 wait () 或者 waitpid () 系统调用取得子进程的终止状态。&lt;/p&gt;
&lt;p&gt;unix 提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息， 就可以得到：在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存等。 但是仍然为其保留一定的信息，直到父进程通过 wait /waitpid 来取时才释放。保存信息包括：&lt;/p&gt;
&lt;p&gt;1 进程号 the process ID&lt;/p&gt;
&lt;p&gt;2 退出状态 the termination status of the process&lt;/p&gt;
&lt;p&gt;3 运行时间 the amount of CPU time taken by the process 等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;孤儿进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被 init 进程 (进程号为 1) 所收养，并由 init 进程对它们完成状态收集工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;僵尸进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个进程使用 fork 创建子进程，如果子进程退出，而父进程并没有调用 wait 或 waitpid 获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵尸进程。&lt;/p&gt;
&lt;p&gt;僵尸进程是一个进程必然会经过的过程：这是每个子进程在结束时都要经过的阶段。&lt;/p&gt;
&lt;p&gt;如果子进程在 exit () 之后，父进程没有来得及处理，这时用 ps 命令就能看到子进程的状态是 “Z”。如果父进程能及时 处理，可能用 ps 命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。&lt;/p&gt;
&lt;p&gt;如果父进程在子进程结束之前退出，则子进程将由 init 接管。init 将会以父进程的身份对僵尸状态的子进程进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;危害：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果进程不调用 wait /waitpid 的话， 那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部消灭：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 kill 发送 SIGTERM 或者 SIGKILL 信号消灭产生僵尸进程的进程，它产生的僵死进程就变成了孤儿进程，这些孤儿进程会被 init 进程接管，init 进程会 wait () 这些孤儿进程，释放它们占用的系统进程表中的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内部解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、子进程退出时向父进程发送 SIGCHILD 信号，父进程处理 SIGCHILD 信号。在信号处理函数中调用 wait 进行处理僵尸进程。&lt;/li&gt;
&lt;li&gt;2、fork 两次，原理是将子进程成为孤儿进程，从而其的父进程变为 init 进程，通过 init 进程可以处理僵尸进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁&#34;&gt;#&lt;/a&gt; 死锁&lt;/h2&gt;
&lt;h3 id=&#34;原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原因&#34;&gt;#&lt;/a&gt; 原因&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;系统资源不足&lt;/li&gt;
&lt;li&gt;资源分配不当&lt;/li&gt;
&lt;li&gt;进程运行推进顺序不合适&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;产生条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#产生条件&#34;&gt;#&lt;/a&gt; 产生条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;互斥&lt;/li&gt;
&lt;li&gt;请求和保持&lt;/li&gt;
&lt;li&gt;不剥夺&lt;/li&gt;
&lt;li&gt;环路&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编码时解决死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码时解决死锁&#34;&gt;#&lt;/a&gt; 编码时解决死锁&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;死锁的一般解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只要保证两个互斥量上锁的顺序一致，就不会死锁&lt;/li&gt;
&lt;li&gt;std::lock () 函数模板
&lt;ul&gt;
&lt;li&gt;能力：一次锁住两个或者两个以上的互斥量（至少两个，多个不行，1 个不行）；&lt;/li&gt;
&lt;li&gt;不存在因为锁头的顺序问题导致的死锁风险问题&lt;/li&gt;
&lt;li&gt;原理，std::lock ()：要么两个互斥量都缩住，要么两个互斥量都没锁柱，一旦有一个没锁住就会解锁另一个已经锁住的互斥量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;		std::lock(my_mutex1, my_mutex2);
// 		my_mutex2.lock();
// 		my_mutex1.lock();
123
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;std::lock_guard 的 std::adopt_lock 参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adopt_lock 是一个结构体对象，起标记作用，标记已经此锁已经 lock&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;std::lock(my_mutex1, my_mutex2);
std::lock_guard&amp;lt;std::mutex&amp;gt;sbgurad1(my_mutex1,std::adopt_lock); //用一个大括号包含需要加锁的代码段，提前结束lock_guard的生命周期
std::lock_guard&amp;lt;std::mutex&amp;gt;sbgurad2(my_mutex2,std::adopt_lock); 
123
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理方法&#34;&gt;#&lt;/a&gt; 处理方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;鸵鸟策略&lt;/strong&gt;：当作没有发生死锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为解决死锁的代价很大，因此这种方案可以获得更高的性能；当发生死锁时不会对用户造成很大影响，或者发生死锁的概率很低，可以采用鸵鸟策略；大多数操作系统，包括 &lt;code&gt;unix&lt;/code&gt; ， &lt;code&gt;linux&lt;/code&gt;  和 &lt;code&gt;windows&lt;/code&gt;  处理死锁问题的办法仅仅是忽略他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;死锁检测和死锁恢复&lt;/strong&gt;：不试图阻止死锁，而是检测到死锁发生时，采取措施进行恢复&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每种类型一个资源的死锁检测通过检测有向图是否存在环来实现。&lt;/li&gt;
&lt;li&gt;每种类型多个资源的死锁检测&lt;/li&gt;
&lt;li&gt;死锁恢复：利用抢占恢复，利用回滚恢复，通过杀死进程恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;死锁预防&lt;/strong&gt;：在程序运行之前预防死锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破坏互斥条件&lt;/li&gt;
&lt;li&gt;破坏占有和等待条件：一种方式是规定所有进程在开始执行前请求所需的全部资源&lt;/li&gt;
&lt;li&gt;破坏不可抢占条件&lt;/li&gt;
&lt;li&gt;破坏环路等待：给资源统一编号，进程只能按照编号顺序来请求资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;死锁避免&lt;/strong&gt;：在运行时避免发生死锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全状态&lt;/strong&gt;：是指如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每个进程运行完毕，则称该状态是安全的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog.csdn.net/weixin_42699130/article//assets/post/2020-02-15/safestate.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上图中，图 a 的第二列 Has 表示进程已经拥有的资源数，第三列 Max 表示进程总共需要的资源数，Free 表示还有可以使用的资源数。从图 a 开始，先让 B 拥有所需的有时又资源，运行结束后释放 B，此时 free 变为 5；以同样方式运行 C 和 A，使得所有进程都能成功运行，因此可以&lt;strong&gt;称 A 的状态是安全&lt;/strong&gt;的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;银行家算法&lt;/strong&gt;：判断对请求的满足是否会进入不安全状态，如果是就拒绝请求；否则予以分配&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux的4种锁机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux的4种锁机制&#34;&gt;#&lt;/a&gt; Linux 的 4 种锁机制：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;互斥锁：互斥锁：mutex，用于保证在任何时刻，都只能有一个线程访问该对象。当获取锁操作失败时，线程会进入睡眠，等待锁释放时被唤醒&lt;/li&gt;
&lt;li&gt;读写锁：rwlock，分为读锁和写锁。处于读操作时，可以允许多个线程同时获得读操作。但是同一时刻只能有一个线程可以获得写锁。其它获取写锁失败的线程都会进入睡眠状态，直到写锁释放时被唤醒。 注意：写锁会阻塞其它读写锁。当有一个线程获得写锁在写时，读锁也不能被其它线程获取；写者优先于读者（一旦有写者，则后续读者必须等待，唤醒时优先考虑写者）。适用于读取数据的频率远远大于写数据的频率的场合。&lt;/li&gt;
&lt;li&gt;自旋锁：spinlock，在任何时刻同样只能有一个线程访问对象。但是当获取锁操作失败时，不会进入睡眠，而是会在原地自旋，直到锁被释放。这样节省了线程从睡眠状态到被唤醒期间的消耗，在加锁时间短暂的环境下会极大的提高效率。但如果加锁时间过长，则会非常浪费 CPU 资源。&lt;/li&gt;
&lt;li&gt;RCU：即 read-copy-update，在修改数据时，首先需要读取数据，然后生成一个副本，对副本进行修改。修改完成后，再将老数据 update 成新的数据。使用 RCU 时，读者几乎不需要同步开销，既不需要获得锁，也不使用原子指令，不会导致锁竞争，因此就不用考虑死锁问题了。而对于写者的同步开销较大，它需要复制被修改的数据，还必须使用锁机制同步并行其它写者的修改操作。在有大量读操作，少量写操作的情况下效率非常高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;经典同步问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经典同步问题&#34;&gt;#&lt;/a&gt; 经典同步问题&lt;/h2&gt;
&lt;h3 id=&#34;哲学家进餐问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哲学家进餐问题&#34;&gt;#&lt;/a&gt; 哲学家进餐问题&lt;/h3&gt;
&lt;p&gt;多个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。&lt;/p&gt;
&lt;p&gt;下面是一种错误的解法，如果所有哲学家同时拿起左手边的筷子，那么所有哲学家都在等待其它哲学家吃完并释放自己手中的筷子，导致死锁。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#define N 5
void philosopher(int i) &amp;#123;
    while(TRUE) &amp;#123;
        think();
        take(i);       // 拿起左边的筷子
        take((i+1)%N); // 拿起右边的筷子
        eat();
        put(i);
        put((i+1)%N);
    &amp;#125;
&amp;#125;
1234567891011
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了防止死锁的发生，可以设置两个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须同时拿起左右两根筷子；&lt;/li&gt;
&lt;li&gt;只有在两个邻居都没有进餐的情况下才允许进餐。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#define N 5
#define LEFT (i + N - 1) % N // 左邻居
#define RIGHT (i + 1) % N    // 右邻居
#define THINKING 0
#define HUNGRY   1
#define EATING   2
typedef int semaphore;
int state[N];                // 跟踪每个哲学家的状态
semaphore mutex = 1;         // 临界区的互斥，临界区是 state 数组，对其修改需要互斥
semaphore s[N];              // 每个哲学家一个信号量

void philosopher(int i) &amp;#123;
    while(TRUE) &amp;#123;
        think(i);
        take_two(i);
        eat(i);
        put_two(i);
    &amp;#125;
&amp;#125;

void take_two(int i) &amp;#123;
    down(&amp;amp;mutex);
    state[i] = HUNGRY;
    check(i);
    up(&amp;amp;mutex);
    down(&amp;amp;s[i]); // 只有收到通知之后才可以开始吃，否则会一直等下去
&amp;#125;

void put_two(i) &amp;#123;
    down(&amp;amp;mutex);
    state[i] = THINKING;
    check(LEFT); // 尝试通知左右邻居，自己吃完了，你们可以开始吃了
    check(RIGHT);
    up(&amp;amp;mutex);
&amp;#125;

void eat(int i) &amp;#123;
    down(&amp;amp;mutex);
    state[i] = EATING;
    up(&amp;amp;mutex);
&amp;#125;

// 检查两个邻居是否都没有用餐，如果是的话，就 up(&amp;amp;s[i])，使得 down(&amp;amp;s[i]) 能够得到通知并继续执行
void check(i) &amp;#123;         
    if(state[i] == HUNGRY &amp;amp;&amp;amp; state[LEFT] != EATING &amp;amp;&amp;amp; state[RIGHT] !=EATING) &amp;#123;
        state[i] = EATING;
        up(&amp;amp;s[i]);
    &amp;#125;
&amp;#125;
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;读者-写者问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读者-写者问题&#34;&gt;#&lt;/a&gt; 读者 - 写者问题&lt;/h3&gt;
&lt;p&gt;允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写操作同时发生。&lt;/p&gt;
&lt;p&gt;一个整型变量 count 记录在对数据进行读操作的进程数量，一个互斥量 count_mutex 用于对 count 加锁，一个互斥量 data_mutex 用于对读写的数据加锁。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef int semaphore;
semaphore count_mutex = 1;
semaphore data_mutex = 1;
int count = 0;

void reader() &amp;#123;
    while(TRUE) &amp;#123;
        down(&amp;amp;count_mutex);
        count++;
        if(count == 1) down(&amp;amp;data_mutex); // 第一个读者需要对数据进行加锁，防止写进程访问
        up(&amp;amp;count_mutex);
        read();
        down(&amp;amp;count_mutex);
        count--;
        if(count == 0) up(&amp;amp;data_mutex);
        up(&amp;amp;count_mutex);
    &amp;#125;
&amp;#125;

void writer() &amp;#123;
    while(TRUE) &amp;#123;
        down(&amp;amp;data_mutex);
        write();
        up(&amp;amp;data_mutex);
    &amp;#125;
&amp;#125;
1234567891011121314151617181920212223242526
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;进程线程常见面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程线程常见面试题&#34;&gt;#&lt;/a&gt; 进程线程常见面试题&lt;/h2&gt;
&lt;h3 id=&#34;设计一下如何采用单线程的方式处理高并发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计一下如何采用单线程的方式处理高并发&#34;&gt;#&lt;/a&gt; 设计一下如何采用单线程的方式处理高并发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在单线程模型中，可以采用 I/O 复用来提高单线程处理多个请求的能力，然后再采用事件驱动模型，基于异步回调来处理事件来&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何设计server使得能够接收多个客户端的请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何设计server使得能够接收多个客户端的请求&#34;&gt;#&lt;/a&gt; 如何设计 server，使得能够接收多个客户端的请求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单线程 + io 复用&lt;/li&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死循环来连接时新建线程的方法效率有点低怎么改进&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死循环来连接时新建线程的方法效率有点低怎么改进&#34;&gt;#&lt;/a&gt; 死循环 + 来连接时新建线程的方法效率有点低，怎么改进？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提前创建好一个线程池，用生产者消费者模型，创建一个任务队列，队列作为临界资源，有了新连接，就挂在到任务队列上，队列为空所有线程睡眠。&lt;/li&gt;
&lt;li&gt;改进死循环：使用 select epoll 这样的技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;怎么唤醒被阻塞的socket线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么唤醒被阻塞的socket线程&#34;&gt;#&lt;/a&gt; 怎么唤醒被阻塞的 socket 线程？&lt;/h3&gt;
&lt;p&gt;当 socket 接受到数据，中断程序调用回调函数唤醒线程&lt;/p&gt;
&lt;h3 id=&#34;有了进程为什么还要有线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有了进程为什么还要有线程&#34;&gt;#&lt;/a&gt; 有了进程，为什么还要有线程？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;线程产生的原因：如果没有线程，那么一个进程在同一时间只能干一件事情。如果进程在执行过程中因为缺少资源而被阻塞，即使有些任务不需要当前缺少的资源，整个进程也会被挂起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程的优势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从资源上来讲，线程是一种非常 &amp;quot;节俭&amp;quot; 的多任务操作方式。在 linux 系统下，启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段，这是一种 &amp;quot;昂贵&amp;quot; 的多任务工作方式。而线程可以共享进程的内存空间。&lt;/li&gt;
&lt;li&gt;从切换效率上来讲，运行于一个进程中的多个线程，它们之间使用相同的地址空间，而且线程间彼此切换所需时间也远远小于进程间切换所需要的时间。据统计，一个进程的开销大约是一个线程开销的 30 倍左右。&lt;/li&gt;
&lt;li&gt;从通信机制上来讲，线程间方便的通信机制。对不同进程来说，它们具有独立的数据空间，要进行数据的传递只能通过进程间通信的方式进行，这种方式不仅费时，而且很不方便。线程则不然，由于同一进城下的线程之间贡献数据空间，所以一个线程的数据可以直接为其他线程所用，这不仅快捷，而且方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多线程程序作为一种多任务、并发的工作方式，还有如下优点：&lt;/p&gt;
&lt;p&gt;1、使多 CPU 系统更加有效。操作系统会保证当线程数不大于 CPU 数目时，不同的线程运行于不同的 CPU 上。&lt;/p&gt;
&lt;p&gt;2、改善程序结构。一个既长又复杂的进程可以考虑分为多个线程，成为几个独立或半独立的运行部分，这样的程序才会利于理解和修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单核机器上写多线程程序是否需要考虑加锁为什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单核机器上写多线程程序是否需要考虑加锁为什么&#34;&gt;#&lt;/a&gt; 单核机器上写多线程程序，是否需要考虑加锁，为什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在单核机器上写多线程程序，仍然需要线程锁。因为线程锁通常用来实现线程的同步和通信。在单核机器上的多线程程序，仍然存在线程同步的问题。因为在抢占式操作系统中，通常为每个线程分配一个时间片，当某个线程时间片耗尽时，操作系统会将其挂起，然后运行另一个线程。如果这两个线程共享某些数据，不使用线程锁的前提下，可能会导致共享数据修改引起冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;操作系统内存管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统内存管理&#34;&gt;#&lt;/a&gt; 操作系统内存管理&lt;/h1&gt;
&lt;h2 id=&#34;虚拟内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟内存&#34;&gt;#&lt;/a&gt; 虚拟内存&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存&lt;/li&gt;
&lt;li&gt;为了更好的管理内存，系统将内存抽象成地址空间。&lt;/li&gt;
&lt;li&gt;每个程序拥有自己的地址空间，这个地址空间被分为多个块，每一块为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都在物理内存中。&lt;/li&gt;
&lt;li&gt;当引用到不再物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的命令&lt;/li&gt;
&lt;li&gt;虚拟内存允许内存不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行。16 位地址可以映射 64KB 地址，32 位可以映射 4GB 地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-MKdpIXFh-1602222903766)(C:\Users\free\AppData\Roaming\Typora\typora-user-images\image-20200816131820778.png)]&lt;/p&gt;
&lt;h3 id=&#34;分页系统地址映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分页系统地址映射&#34;&gt;#&lt;/a&gt; 分页系统地址映射&lt;/h3&gt;
&lt;p&gt;内存管理单元（ &lt;code&gt;Memory Management Unit, MMU&lt;/code&gt; ）管理着地址空间和物理内存的转换，其中的页表（ &lt;code&gt;Page table&lt;/code&gt; ）存储着页（程序地址空间）和页框（物理内存空间）的映射表。&lt;/p&gt;
&lt;p&gt;一个虚拟地址分成两个部分，一部分存储页面号，一部分存储偏移量。即（存储页面号 + 页内偏移量）&lt;/p&gt;
&lt;p&gt;下图的页表存放着 16 个页，这 16 个页需要用 4 个比特位来进行索引定位。例如对于虚拟地址（ &lt;code&gt;0010 0000 0000 0100&lt;/code&gt; ），前 4 位是存储页面号 2，读取表项内容为（ &lt;code&gt;110 1&lt;/code&gt; ），页表项最后一位表示是否存在于内存中，1 表示存在，0 表示不存在。后 12 位存储偏移量。这个页对应的页框的地址为 （ &lt;code&gt;110 0000 0000 0100&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-cwfAMftM-1602222903769)(C:\Users\free\AppData\Roaming\Typora\typora-user-images\image-20200816131902810.png)]&lt;/p&gt;
&lt;h3 id=&#34;页面置换算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面置换算法&#34;&gt;#&lt;/a&gt; 页面置换算法&lt;/h3&gt;
&lt;p&gt;在程序运行过程中，如果要访问的页面不在内存中，就发生&lt;strong&gt;缺页中断&lt;/strong&gt;从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。&lt;/p&gt;
&lt;p&gt;页面置换算法和缓存淘汰策略类似，可以将内存看成磁盘的缓存。在缓存系统中，缓存的大小有限，当有新的缓存到达时，需要淘汰一部分已经存在的缓存，这样才有空间存放新的缓存数据。&lt;/p&gt;
&lt;p&gt;页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。&lt;/p&gt;
&lt;h4 id=&#34;最佳optimal-replacement-algorithm-opt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最佳optimal-replacement-algorithm-opt&#34;&gt;#&lt;/a&gt; 最佳（Optimal replacement algorithm, OPT）&lt;/h4&gt;
&lt;p&gt;所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。&lt;/p&gt;
&lt;p&gt;是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。&lt;/p&gt;
&lt;h4 id=&#34;最近最久未使用least-recently-usedlru&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最近最久未使用least-recently-usedlru&#34;&gt;#&lt;/a&gt; 最近最久未使用（Least Recently Used，LRU）&lt;/h4&gt;
&lt;p&gt;虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。&lt;/p&gt;
&lt;p&gt;为了实现 LRU，需要在内存中维护一个所有页面的链表。&lt;strong&gt;当一个页面被访问时，将这个页面移到链表表头&lt;/strong&gt;。这样就能保证链表表尾的页面是最近最久未访问的。&lt;/p&gt;
&lt;p&gt;因为每次&lt;strong&gt;访问都需要更新链表&lt;/strong&gt;，因此这种方式实现的 LRU 代价很高。&lt;/p&gt;
&lt;h4 id=&#34;最近未使用not-recently-usednru&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最近未使用not-recently-usednru&#34;&gt;#&lt;/a&gt; 最近未使用（Not Recently Used，NRU）&lt;/h4&gt;
&lt;p&gt;每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1。其中 R 位会定时被清零。可以将页面分成以下四类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R=0，M=0&lt;/li&gt;
&lt;li&gt;R=0，M=1&lt;/li&gt;
&lt;li&gt;R=1，M=0&lt;/li&gt;
&lt;li&gt;R=1，M=1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。&lt;/p&gt;
&lt;p&gt;NRU 优先换出已经被修改的&lt;strong&gt;脏页面（R=0，M=1）&lt;/strong&gt;，而不是被频繁使用的&lt;strong&gt;干净页面（R=1，M=0）&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;先入先出first-in-first-out-fifo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先入先出first-in-first-out-fifo&#34;&gt;#&lt;/a&gt; 先入先出（First In First Out, FIFO）&lt;/h4&gt;
&lt;p&gt;选择换出的页面是最先进入的页面。&lt;/p&gt;
&lt;p&gt;该算法会将那些经常被访问的页面换出，导致缺页率升高。&lt;/p&gt;
&lt;h4 id=&#34;第二次机会算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二次机会算法&#34;&gt;#&lt;/a&gt; 第二次机会算法&lt;/h4&gt;
&lt;p&gt;FIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当页面被访问 (读或写) 时设置该页面的 R 位为 1。&lt;/li&gt;
&lt;li&gt;需要替换的时候，检查最老页面的 R 位。&lt;/li&gt;
&lt;li&gt;如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；&lt;/li&gt;
&lt;li&gt;如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时钟clock&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时钟clock&#34;&gt;#&lt;/a&gt; 时钟（Clock）&lt;/h4&gt;
&lt;p&gt;第二次机会算法需要在链表中移动页面，降低了效率。时钟算法使用环形链表将页面连接起来，再使用一个指针指向最老的页面。&lt;/p&gt;
&lt;h2 id=&#34;分段和分页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分段和分页&#34;&gt;#&lt;/a&gt; 分段和分页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分段通俗解释：linux 中就把一个程序分成代码段，数据段和堆栈段等。&lt;/li&gt;
&lt;li&gt;分页通俗解释：将这些段，例如代码段分成均匀的小块，然后这些给这些小块编号，然后就可以放到内存中去，由于编号了的，所以也不怕顺序乱&lt;/li&gt;
&lt;li&gt;然后我们就可以通过段号，页号和页内偏移找到程序的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟内存采用的是分页技术，也就是将地址空间划分成固定大小的页，每一页再与内存进行映射。&lt;/p&gt;
&lt;p&gt;下图为一个编译器在编译过程中建立的多个表，有 4 个表是动态增长的，如果使用分页系统的一维地址空间，动态增长的特点会导致覆盖问题的出现。&lt;/p&gt;
&lt;p&gt;分段的做法是把每个表分成段，&lt;strong&gt;一个段构成一个独立的地址空间&lt;/strong&gt;。每个段的长度可以不同，并且可以动态增长。&lt;/p&gt;
&lt;h2 id=&#34;段页式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段页式&#34;&gt;#&lt;/a&gt; 段页式&lt;/h2&gt;
&lt;p&gt;程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。&lt;/p&gt;
&lt;h3 id=&#34;分页和分段的比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分页和分段的比较&#34;&gt;#&lt;/a&gt; 分页和分段的比较&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对程序员：分页透明，分段需要程序员显式划分每个段&lt;/li&gt;
&lt;li&gt;地址空间维度：分页地址是一维的，分段地址是二维（段名 + 段内地址）的&lt;/li&gt;
&lt;li&gt;大小是否可以改变：分页不可变，分段可变&lt;/li&gt;
&lt;li&gt;出现的原因：分页主要用于虚拟内存，从而获得更大的地址空间；分段是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;操作系统linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统linux&#34;&gt;#&lt;/a&gt; 操作系统 linux&lt;/h1&gt;
&lt;h2 id=&#34;linux文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux文件系统&#34;&gt;#&lt;/a&gt; Linux 文件系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;superblock&lt;/code&gt; ：记录文件系统的整体信息，包括 inode 和 block 的总量，使用量和剩余量，以及文件系统的格式及相关信息等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block bitmap&lt;/code&gt; ：记录 block 是否被使用的位图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inode&lt;/code&gt; ：一个文件占用一个 inode，记录文件的属性，同时记录此文件的内容所在的 block 编号；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt; ：记录文件的内容，文件太大时，会占用多个 block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-QwXtsh0d-1602222903774)(C:/Users/free/Desktop/ 面试 /interviewmd/assets/post/2018-04-02/BSD_disk.png)]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件系统如何找到文件？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据文件名，通过 Dictionary 的对应关系，找到文件对用的 inode number&lt;/li&gt;
&lt;li&gt;再根据 inode number 读取到文件的 inode table&lt;/li&gt;
&lt;li&gt;根据 inode table 中的 pointer 读取到相应的 blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux文件是怎么存储的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux文件是怎么存储的&#34;&gt;#&lt;/a&gt; Linux 文件是怎么存储的&lt;/h2&gt;
&lt;p&gt;一个文件由目录项，inode 和数据块组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录项：包括文件名和 inode 节点号&lt;/li&gt;
&lt;li&gt;inode：又称为文件索引节点，包含文件的基础信息以及数据块的指针&lt;/li&gt;
&lt;li&gt;数据块：包含文件的具体内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;硬盘的最小存储单元为” 扇区 sector“，每个扇区存储 512 字节（0.5KB），操作系统读取硬盘时，一次性连续读取多个扇区，即一个” 块 block“。每个块最常见的大小为 4K，即 8 个扇区&lt;/p&gt;
&lt;p&gt;inode 存储文件的元信息，以及文件数据 block 的位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个文件可以被存储在一个或者多个 block 中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个文件都会并且只会占用一个 inode，inode 可以指向该文件所在的 block&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;想读取该文件，需要通过&lt;/p&gt;
&lt;p&gt;目录项&lt;/p&gt;
&lt;p&gt;的文件名来指向正确的 inode 号码才能读取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;** 目录项：** 当新建一个目录时，文件系统会分配一个 inode 和至少一个 block 给该目录。其中 inode 记录目录的相关权限和属性，并记录分配到的那块 block 目录。而 block 则是记录在这个目录下的文件名和其对应的 inode 号码数据，这就是数据项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件处理命令待学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件处理命令待学习&#34;&gt;#&lt;/a&gt; 文件处理命令（待学习）&lt;/h2&gt;
&lt;h3 id=&#34;grep&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#grep&#34;&gt;#&lt;/a&gt; grep&lt;/h3&gt;
&lt;p&gt;文本过滤器，可以使用正则表达式搜索文本，并把匹配的行打印出来。&lt;/p&gt;
&lt;h3 id=&#34;sed&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sed&#34;&gt;#&lt;/a&gt; sed&lt;/h3&gt;
&lt;p&gt;流编辑器，默认只处理模式空间，不处理原数据。处理时，把当前处理的行存储在临时缓冲区，称为 “模式空间”（pattern space），接着用 sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送到屏幕，接着处理下一行，直到文件末尾。文件内容并没有改变，除非使用重定向存储输出。&lt;/p&gt;
&lt;h3 id=&#34;awk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#awk&#34;&gt;#&lt;/a&gt; awk&lt;/h3&gt;
&lt;p&gt;文本分析工具，相对于 grep 的查找，sed 的编辑，awk 在数据分析和生成数据显得尤为强大。awk 把文件逐行读入，以空格为默认分隔符将每行切片，切开的部分进行分析处理。&lt;/p&gt;
&lt;h2 id=&#34;文件的三种时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的三种时间&#34;&gt;#&lt;/a&gt; 文件的三种时间&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mtime(Modification)&lt;/code&gt; ：更改文件内容时会更新这个时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atime(Access)&lt;/code&gt; ：读取文件，比如使用 less，more 读取时会更新这个时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctime(Change)&lt;/code&gt; ：在修改权限，写入文件、更改所有者、权限或者链接设置时随着 inode 的内容更改而更改，即文件状态最后一次被更改的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shell脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shell脚本&#34;&gt;#&lt;/a&gt; shell 脚本&lt;/h2&gt;
&lt;p&gt;待学习&lt;/p&gt;
&lt;h2 id=&#34;硬链接和软连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬链接和软连接&#34;&gt;#&lt;/a&gt; 硬链接和软连接&lt;/h2&gt;
&lt;h3 id=&#34;硬链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬链接&#34;&gt;#&lt;/a&gt; 硬链接&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ln [sourceFile] [linkName]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A 是 B 的硬链接，则 A 的目录项中的 inode 节点号于 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，A 和 B 对于系统来说是完全平等的。&lt;/p&gt;
&lt;p&gt;如果删除了其中一个，对另一个没有影响。每增加一个硬链接的文件名，inode 节点上的链接数增加 1，每删除一个就减 1，直到为 0，inode 节点和对应的 block 被回收。&lt;/p&gt;
&lt;p&gt;** 注意：** 文件和文件名是两个不同的东西， &lt;code&gt;rm A&lt;/code&gt;  删除的只是 A 这个文件名，但是其对应的数据块（文件）并没有被删除，文件只有在 inode 节点链接数减少为 0 时才会被删除。&lt;/p&gt;
&lt;h3 id=&#34;软连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软连接&#34;&gt;#&lt;/a&gt; 软连接&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ln -s [sourceFile] [linkName]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A 是 B 的软连接，A 的目录项中的 inode 节点号和 B 的目录项中的 inode 节点号不同，A 和 B 指向不同的 inode，继而指向不同的数据库。但是 A 的数据块中存储的是 B 的路径名（可以根据这个路径名找到 B 的目录项）。A 和 B 之间是 “主从” 关系，如果 B 被删除了，A 依然存在，但指向的是一个无效链接。&lt;/p&gt;
&lt;h3 id=&#34;区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区别&#34;&gt;#&lt;/a&gt; 区别&lt;/h3&gt;
&lt;h4 id=&#34;硬链接-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬链接-2&#34;&gt;#&lt;/a&gt; 硬链接&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不能对目录创建硬链接，原因有几种，最重要的是：文件系统不能存在链接环（目录创建时的 &amp;quot;…&amp;quot; 除外，这个系统可以识别出来）, 存在环的后果会导致例如文件遍历等操作的混乱 (du，pwd 等命令的运作原理就是基于文件硬链接，顺便一提，ls -l 结果的第二列也是文件的硬链接数，即 inode 节点的链接数)&lt;/li&gt;
&lt;li&gt;不能对不同的文件系统创建硬链接，即两个文件名要在相同的文件系统下。&lt;/li&gt;
&lt;li&gt;不能对不存在的文件创建硬链接，由原理即可知原因。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;软连接-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软连接-2&#34;&gt;#&lt;/a&gt; 软连接&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以对目录创建软连接，遍历操作会忽略目录的软连接。&lt;/li&gt;
&lt;li&gt;可以跨文件系统&lt;/li&gt;
&lt;li&gt;可以对不存在的文件创建软连接，因为保存的只是一个字符串&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面试" />
        <updated>2021-12-26T05:59:55.365Z</updated>
    </entry>
    <entry>
        <id>http://zhanglin233.github.io/2021/12/25/computer-science/interview/%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</id>
        <title>后端面试常问问题</title>
        <link rel="alternate" href="http://zhanglin233.github.io/2021/12/25/computer-science/interview/%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h1 id=&#34;java&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; java&lt;/h1&gt;
&lt;h2 id=&#34;int和integer的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#int和integer的区别&#34;&gt;#&lt;/a&gt; int 和 Integer 的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Integer 是 int 的包装类，int 则是 java 的一种基本数据类型&lt;/li&gt;
&lt;li&gt;Integer 变量必须实例化后才能使用，而 int 变量不需要&lt;/li&gt;
&lt;li&gt;Integer 实际是对象的引用，当 new 一个 Integer 时，实际上是生成一个指针指向此对象；而 int 则是直接存储数据值&lt;/li&gt;
&lt;li&gt;Integer 的默认值是 null，int 的默认值是 0&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;string-是最基本的数据类型吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-是最基本的数据类型吗&#34;&gt;#&lt;/a&gt; String 是最基本的数据类型吗？&lt;/h2&gt;
&lt;p&gt;不是，他是引用类型。基本数据类型只有 8 个，char、byte、short、int、long、float、double 和 boolean。&lt;/p&gt;
&lt;p&gt;【整型】byte、short、int 和 long，分别是 1、2、4 和 8 字节。&lt;/p&gt;
&lt;p&gt;【浮点型】float 和 double，分别是 4 和 8 字节。&lt;/p&gt;
&lt;p&gt;【字符型】char，2 字节。&lt;/p&gt;
&lt;p&gt;【布尔型】boolean，只有 true 和 false。&lt;/p&gt;
&lt;h2 id=&#34;请问jdk和jre的区别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请问jdk和jre的区别是什么&#34;&gt;#&lt;/a&gt; &lt;strong&gt;请问 JDK 和 JRE 的区别是什么？&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;Java 运行时环境 (JRE) 是将要执行 Java 程序的 Java 虚拟机。它同时也包含了执行 applet 需要的浏览器插件。Java 开发工具包 (JDK) 是完整的 Java 软件开发包，包含了 JRE，编译器和其他的工具 (比如：JavaDoc，Java 调试器)，可以让开发者开发、编译、执行 Java 应用程序。&lt;/p&gt;
&lt;h2 id=&#34;多线程中的i线程安全吗请简述一下原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程中的i线程安全吗请简述一下原因&#34;&gt;#&lt;/a&gt; &lt;strong&gt;多线程中的 i++ 线程安全吗？请简述一下原因？&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;不安全。i&lt;ins&gt; 不是原子性操作。i&lt;/ins&gt; 分为读取 i 值，对 i 值加一，再赋值给 i++，执行期中任何一步都是有可能被其他线程抢占的。&lt;/p&gt;
&lt;h2 id=&#34;深拷贝和浅拷贝是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#深拷贝和浅拷贝是什么&#34;&gt;#&lt;/a&gt; 深拷贝和浅拷贝是什么？&lt;/h2&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;简单来讲就是复制、克隆。&lt;/p&gt;
&lt;p&gt;Person p=new Person (“张三 &amp;quot;);&lt;/p&gt;
&lt;p&gt;浅拷贝就是对对象中的数据成员进行简单赋值，如果存在动态成员或者指针就会报错。而且，如果有引用类型的变量，新生成的对象和被拷贝的对象的这个属性会指向同一个地方，没有解耦，会影响对方，2 个对象会拥有一样的值（穿一条裤子）。对基本数据类型来说，两边是独立的。&lt;/p&gt;
&lt;p&gt;深拷贝就是对对象中存在的动态成员或指针重新开辟内存空间。而且，如果有引用类型的变量，新生成的对象和被拷贝的对象的这个属性会指向 2 个地方，解耦了，不会影响对方，2 个对象分别做修改的话，不会影响到对方。&lt;/p&gt;
&lt;h2 id=&#34;面向对象的特征有哪些方面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象的特征有哪些方面&#34;&gt;#&lt;/a&gt; 面向对象的特征有哪些方面？&lt;/h2&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;面向对象的特征主要有以下几个方面：&lt;/p&gt;
&lt;p&gt;1) 抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。&lt;/p&gt;
&lt;p&gt;2) 继承：继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原&lt;/p&gt;
&lt;p&gt;始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。&lt;/p&gt;
&lt;p&gt;3) 封装：封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。&lt;/p&gt;
&lt;p&gt;4) 多态性：多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。&lt;/p&gt;
&lt;h2 id=&#34;简述mybatis的xml映射文件和mybatis内部数据结构之间的映射关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述mybatis的xml映射文件和mybatis内部数据结构之间的映射关系&#34;&gt;#&lt;/a&gt; &lt;strong&gt;简述 Mybatis 的 Xml 映射文件和 Mybatis 内部数据结构之间的映射关系？&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;Mybatis 将所有 Xml 配置信息都封装到 All-In-One 重量级对象 Configuration 内部。在 Xml 映射文件中， &lt;code&gt;&amp;lt;parameterMap&amp;gt;&lt;/code&gt;  标签会被解析为 &lt;code&gt;ParameterMap&lt;/code&gt;  对象，其每个子元素会被解析为 &lt;code&gt;ParameterMapping&lt;/code&gt;  对象。 &lt;code&gt;&amp;lt;resultMap&amp;gt;&lt;/code&gt;  标签会被解析为 &lt;code&gt;ResultMap&lt;/code&gt;  对象，其每个子元素会被解析为 &lt;code&gt;ResultMapping&lt;/code&gt;  对象。每一个 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;insert&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;update&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;delete&amp;gt;&lt;/code&gt;  标签均会被解析为 MappedStatement 对象，标签内的 sql 会被解析为 BoundSql 对象。&lt;/p&gt;
&lt;h1 id=&#34;计网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计网&#34;&gt;#&lt;/a&gt; 计网&lt;/h1&gt;
&lt;h2 id=&#34;计算机网络常见的计网面试题整理一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机网络常见的计网面试题整理一&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FqeXdzL2FydGljbGUvZGV0YWlscy8xMjI4OTU4Nzc=&#34;&gt;计算机网络：常见的计网面试题整理（一）&lt;/span&gt;&lt;/h2&gt;
&lt;h2 id=&#34;tcpudp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpudp&#34;&gt;#&lt;/a&gt; tcp/udp&lt;/h2&gt;
&lt;p&gt;tcp/ip 7 层网络协议&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20220914134244.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-tcpudp-协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-tcpudp-协议&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1. tcp/udp 协议&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;tcp/udp 是传输层协议。是十分常用的网络协议.TCP 面向连接 （三次握手），UDP 是无连接的，即发送数据之前不需要建立连接。&lt;/p&gt;
&lt;p&gt;TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP 尽最大努力交付，即不保证可靠交付&lt;/p&gt;
&lt;p&gt;TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流；UDP 是面向报文的&lt;/p&gt;
&lt;p&gt;UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 IP 电话，实时视频会议等）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1 tcp 三次握手、四次挥手&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;三次握手建立连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三次握手建立连接&#34;&gt;#&lt;/a&gt; &lt;strong&gt;三次握手建立连接&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200411140619805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMDcxMDY4,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;第一次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一次握手&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第一次握手 :&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;client :&lt;/strong&gt; 客户端向服务端发送连接请求 SYN 包 (发送连接请求)(SYN=1, 同时选择一个初始序号 seq=x) 后，客户端进入 SYN-SENT 状态，等待服务器确认回复.&lt;/p&gt;
&lt;p&gt;**server 😗* 当服务端还没有接收到客户端的连接请求时，服务端处于 LISTEN 状态.&lt;/p&gt;
&lt;h5 id=&#34;第二次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二次握手&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第二次握手 :&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;server :&lt;/strong&gt; 当服务端收到客户端的连接请求时 (收到 syn 包), 为新的连接请求创建新的通信 socket, 此时服务端必须确认客户端的 SYN 请求 (回复确认序号 ack = x + 1), 确认序号有效 ACK=1, 因为连接是双向的，所以服务端也向客户端发送连接请求 SYN 包 (SYN = 1, 为自己选择一个初始序号 seq = y), 即服务端向客户端发送 ACK+SYN 包，服务端进入 SYN_RCVD 状态。当第二次握手完成，还没进行第三次握手时，此时 TCP 连接的状态称之为半连接状态.&lt;/p&gt;
&lt;h5 id=&#34;第三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三次握手&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第三次握手 :&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​    &lt;strong&gt;client :&lt;/strong&gt; 当客户端收到服务端回复的 SYN+ACK 包时，确认建立连接 (客户端这边已经没什么问题了，可以通信了), 并回复给服务端确认信息 ACK 包 (seq = x + 1, ack = y+1), 客户端的进入 ESTABLISHED 状态，完成连接&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;server :&lt;/strong&gt; 当服务端收到客户端发送的 ACK 包后，确认客户端连接就绪，可以开始通行，进入 ESTABLISHED 状态&lt;/p&gt;
&lt;h4 id=&#34;四次挥手断开连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四次挥手断开连接&#34;&gt;#&lt;/a&gt; &lt;strong&gt;四次挥手断开连接&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200412110254633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMDcxMDY4,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34; /&gt; 图片来源于网络&lt;/p&gt;
&lt;h5 id=&#34;第一次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一次挥手&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第一次挥手 :&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;client :&lt;/strong&gt; 当客户端确定不再需要发送数据时，调用 close (sockfd) /shutdown (sockfd, SHUT_WR) (两者的区别以及用法下面说). 客户端会向服务端发送 FIN 包 (FIN=1, seq = u)(u 就是客户端之前收到的数据的最后一个字节的序号 + 1), 客户端进入 FIN_WAIT1 状态. (注意 : TCP 协议规定，FIN 报文段就算没有数据，也需要消耗一个序号)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;server :&lt;/strong&gt; 当服务端未收到客户端发送的 FIN 包时，一直处于 ESTABLISHED 状态&lt;/p&gt;
&lt;h5 id=&#34;第二次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二次挥手&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第二次挥手 :&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;server :&lt;/strong&gt; 当服务端收到客户端发来的 FIN 包后，知道客户端不会再发送数据了，也就不需要接受，先调用 close (sockfd) /shutdown (sockfd, SHUT_RD), 再确认回复客户端，即 (ACK=1, ack = u+1), 并且带上自己的序列号 seq=v, 此时服务端的进入了 CLOSE_WAIT 状态. TCP 服务端就通知高层的应用进程，客户端不会再向服务端发送数据了，此时 TCP 通信的连接状态就称为半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 CLOSE_WAIT 状态持续的时间.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;client :&lt;/strong&gt; 当客户端收到服务器的确认请求 (ACK 包) 后，此时，客户端就进入 FIN_WAIT2 状态，等待服务器发送 FIN (在这之前还需要接收服务器发送的最后的数据)&lt;/p&gt;
&lt;h5 id=&#34;第三次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三次挥手&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第三次挥手 :&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;server :&lt;/strong&gt; 服务端将最后的数据发送完毕后，再不需要发送数据了，就调用 shutdown (sockfd, SHUT_WR) , 再向客户端发送 FIN 包，由于在半关闭状态，服务器很可能又向客户端发送了一些数据，假定此时的序列号为 seq=w，即 FIN 包 (ACK=1, seq=w, ack=u+1). 此时，服务端就进入了 LAST_ACK (最后确认) 状态，等待客户端的确认.&lt;/p&gt;
&lt;h5 id=&#34;第四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四次挥手&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第四次挥手 :&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;client :&lt;/strong&gt; 当客户端收到服务端的连接释放请求 (FIN 包) 时，必须发出确认，ACK=1，ack=w+1, 而自己的序列号是 seq=u+1, 此时，客户端就进入了 TIME_WAIT 状态。注意：此时 TCP 连接还没有释放，必须经过 2 倍的 MSL (最长报文段寿命) 的时间后，当客户端释放连接后，才进入 CLOSED 状态.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;server :&lt;/strong&gt; 服务端只要收到了客户端发出的确认 (ACK 包), 立即进入 CLOSED 状态。同样，释放 TCB 连接后，就结束了这次的 TCP 连接。可以看到，服务端结束 TCP 连接的时间要比客户端早一些.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意 :&lt;/strong&gt; 需要注意的是，四次挥手可以是由客户端首先发送 FIN 包触发，也可以由服务端首先发送 FIN 包触发.&lt;/p&gt;
&lt;p&gt;tcp 通过三次握手建立连接，通过四次挥手断开连接. UDP 则是面向无连接的，不需要建立连接.&lt;/p&gt;
&lt;h3 id=&#34;12-tcp-流控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-tcp-流控制&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.2 tcp 流控制&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;连续 ARQ 协议使得 TCP 的帧可以在滑动窗口大小范围内连续的流动。通过拥塞窗口、拥塞避免、慢开始等算法控制 TCP 的流.&lt;/p&gt;
&lt;h3 id=&#34;13-持续计时器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-持续计时器&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.3 持续计时器&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当发送方接受到窗口值为 0 的 ACK 报文，需要启动一个计时器等待接收方再次发送窗口大小非 0 的 ACK 报文 (TCP 中，仅仅包含确认信息的报文不需要确认和重传). 若没有计时器，可能在窗口非 0 的 ACK 报文丢失后，俩方都处在等待状态中。当持续计时器结束后，发送方会发送一个特殊的探测报文，促使对方重传一个 ACK 报文.&lt;/p&gt;
&lt;h3 id=&#34;14-停止等待协议-arq-协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-停止等待协议-arq-协议&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.4 停止等待协议、ARQ 协议&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;停止等待协议&lt;/strong&gt;是数据链路层协议。它规定只有收到正确的确认帧后，才能新发送状态变量以及数据帧.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARQ 协议 (Automatic Repeat-reQuest)&lt;/strong&gt; 是数据链路层的纠错协议，它有停止等待 ARQ 协议和连续 ARQ 协议.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;停止等待 ARQ 协议&lt;/strong&gt;：每次发送一个报文，确认后发送下一个报文，发送窗口和接受窗口均是 1，停止等待 ARQ 所需缓冲区小但是效率低.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连续 ARQ 协议&lt;/strong&gt;：即回退 n 帧 GBN 以及选择性重传 ARQ ，是滑动窗口与请求重发技术的结合。它可以连续发送若干信息帧，而不用等前一帧被确认，大大提升了发送效率。但需要发送方设置一个重发表，存放待确认的帧，收到确认帧后从重发表中删除帧，需要更大的存储空间.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;请你说一下为什么tcp可靠哪些方法保证可靠&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请你说一下为什么tcp可靠哪些方法保证可靠&#34;&gt;#&lt;/a&gt; 请你说一下为什么 tcp 可靠，哪些方法保证可靠&lt;/h3&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;[1] 确认和重传机制&lt;/p&gt;
&lt;p&gt;建立连接时三次握手同步双方的 “序列号 + 确认号 + 窗口大小信息”，是确认重传、流控的基础&lt;/p&gt;
&lt;p&gt;传输过程中，如果 Checksum 校验失败、丢包或延时，发送端重传。&lt;/p&gt;
&lt;p&gt;[2] 数据排序&lt;/p&gt;
&lt;p&gt;TCP 有专门的序列号 SN 字段，可提供数据 re-order&lt;/p&gt;
&lt;p&gt;[3] 流量控制&lt;/p&gt;
&lt;p&gt;滑动窗口和计时器的使用。TCP 窗口中会指明双方能够发送接收的最大数据量，发送方通过维持一个发送滑动窗口来确保不会发生由于发送方报文发送太快接收方无法及时处理的问题。&lt;/p&gt;
&lt;p&gt;[4] 拥塞控制&lt;/p&gt;
&lt;p&gt;TCP 的拥塞控制由 4 个核心算法组成：&lt;/p&gt;
&lt;p&gt;“慢启动”（Slow Start）&lt;/p&gt;
&lt;p&gt;“拥塞避免”（Congestion avoidance）&lt;/p&gt;
&lt;p&gt;“快速重传”（Fast Retransmit）&lt;/p&gt;
&lt;p&gt;“快速恢复”（Fast Recovery）&lt;/p&gt;
&lt;h3 id=&#34;15-滑动窗口-慢开始-拥塞避免-快重传-快恢复-可靠性-顺序传输-tcp-bbr-拥塞算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-滑动窗口-慢开始-拥塞避免-快重传-快恢复-可靠性-顺序传输-tcp-bbr-拥塞算法&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.5 滑动窗口、慢开始、拥塞避免、快重传、快恢复、可靠性、顺序传输、TCP BBR 拥塞算法&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic2.zhimg.com/80/v2-7b878e527000b4ed0bd6672638249ecd_720w.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;滑动窗口&lt;/strong&gt;：滑动窗口协议是用来改善吞吐量的一种技术，即容许发送方在接收任何应答之前传送附加的包。接收方告诉发送方在某一时刻能送多少包（称窗口尺寸）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;慢开始&lt;/strong&gt;：将拥塞窗口值设置为 1，发送端每接收到一个 ACK 就将拥塞窗口增加 1 直到达到拥塞门限值 (ssthresh，初始值为 16).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞门限 (ssthresh)&lt;/strong&gt;: 慢开始算法的拥塞窗口最大值.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞窗口 (cwnd)&lt;/strong&gt;: 取决于网络的拥塞程度，且在不断的变化，只要网络没有出现拥塞，发送方就将拥塞窗口调大一些，而只要出现拥塞，则减小一些。发送窗口始终小于拥塞窗口（在接受窗口更小时小于拥塞窗口).&lt;br /&gt;
 接受窗口 (rwnd): 接受方根据自己的接受能力（缓存限制）设置了接受窗口 rwnd, 并将其写入 tcp 首部字段中.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞避免算法&lt;/strong&gt;：让拥塞窗口缓慢增长，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1，而不是加倍。这样拥塞窗口按线性规律缓慢增长.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快重传和快恢复 (Fast Retransmit and Recovery)&lt;/strong&gt;: 可以提高网络的吞吐量。接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快恢复算法&lt;/strong&gt;：与快重传配合使用，当发送方连续收到三个重复确认时，就执行乘法减小算法，把慢开始门限 ssthresh 减半。这是为了预防网络发生拥塞。请注意，接下去就不再执行慢开始算法了。由于发送方现在认为网络很可能没有发生拥塞，不执行慢开始而是把 cwnd 值设置为慢开始门限 ssthresh 减半后的数值，然后开始执行拥塞避免算法，使拥塞窗口慢慢的线性的增大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BBR 拥塞算法&lt;/strong&gt;: Google 的 TCP BBR 算法，优化了 TCP 的吞吐量.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;16-滑动窗口大小怎么确定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-滑动窗口大小怎么确定&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.6 滑动窗口大小怎么确定？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;分为接受窗口和发送窗口。接受窗口的值根据缓存大小确定。接受方将接受窗口大小放在 TCP 报文首部。发送法根据接受窗口和拥塞窗口的大小（最小值）确定发送窗口的大小。而拥塞窗口的大小则受限于网络情况，根据传输过程动态的确定.&lt;/p&gt;
&lt;h3 id=&#34;17-tcp-udp-怎么判断客户端关闭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17-tcp-udp-怎么判断客户端关闭&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.7 tcp、udp 怎么判断客户端关闭？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;根据接受到的数据包长度判断，如果接受到的报文长度是 0，则意味着客户端已经断开了连接.&lt;/p&gt;
&lt;h3 id=&#34;18-tcp-udp-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18-tcp-udp-的区别&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.8 tcp、udp 的区别？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;tcp 是面向连接的、可靠的，而 udp 是无连接、不可靠的.&lt;/p&gt;
&lt;p&gt;tcp 保证数据的正确性、顺序性。而 udp 不保证. TCP 是流模式的，而 UDP 是数据包模式的.&lt;/p&gt;
&lt;h3 id=&#34;19-udp-的实际应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19-udp-的实际应用场景&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.9 udp 的实际应用场景？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;UDP 报文常用于效率要求高，而准确性相对低的场景。如视频直播、聊天等.&lt;/p&gt;
&lt;h3 id=&#34;110-time_wait-是什么状态它有什么作用为什么持续-2-msl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#110-time_wait-是什么状态它有什么作用为什么持续-2-msl&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.10 time_wait 是什么状态？它有什么作用？为什么持续 2 MSL？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;time_wait: tcp 连接后，在四次握手之后，先发 FIN 标志位的一端就会进入 time_wait 状态。它的作用有俩个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保最后一个确认报文能够到达。如果没能到达，服务端会重发 FIN 请求，等待一段时间没有重发，说明服务端已经 CLOSED 了。若有重发，客户端将重发 last ack 报文.&lt;/li&gt;
&lt;li&gt;等待一段时间 ( 2MSL ），确保此次连接过程中所有报文都从网络中消失。使得新的连接不会出现旧的连接请求报文.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;111-请你说一说tcp的三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111-请你说一说tcp的三次握手&#34;&gt;#&lt;/a&gt; 1.11 请你说一说 TCP 的三次握手？&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://uploadfiles.nowcoder.com/images/20190314/311436_1552561665620_E7A5C9C77901F4FC171124336780AA75&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第一次握手：建立连接时，客户端发送 syn 包（syn=j）到服务器，并进入 SYN_SENT 状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。&lt;/p&gt;
&lt;p&gt;第二次握手：服务器收到 syn 包，必须确认客户的 SYN（ack=j+1），同时自己也发送一个 SYN 包（syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；&lt;/p&gt;
&lt;p&gt;第三次握手：客户端收到服务器的 SYN+ACK 包，向服务器发送确认包 ACK (ack=k+1），此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP 连接成功）状态，完成三次握手。&lt;/p&gt;
&lt;h3 id=&#34;请你说一下在浏览器中输入一个网址它的运行过程是怎样的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请你说一下在浏览器中输入一个网址它的运行过程是怎样的&#34;&gt;#&lt;/a&gt; 请你说一下在浏览器中输入一个网址它的运行过程是怎样的？&lt;/h3&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;1、查询 DNS，获取域名对应的 IP。&lt;/p&gt;
&lt;p&gt;​	（1）检查浏览器缓存、检查本地 hosts 文件是否有这个网址的映射，如果有，就调用这个 IP 地址映射，解析完成。&lt;/p&gt;
&lt;p&gt;​	（2）如果没有，则查找本地 DNS 解析器缓存是否有这个网址的映射，如果有，返回映射，解析完成。&lt;/p&gt;
&lt;p&gt;​	（3）如果没有，则查找填写或分配的首选 DNS 服务器，称为本地 DNS 服务器。服务器接收到查询时：&lt;/p&gt;
&lt;p&gt;​	如果要查询的域名包含在本地配置区域资源中，返回解析结果，查询结束，此解析具有权威性。&lt;/p&gt;
&lt;p&gt;​	如果要查询的域名不由本地 DNS 服务器区域解析，但服务器缓存了此网址的映射关系，返回解析结果，查询结束，此解析不具有权威性。&lt;/p&gt;
&lt;p&gt;​	（4）如果本地 DNS 服务器也失效：&lt;/p&gt;
&lt;p&gt;​	如果未采用转发模式（迭代），本地 DNS 就把请求发至 13 台根 DNS，根 DNS 服务器收到请求后，会判断这个域名（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1idnMuY29t&#34;&gt;如.com&lt;/span&gt;）是谁来授权管理，并返回一个负责该顶级域名服务器的 IP，本地 DNS 服务器收到顶级域名服务器 IP 信息后，继续向该顶级域名服务器 IP 发送请求，该服务器如果无法解析，则会找到负责这个域名的下一级 DNS 服务器（如&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JhaWR1LmNvbS8=&#34;&gt; http://baidu.com&lt;/span&gt;）的 IP 给本地 DNS 服务器，循环往复直至查询到映射，将解析结果返回本地 DNS 服务器，再由本地 DNS 服务器返回解析结果，查询完成。&lt;/p&gt;
&lt;p&gt;​	如果采用转发模式（递归），则此 DNS 服务器就会把请求转发至上一级 DNS 服务器，如果上一级 DNS 服务器不能解析，则继续向上请求。最终将解析结果依次返回本地 DNS 服务器，本地 DNS 服务器再返回给客户机，查询完成。&lt;/p&gt;
&lt;p&gt;​	2、得到目标服务器的 IP 地址及端口号（http 80 端口，https 443 端口），会调用系统库函数 socket，请求一个 TCP 流套接字。客户端向服务器发送 HTTP 请求报文：&lt;/p&gt;
&lt;p&gt;​	（1）应用层：客户端发送 HTTP 请求报文。&lt;/p&gt;
&lt;p&gt;​	（2）传输层：（加入源端口、目的端口）建立连接。实际发送数据之前，三次握手客户端和服务器建立起一个 TCP 连接。&lt;/p&gt;
&lt;p&gt;​	（3）网络层：（加入 IP 头）路由寻址。&lt;/p&gt;
&lt;p&gt;​	（4）数据链路层：（加入 frame 头）传输数据。&lt;/p&gt;
&lt;p&gt;​	（5）物理层：物理传输 bit。&lt;/p&gt;
&lt;p&gt;​	3、服务器端经过物理层→数据链路层→网络层→传输层→应用层，解析请求报文，发送 HTTP 响应报文。&lt;/p&gt;
&lt;p&gt;​	4、关闭连接，TCP 四次挥手。&lt;/p&gt;
&lt;p&gt;​	5、客户端解析 HTTP 响应报文，浏览器开始显示 HTML&lt;/p&gt;
&lt;h2 id=&#34;http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http&#34;&gt;#&lt;/a&gt; HTTP&lt;/h2&gt;
&lt;h3 id=&#34;请你说一说http请求报文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请你说一说http请求报文&#34;&gt;#&lt;/a&gt; 请你说一说 http 请求报文&lt;/h3&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;p&gt;http 请求报文：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://uploadfiles.nowcoder.com/images/20190314/311436_1552561821939_7986A5D29E20ECF79B0DB0AB97F16945&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1、请求方法&lt;/p&gt;
&lt;p&gt;GET：请求获取 Request——URL 所标识的资源&lt;/p&gt;
&lt;p&gt;POST：在 Request——URL 所标识的资源后附加资源&lt;/p&gt;
&lt;p&gt;HEAD：请求获取由 Request——URL 所标识的资源的响应消息报头&lt;/p&gt;
&lt;p&gt;PUT：请求服务器存储一个资源，由 Request——URL 作为其标识&lt;/p&gt;
&lt;p&gt;DELETE：请求服务器删除由 Request——URL 所标识的资源&lt;/p&gt;
&lt;p&gt;TRACE：请求服务器回送收到的请求信息（用于测试和诊断）&lt;/p&gt;
&lt;p&gt;CONNECT：保留&lt;/p&gt;
&lt;p&gt;OPTIONS：请求查询服务器性能&lt;/p&gt;
&lt;p&gt;2、URL&lt;/p&gt;
&lt;p&gt;URI 全名为 Uniform Resource Indentifier（统一资源标识），用来唯一的标识一个资源，是一个通用的概念，URI 由两个主要的子集 URL 和 URN 组成。URL 全名为 Uniform Resource Locator（统一资源定位），通过描述资源的位置来标识资源。URN 全名为 Uniform Resource Name（统一资源命名），通过资源的名字来标识资源，与其所处的位置无关，这样即使资源的位置发生变动，其 URN 也不会变化。0.&lt;/p&gt;
&lt;p&gt;3、协议版本&lt;/p&gt;
&lt;p&gt;格式为 HTTP / 主版本号。次版本号，常用为：HTTP/1.1 HTTP/1.0&lt;/p&gt;
&lt;p&gt;4、请求头部&lt;/p&gt;
&lt;p&gt;Host：接受请求的服务器地址，可以是 IP 或者是域名&lt;/p&gt;
&lt;p&gt;User-Agent：发送请求的应用名称&lt;/p&gt;
&lt;p&gt;Connection：指定与连接相关的属性，例如（Keep_Alive，长连接）&lt;/p&gt;
&lt;p&gt;Accept-Charset：通知服务器端可以发送的编码格式&lt;/p&gt;
&lt;p&gt;Accept-Encoding：通知服务器端可以发送的数据压缩格式&lt;/p&gt;
&lt;p&gt;Accept-Language：通知服务器端可以发送的语言&lt;/p&gt;
&lt;h3 id=&#34;说一下-get-和-post-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说一下-get-和-post-的区别&#34;&gt;#&lt;/a&gt; 说一下 GET 和 POST 的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get 方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图片视频等。&lt;/li&gt;
&lt;li&gt;而 POST 方法则是相反操作，它向 URI 指定的资源提交数据，数据就放在报文的 body 里。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GET 在浏览器回退时是无害的，而 POST 会再次提交请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 请求只能进行 url 编码，而 POST 支持多种编码方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 请求在 URL 中传送的参数是有长度限制的，而 POST 么有。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 参数通过 URL 传递，POST 放在 Request body 中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 和 POST 还有一个重大区别，简单的说：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;长的说：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。&lt;/p&gt;
&lt;p&gt;也就是说，GET 只需要汽车跑一趟就把货送到了，而 POST 得跑两趟，第一趟，先去和服务器打个招呼 “嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。&lt;/p&gt;
&lt;p&gt;因为 POST 需要两步，时间上消耗的要多一点，看起来 GET 比 POST 更有效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get-和-post-方法都是安全和幂等的吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get-和-post-方法都是安全和幂等的吗&#34;&gt;#&lt;/a&gt; GET 和 POST 方法都是安全和幂等的吗？&lt;/h4&gt;
&lt;p&gt;先说明下安全和幂等的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。&lt;/li&gt;
&lt;li&gt;所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么很明显 GET 方法就是安全且幂等的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。&lt;/p&gt;
&lt;p&gt;POST 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。&lt;/p&gt;
&lt;h3 id=&#34;http和https的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http和https的区别&#34;&gt;#&lt;/a&gt; Http 和 Https 的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP&lt;/li&gt;
&lt;li&gt;网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。&lt;/li&gt;
&lt;li&gt;HTTP 的端口号是 80，HTTPS 的端口号是 443。&lt;/li&gt;
&lt;li&gt;HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP 由于是明文传输，所以安全上存在以下三个风险：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;窃听风险，比如通信链路上可以获取通信内容&lt;/li&gt;
&lt;li&gt;篡改风险&lt;/li&gt;
&lt;li&gt;冒充风险，比如冒充淘宝网站&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/a7fa82cc355243b8a74f220d085e984c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALSDlnIjlnIjnmoTnp5HnoJTml6XorrA=,size_20,color_FFFFFF,t_70,g_se,x_16&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议。&lt;/p&gt;
&lt;h3 id=&#34;http10-http11-http2-http3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http10-http11-http2-http3&#34;&gt;#&lt;/a&gt; HTTP/1.0 HTTP/1.1、HTTP/2、HTTP/3&lt;/h3&gt;
&lt;h4 id=&#34;http10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http10&#34;&gt;#&lt;/a&gt; HTTP/1.0&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;短连接&lt;/li&gt;
&lt;li&gt;HTTP1.0 中，存在⼀些浪费带宽的现象，例如客户端只是需要某个对象的⼀部分，⽽服务器却将整个对象送过来了&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;http11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http11&#34;&gt;#&lt;/a&gt; HTTP/1.1&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 1.1 起，默认使⽤⻓连接，默认开启 Connection： keep-alive。&lt;/li&gt;
&lt;li&gt;支持 管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。&lt;/li&gt;
&lt;li&gt;HTTP1.1 则在请求头引⼊了 range 头域，它允许只请求资源的某个部分&lt;/li&gt;
&lt;li&gt;Host 是 HTTP 1.1 协议中新增的一个请求头，主要用来实现虚拟主机技术。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;补充：&lt;br /&gt;
虚拟主机（virtual hosting）即共享主机（shared web hosting），可以利用虚拟技术把一台完整的服务器分成若干个主机，因此可以在单一主机上运行多个网站或服务。&lt;/p&gt;
&lt;p&gt;举个栗子，有一台 ip 地址为 61.135.169.125 的服务器，在这台服务器上部署着谷歌、百度、淘宝的网站。为什么我们访问 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==&#34;&gt;https://www.google.com&lt;/span&gt; 时，看到的是 Google 的首页而不是百度或者淘宝的首页？原因就是 Host 请求头决定着访问哪个虚拟主机。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 Body 的部分；&lt;br /&gt;
发送冗长的首部。每次互相发送相同的首部造成的浪费较多；&lt;/li&gt;
&lt;li&gt;服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；&lt;/li&gt;
&lt;li&gt;没有请求优先级控制；&lt;/li&gt;
&lt;li&gt;请求只能从客户端开始，服务器只能被动响应。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;http2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http2&#34;&gt;#&lt;/a&gt; HTTP/2&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;头部压缩&lt;br /&gt;
 HTTP/2 会压缩头（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你消除重复的分。&lt;/li&gt;
&lt;li&gt;二进制格式&lt;br /&gt;
 HTTP/2 不再像 HTTP/1.1 里的纯文本形式的报文，而是全面采用了二进制格式。&lt;br /&gt;
头信息和数据体都是二进制，并且统称为帧（frame）：头信息帧和数据帧。&lt;/li&gt;
&lt;li&gt;数据流&lt;br /&gt;
 HTTP/2 的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。&lt;br /&gt;
每个请求或回应的所有数据包，称为一个数据流（Stream）。&lt;br /&gt;
每个数据流都标记着一个独一无二的编号，其中规定客户端发出的数据流编号为奇数， 服务器发出的数据流编号为偶数&lt;br /&gt;
客户端还可以指定数据流的优先级。优先级高的请求，服务器就先响应该请求。&lt;/li&gt;
&lt;li&gt;多路复用&lt;br /&gt;
 HTTP/2 是可以在一个连接中并发多个请求或回应，而不用按照顺序一一对应。&lt;br /&gt;
移除了 HTTP/1.1 中的串行请求，不需要排队等待，也就不会再出现「队头阻塞」问题，降低了延迟，大幅度提高了连接的利用率。&lt;br /&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/374f4758ba9f4527921b023e6b3b75b5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALSDlnIjlnIjnmoTnp5HnoJTml6XorrA=,size_12,color_FFFFFF,t_70,g_se,x_16&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/li&gt;
&lt;li&gt;服务器推送&lt;br /&gt;
 HTTP/2 还在一定程度上改善了传统的「请求 - 应答」工作模式，服务不再是被动地响应，也可以主动向客户端发送消息。&lt;br /&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/769fa050443d4d67a8121da69534f988.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALSDlnIjlnIjnmoTnp5HnoJTml6XorrA=,size_13,color_FFFFFF,t_70,g_se,x_16&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;http3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http3&#34;&gt;#&lt;/a&gt; HTTP/3&lt;/h4&gt;
&lt;p&gt;HTTP/2 主要的问题在于：多个 HTTP 请求在复用一个 TCP 连接，下层的 TCP 协议是不知道有多少个 HTTP 请求的。&lt;/p&gt;
&lt;p&gt;所以一旦发生了丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的所有的 HTTP 请求都必须等待这个丢了的包被重传回来。&lt;/p&gt;
&lt;p&gt;这都是基于 TCP 传输层的问题，所以 HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！&lt;br /&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/98fd3ea62e094983a18cfa97f0f0ba65.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALSDlnIjlnIjnmoTnp5HnoJTml6XorrA=,size_20,color_FFFFFF,t_70,g_se,x_16&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;br /&gt;
大家都知道 UDP 是不可靠传输的，但基于 UDP 的 QUIC 协议 可以实现类似 TCP 的可靠性传输。&lt;/p&gt;
&lt;h2 id=&#34;请你谈谈cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请你谈谈cookie&#34;&gt;#&lt;/a&gt; 请你谈谈 Cookie&lt;/h2&gt;
&lt;p&gt;cookie 虽然在持久保存客户端数据提供了方便，分担了服务器存储的负担，但还是有很多局限性的。&lt;/p&gt;
&lt;p&gt;第一：每个特定的域名下最多生成 20 个 cookie&lt;/p&gt;
&lt;p&gt;1.IE6 或更低版本最多 20 个 cookie&lt;/p&gt;
&lt;p&gt;2.IE7 和之后的版本最后可以有 50 个 cookie。&lt;/p&gt;
&lt;p&gt;3.Firefox 最多 50 个 cookie&lt;/p&gt;
&lt;p&gt;4.chrome 和 Safari 没有做硬性限制&lt;/p&gt;
&lt;p&gt;IE 和 Opera 会清理近期最少使用的 cookie，Firefox 会随机清理 cookie。&lt;/p&gt;
&lt;p&gt;cookie 的最大大约为 4096 字节，为了兼容性，一般不能超过 4095 字节。&lt;/p&gt;
&lt;p&gt;IE 提供了一种存储可以持久化用户数据，叫做 userData，从 IE5.0 就开始支持。每个数据最多 128K，每个域名下最多 1M。这个持久化数据放在缓存中，如果缓存没有清理，那么会一直存在。&lt;/p&gt;
&lt;p&gt;优点：极高的扩展性和可用性&lt;/p&gt;
&lt;p&gt;1. 通过良好的编程，控制保存在 cookie 中的 session 对象的大小。&lt;/p&gt;
&lt;p&gt;2. 通过加密和安全传输技术（SSL），减少 cookie 被破解的可能性。&lt;/p&gt;
&lt;p&gt;3. 只在 cookie 中存放不敏感数据，即使被盗也不会有重大损失。&lt;/p&gt;
&lt;p&gt;4. 控制 cookie 的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的 cookie。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;1. &lt;code&gt;Cookie&lt;/code&gt;  数量和长度的限制。每个 domain 最多只能有 20 条 cookie，每个 cookie 长度不能超过 4KB，否则会被截掉。&lt;/p&gt;
&lt;p&gt;2. 安全性问题。如果 cookie 被人拦截了，那人就可以取得所有的 session 信息。即使加密也与事无补，因为拦截者并不需要知道 cookie 的意义，他只要原样转发 cookie 就可以达到目的了。&lt;/p&gt;
&lt;p&gt;3. 有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。&lt;/p&gt;
&lt;h1 id=&#34;操作系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统&#34;&gt;#&lt;/a&gt; 操作系统&lt;/h1&gt;
&lt;h2 id=&#34;数据库索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库索引&#34;&gt;#&lt;/a&gt; 数据库索引&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTQzMTMwNTg3MTUwNDM0MzQx&#34;&gt;数据库索引，终于懂了 - 掘金 (juejin.cn)&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库&#34;&gt;#&lt;/a&gt; 数据库&lt;/h1&gt;
</content>
        <category term="面试" />
        <updated>2021-12-25T13:13:46.552Z</updated>
    </entry>
</feed>
