{
    "version": "https://jsonfeed.org/version/1",
    "title": "欢迎来到我的个人博客 • All posts by \"javase\" category",
    "description": "",
    "home_page_url": "http://zhanglin233.github.io",
    "items": [
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaSE/2021-7-8-java%E6%A0%B8%E5%BF%83%E5%8D%B7%E4%B8%80%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaSE/2021-7-8-java%E6%A0%B8%E5%BF%83%E5%8D%B7%E4%B8%80%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/",
            "title": "java核心卷一第四章对象与类",
            "date_published": "2021-11-26T16:40:53.523Z",
            "content_html": "<p>##4.3<br />\n###4.3.1 Employee 类 （后续未说明都以 Employee 类为例）<br />\n文件名必须与 public 类的名字相匹配。在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类。<br />\n###4.3.2<br />\n 关键字 public 意味着任何类的任何方法都可以调用这些方法（共有四种访问级别，将在后续内容介绍）。<br />\n关键字 private 确保只有 Employ 类自身的方法能够访问这些实例字段，而其它类的方法不能够读写这些字段。</p>\n<p>###4.3.4 从构造器开始</p>\n<ul>\n<li>\n<p>构造器与类同名</p>\n</li>\n<li>\n<p>构造器可以有 0 个、1 个、或多个参数</p>\n</li>\n<li>\n<p>构造器没有返回值</p>\n</li>\n<li>\n<p>构造器总是伴随着 new 操作一起调用<br />\n注意事项：请注意，不要在构造器中，定义与实例字段同名的局部变量。例如，下面的构造器将不会设置 salary。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span><span class=\"token comment\">//ERROR</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">double</span> salary <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ERROR</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个构造器声明了局部变量 name 和 salary。这些变量只能在构造器内部访问。这下变量会遮蔽（shadow）<br />\n同名的实例字段。有些程序员偶尔会不假思索地写出这类代码，这种错误很难检查出来，<br />\n必须注意在所有的方法中都不要使用与实例字段同名的变量。</p>\n</li>\n</ul>\n<p>###4.3.5 用 var 声明局部变量<br />\n在 java10 中，如果可以从变量的初始值推导出他们的类型，那么可以用 var 关键字声明局部变量，而无需指定类型。<br />\n例如，可以不这样声明：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Employee</span> harry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Harry hacker\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">,</span><span class=\"token number\">1989</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>只需要以下代码：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> harry <span class=\"token operator\">=</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Harry hacker\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1989</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>倘若无需了解任何Java API就能下从等好右边明显看出类型，在这种情况下我们都将使用var表示法。\n不过我们不会对数字类型使用var,如int,long或者是double,使你不用当心0、0L和0.0之间的区别。\n对Java API有了更多使用经验之后，你可能会希望更多地使用var关键字。\n</code></pre>\n<p>注意 var 关键字只能用于方法中的局部变量。参数和字段的类型必须声明。</p>\n<p>###3.3.6 使用 null 引用<br />\n如果对 null 值使用了一个方法，会产生一个 NullPointerEcception 异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> birthday <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> birthday<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//NullPointerException</span></pre></td></tr></table></figure><pre><code>这是一个很严重的错误，类似于“索引越界”异常。\n如果你的程序没有捕获异常，程序就会终止。\n对此有两种解决方法。“宽容型”方法是把null参数转化为一个适当的null值：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"unknow\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 java9 中，Objects 类对此提供了一个便利方法：</p>\n",
            "tags": [
                "Java JavaSE"
            ]
        }
    ]
}