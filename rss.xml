<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>欢迎来到我的个人博客</title>
        <link>http://zhanglin233.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Fri, 10 Dec 2021 09:24:54 +0800</pubDate>
        <lastBuildDate>Fri, 10 Dec 2021 09:24:54 +0800</lastBuildDate>
        <category>博客</category>
        <category>智能控制</category>
        <category>前端</category>
        <category>Nginx</category>
        <category>Java JavaSE</category>
        <category>Java JavaWEB</category>
        <category>java SpringBoot</category>
        <category>前端 React</category>
        <category>java springboot</category>
        <category>Python 爬虫</category>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/12/10/computer-science/course_1/%E6%99%BA%E8%83%BD%E6%8E%A7%E5%88%B6/</guid>
            <title>智能控制（复习用，来源于zzl）</title>
            <link>http://zhanglin233.github.io/2021/12/10/computer-science/course_1/%E6%99%BA%E8%83%BD%E6%8E%A7%E5%88%B6/</link>
            <category>智能控制</category>
            <pubDate>Fri, 10 Dec 2021 09:24:54 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;《计算机控制技术及工程应用（第三版）- 林敏》&lt;/p&gt;
&lt;p&gt;教师：电子科技大学 吴正华&lt;/p&gt;
&lt;h1 id=&#34;第1章计算机控制概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第1章计算机控制概述&#34;&gt;#&lt;/a&gt; 第 1 章计算机控制概述&lt;/h1&gt;
&lt;h2 id=&#34;考察方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考察方式&#34;&gt;#&lt;/a&gt; 考察方式&lt;/h2&gt;
&lt;p&gt;不会出大题，主要就是选题，结合第 11 12 13 14 章，重点是了解概念。&lt;/p&gt;
&lt;p&gt;要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机控制系统组成&lt;/li&gt;
&lt;li&gt;计算机控制系统分类&lt;/li&gt;
&lt;li&gt;计算机控制系统种类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机控制技术及工程应用是把计算机技术与自动化控制系统融为一体的一门综合性学科。从计算机应用角度出发，自动化控制工程是其最重要的一个应用领域；而从自动化控制工程来看，计算机技术又是一个主要的实现手段。&lt;/p&gt;
&lt;p&gt;用于自动化控制的计算机统称为工业控制计算机，它与用于计算及数据处理的商务计算机是两类不同用途，不同结构的计算机。&lt;/p&gt;
&lt;p&gt;本书立足于工业自动化领域，讨论这种不同于普通计算机的计算机控制系统的结构组成、相关技术及其工程应用。&lt;/p&gt;
&lt;h2 id=&#34;11-控制系统组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-控制系统组成&#34;&gt;#&lt;/a&gt; 1.1 控制系统组成&lt;/h2&gt;
&lt;h3 id=&#34;111-控制系统概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111-控制系统概念&#34;&gt;#&lt;/a&gt; 1.1.1 控制系统概念&lt;/h3&gt;
&lt;p&gt;计算机控制系统是由常规仪表控制系统演变而来，常规仪表组成的自动控制系统根据不同的控制要求，一般分为：&lt;strong&gt;闭环控制和开环控制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122164532499.png&#34; alt=&#34;image-20211122164532499&#34; /&gt;&lt;/p&gt;
&lt;p&gt;闭环控制系统：测量变送器对被控对象进行检测，把被控量（如：温度、压力等物理量）转换为电信号，再反馈到控制器中，控制器将此测量值与设定值进行对比，形成偏差输入，并按照一定的控制规律产生相应的控制信号驱动执行器工作，执行器产生的操纵变量使被控对象的被控量跟踪值趋近于设定值，从而实现自动控制稳定生产的目的。这种信号传递形成了闭合回路，所以称之为按偏差进行控制的闭环反馈控制系统。&lt;/p&gt;
&lt;p&gt;开环控制系统：控制器直接根据设定值驱动执行器去操控对象，信号传递是单方向的，也称程序（顺序）控制系统。显然，开环控制系统不能自动消除被控量与设定值之间的偏差，控制性能也不如闭环控制系统。&lt;/p&gt;
&lt;p&gt;大多数控制系统均采用闭环控制系统，通常意义下的自动控制系统也是闭环控制系统。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122170022252.png&#34; alt=&#34;image-20211122170022252&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将控制器用控制计算机（微型计算机、A/D（模 / 数）转换器接口、D/A（数 / 模）转换器接口）代替。由于计算机采用的是数字信号传递，而一次仪表多采用模拟信号传递，因此需要有 A/D 转换器将模拟量转换为数字量输入；需要有 D/A 转换器将数字量转换为模拟量输出。&lt;/p&gt;
&lt;p&gt;计算机控制系统的监控过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时数据采集：对来自测量变送器的被控量的瞬时值进行采集和输入。&lt;/li&gt;
&lt;li&gt;实时数据处理：对采集到的被控量进行分析、比较和处理，按一定的控制规律运算，进行控制决策。&lt;/li&gt;
&lt;li&gt;实时输出控制：根据控制决策，适时地对执行器发出控制信号，完成监控任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“实时”：信号的输入、运算处理和输出能在一定时间内完成，超过这个时间，就会失去控制时机。&lt;/p&gt;
&lt;p&gt;完整的计算机控制系统是由硬件和软件两大部分组成。&lt;/p&gt;
&lt;h3 id=&#34;112-硬件组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#112-硬件组成&#34;&gt;#&lt;/a&gt; 1.1.2  硬件组成&lt;/h3&gt;
&lt;p&gt;计算机控制系统一般由主机、常规外部设备、过程输入 / 输出（I/O）通道、操作台和通信设备等组成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122184848387.png&#34; alt=&#34;image-20211122184848387&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主机：由 CPU、RAM（随机存储器）、ROM（只读存储器）和系统总线构成的主机是控制系统的指挥部。主机所产生的各种控制是按照人们事先安排好的程序进行的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常规外部设备：实现主机和外界信息交换功能的设备被称为常规外部设备，简称外设。由输入设备、输出设备、外存储器等组成。&lt;/p&gt;
&lt;p&gt;常规外部设备 + 主机组成的计算机基本系统，即通常说的普通计算机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过程输入 / 输出通道：在计算机与生产过程被控对象之间起着信息传递和变换的作用的连接装置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过程输入通道分为数字量输入通道（DI 通道，用于输入开关量信号或数字信号量）和模拟量输入通道（A/D 或 AI 通道，用于将模拟量输入信号转换为数字信号）两种。&lt;/li&gt;
&lt;li&gt;过程输出通道分为数字量输出通道（DO 通道，用于输出开关量信号或数字信号量）和模拟量输出通道（D/A 或 AO 通道，用于将数字信号转换为模拟信号）两种。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作台：操作员和计算机控制系统之间进行联系的纽带，可以完成计算机输入程序、修改数据、显示参数、发出各种操作指令等功能。&lt;/p&gt;
&lt;p&gt;操作员分为系统操作员和生产操作员两种。系统操作员和生产操作员的操作设备一般是分开的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通信设备：连接网络，进行信息交互。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;113-软件组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#113-软件组成&#34;&gt;#&lt;/a&gt; 1.1.3 软件组成&lt;/h3&gt;
&lt;p&gt;软件：完成各种功能的计算机程序的总和，是计算机控制系统神经中枢。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件通常分为：系统软件、应用软件两大类。
&lt;ul&gt;
&lt;li&gt;系统软件：面向计算机硬件系统本身的软件，可以解决普遍性问题。
&lt;ul&gt;
&lt;li&gt;操作系统是系统软件的核心，提供软件开发环境，和运行环境&lt;/li&gt;
&lt;li&gt;语言处理程序：将人们编写的源程序转换成计算机能识别并执行的程序&lt;/li&gt;
&lt;li&gt;数据库管理系统：有效实现数据信息的存储、更新、查询、检索、通信控制等&lt;/li&gt;
&lt;li&gt;实用工具软件：用于对程序进行编辑、装配链接、调试以及对系统程序进行监控等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用软件：面向特定问题的软件，可解决特殊性问题，是在系统软件的支持下运行。
&lt;ul&gt;
&lt;li&gt;过程监视程序&lt;/li&gt;
&lt;li&gt;过程控制计算程序&lt;/li&gt;
&lt;li&gt;公共服务程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前，最流行的设计方法之一，是采用 VB 作为平台和数据库管理、VC 作为面向对象程序、汇编作为 I/O 接口处理的编程方式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122192455720.png&#34; alt=&#34;image-20211122192455720&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;12-控制系统分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-控制系统分类&#34;&gt;#&lt;/a&gt; 1.2 控制系统分类&lt;/h2&gt;
&lt;h4 id=&#34;121-数据采集系统das&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#121-数据采集系统das&#34;&gt;#&lt;/a&gt; 1.2.1 数据采集系统 DAS&lt;/h4&gt;
&lt;p&gt;计算机应用于生产过程控制最早、也是最基本的一种类型。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122193408699.png&#34; alt=&#34;image-20211122193408699&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于指导生产以及建立或改善生产过程的数学模型，是有着重要作用的，它是所有计算机控制系统的基础。&lt;/p&gt;
&lt;h4 id=&#34;122-操作指导控制系统ogc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#122-操作指导控制系统ogc&#34;&gt;#&lt;/a&gt; 1.2.2 操作指导控制系统 OGC&lt;/h4&gt;
&lt;p&gt;基于数据采集系统的一种&lt;strong&gt;开环结构&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122193537341.png&#34; alt=&#34;image-20211122193537341&#34; /&gt;&lt;/p&gt;
&lt;p&gt;计算机根据采集到的数据以及工艺要求进行优化计算，计算出最优操作条件，并不直接输出控制被控对象，而是显示打印出来，操作人员据此去改变各个控制器的设定值或操作执行器，达到操作知道的作用。相当于模拟仪表控制系统的设定值或操作指导的作用。&lt;/p&gt;
&lt;p&gt;OGC 系统优点：结构简单，控制灵活和安全。&lt;/p&gt;
&lt;p&gt;缺点：要由人工操作，速度受到限制，不能同时控制多个回路。常用于计算机控制系统设置的初级阶段，或用于试验新的数学模型、调试新的控制程序等场合。&lt;/p&gt;
&lt;h4 id=&#34;123-直接数字控制系统ddc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#123-直接数字控制系统ddc&#34;&gt;#&lt;/a&gt; 1.2.3 直接数字控制系统 DDC&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122194301200.png&#34; alt=&#34;image-20211122194301200&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DDC 系统用一台计算机即可完成对多个被控对象的数据采集，而且能按一定的控制规律进行实时决策，并通过过程输出通道发出控制信号，实现对生产过程的&lt;strong&gt;闭环控制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;DDC 系统以其可靠性高，功能完善、灵活性大而成为计算机在工业生产过程中最典型的一种应用方式。&lt;/p&gt;
&lt;h4 id=&#34;124-监督计算机控制系统scc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#124-监督计算机控制系统scc&#34;&gt;#&lt;/a&gt; 1.2.4 监督计算机控制系统 SCC&lt;/h4&gt;
&lt;p&gt;SCC 系统是 OGC 系统和常规仪表控制系统或 DDC 系统综合而成的两级系统。&lt;/p&gt;
&lt;p&gt;计算机设定值控制系统 SPC：SCC + 模拟控制器系统&lt;/p&gt;
&lt;p&gt;SCC+DDC 控制系统，作为上位机的 SCC 计算机按照描述生产过程的数学模型，根据原始工艺数据与实时采集的现场变量计算出最佳动态设定值，送给作为下位机的控制器或 DDC 计算机，由下位机控制生产过程。这样系统可以根据生产工况变化，不断地修正设定值，使生产过程始终处于最优工况，属于计算机在线最优控制的一种形式。&lt;/p&gt;
&lt;p&gt;当上位机出故障时，可由下位机独立完成控制。下位机直接参与生产过程控制，要求其实时性好、可靠性高和抗干扰能力强；而上位承担高级控制与管理任务，应配置数据处理能力强，存储容量大的高档计算机。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122195801353.png&#34; alt=&#34;image-20211122195801353&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;125-分散控制系统dcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#125-分散控制系统dcs&#34;&gt;#&lt;/a&gt; 1.2.5 分散控制系统 DCS&lt;/h4&gt;
&lt;p&gt;DCS 以微处理器为基础，借助计算机网络对生产过程进行集中式呵呵分散式控制的先进计算机控制系统，是 &amp;quot;4C&amp;quot; 技术的结晶。&lt;/p&gt;
&lt;p&gt;既不同于分散的仪表控制系统，也不同于集中式的计算机控制系统，而是在吸收了两者的优点基础上发展起来的具有崭新结构体系和独特技术风格的新型自动化系统。&lt;/p&gt;
&lt;h4 id=&#34;126-现场总线控制系统fcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#126-现场总线控制系统fcs&#34;&gt;#&lt;/a&gt; 1.2.6 现场总线控制系统 FCS&lt;/h4&gt;
&lt;p&gt;改进了 DCS 成本高和由于各个厂商的产品通信标准不统一而造成的不能互联等弱点，采用集管理、控制功能于一体的工作站与现场总线智能仪表的二层结构模式，把原 DCS 控制站的功能分散到智能型现场仪表中去。每个现场仪表（如：变送器、执行器）都作为一个智能结点，都带 CPU 单元，可以分别独立完成测量、校正、调节、诊断等功能，靠网络协议把它们连接在一起统筹工作。这种彻底的分散控制模式使系统更加可靠。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122201454839.png&#34; alt=&#34;image-20211122201454839&#34; /&gt;&lt;/p&gt;
&lt;p&gt;FCS 的核心是现场总线，将当今的网络通信与管理概念引入工业控制领域。现场总线本质上是一种数字通信协议，是连接智能现场设备和自动化系统的数字式、双向传输、多分支结构的串行通信网络。FCS 代表了今后工业控制体系结构发展的一种方向。&lt;/p&gt;
&lt;h4 id=&#34;127-计算机集成制造系统cims&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#127-计算机集成制造系统cims&#34;&gt;#&lt;/a&gt; 1.2.7 计算机集成制造系统 CIMS&lt;/h4&gt;
&lt;p&gt;CIMS 采用多任务分层体系结构，现在已经形成多种方案。流程工业 CIMS 的递阶层次结构：（从下至上）控制层、监控层、调度层、管理层、决策层。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122201840232.png&#34; alt=&#34;1&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;13-控制装置的类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-控制装置的类型&#34;&gt;#&lt;/a&gt; 1.3 控制装置的类型&lt;/h2&gt;
&lt;h3 id=&#34;131-可编程控制器plc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#131-可编程控制器plc&#34;&gt;#&lt;/a&gt; 1.3.1 可编程控制器 PLc&lt;/h3&gt;
&lt;p&gt;计算机与继电逻辑控制概念相结合的产物，其低端为常规继电逻辑控制的替代装置，而高端为一种高性能的工业计算机。主要由：CPU、存储器、输入组件、输出组件、电源、编程器等组成。&lt;/p&gt;
&lt;p&gt;PLC 具有系统构成灵活、易扩展、编程简单、调试容易、抗干扰能力强的优点，不仅在顺序程序控制领域中具有优势，而且在运动控制、过程控制、网络通信领域方面也毫不逊色。&lt;/p&gt;
&lt;h3 id=&#34;132-可编程调节器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#132-可编程调节器&#34;&gt;#&lt;/a&gt; 1.3.2 可编程调节器&lt;/h3&gt;
&lt;p&gt;主要由微处理单元，过程 I/O 单元、面板单元、通信单元、硬手操单元等组成，实际是一种仪表化的微型控制计算机。&lt;/p&gt;
&lt;p&gt;可编程调节器不仅可以作为大型分散控制系统中最基本的单元，而且也可以在一些重要场合下单独构成复杂的控制系统，完成 1 个～4 个控制回路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特别适用于连续过程模拟量信号的控制系统中。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;133-总线式工控机ipc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#133-总线式工控机ipc&#34;&gt;#&lt;/a&gt; 1.3.3 总线式工控机 IPC&lt;/h3&gt;
&lt;p&gt;总线式工控机是基于总线技术和模块化结构的一种专用于工业控制的通用型计算机。&lt;/p&gt;
&lt;p&gt;总线式工控机具有小型化、模板化、组合化、标准化的设计特点，能满足不同层次、不同控制对象的需要，又能在恶劣的工业环境中可靠的运行。&lt;strong&gt;因此，广泛用于各种控制场合，尤其是十几个到几十个回路中的中等规模的控制系统中。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;134-嵌入式计算机系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#134-嵌入式计算机系统&#34;&gt;#&lt;/a&gt; 1.3.4 嵌入式计算机系统&lt;/h3&gt;
&lt;p&gt;嵌入式计算机系统，简称嵌入式系统，&lt;strong&gt;以应用为核心&lt;/strong&gt;，以计算机技术为基础，软件、硬件可以裁剪，&lt;strong&gt;适应于应用系统对功能、可靠性、成本、体积、功耗等方面有严格要求的专用计算机&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;三大基本要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嵌入性&lt;/li&gt;
&lt;li&gt;专用性&lt;/li&gt;
&lt;li&gt;计算机系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嵌入式系统可分为系统级、模板级、芯片级。&lt;/p&gt;
&lt;p&gt;以单片机为核心的低级嵌入式系统是嵌入式发展的最初阶段。&lt;/p&gt;
&lt;p&gt;嵌入式系统进入了以因特网为标志的高级发展阶段。&lt;/p&gt;
&lt;h3 id=&#34;135-其他控制装置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#135-其他控制装置&#34;&gt;#&lt;/a&gt; 1.3.5 其他控制装置&lt;/h3&gt;
&lt;p&gt;当前计算机控制技术正在进一步向综合自动化、网络化、智能化、虚拟化、绿色化发展。&lt;/p&gt;
&lt;h3 id=&#34;思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思考题&#34;&gt;#&lt;/a&gt; 思考题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;简述计算机控制系统与常规仪表控制系统的基本结构及主要异同点。&lt;/li&gt;
&lt;li&gt;分析说明图 1-3 计算机控制系统的硬件组成及其作用。&lt;/li&gt;
&lt;li&gt;计算机控制系统的软件由哪些部分构成。&lt;/li&gt;
&lt;li&gt;按控制方案来分，计算机控制系统分为哪几大类。&lt;/li&gt;
&lt;li&gt;计算机控制装置可以分为哪几种类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第2章-模拟量输出通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第2章-模拟量输出通道&#34;&gt;#&lt;/a&gt; 第 2 章 模拟量输出通道&lt;/h1&gt;
&lt;h2 id=&#34;引言部分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言部分&#34;&gt;#&lt;/a&gt; 引言部分&lt;/h2&gt;
&lt;p&gt;模拟量输出通道的任务：把计算机处理后的数字量信号转换成模拟量电压或电流信号，去驱动相应的执行器，从而达到控制的目的。&lt;/p&gt;
&lt;p&gt;模拟量输出通道 (称为 D/A 通道或 AO 通道）构成：一般是由接口电路、数 / 模转换器（简称 D/A 或 AO) 和电压 / 电流变换器等。&lt;/p&gt;
&lt;h3 id=&#34;多da结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多da结构&#34;&gt;#&lt;/a&gt; 多 D/A 结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128152425799.png&#34; alt=&#34;image-20211128152425799&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一路输出通道使用一个 D/A 转换器&lt;/li&gt;
&lt;li&gt;D/A 转换芯片内部一般都带有数据锁存器&lt;/li&gt;
&lt;li&gt;D/A 转换器具有数字信号转换模拟信号、信号保持作用&lt;/li&gt;
&lt;li&gt;优点：结构简单，转换速度快，工作可靠，精度较高、通道独立&lt;/li&gt;
&lt;li&gt;缺点：所需要的 D/A 转换器芯片较多&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;共享da结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享da结构&#34;&gt;#&lt;/a&gt; 共享 D/A 结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128152503570.png&#34; alt=&#34;image-20211128152503570&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多路输出通道共用一个 D/A 转换器&lt;/li&gt;
&lt;li&gt;每一路通道都配有一个采样保持放大器&lt;/li&gt;
&lt;li&gt;D/A 转换器只起数字信号到模拟信号的转换作用&lt;/li&gt;
&lt;li&gt;采样保持器实现模拟信号保持功能&lt;/li&gt;
&lt;li&gt;优点：节省 D/A 转换器&lt;/li&gt;
&lt;li&gt;缺点：电路复杂，精度差，可靠低，占用主机时间（为了使保持信号不至于下降太多需要不断刷新数据而占用主机时间）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：现在，随着集成电路 D/A 转换器芯片价格不断下降，控制系统中的模拟信号输出通道&lt;strong&gt;普遍采用多 D/A 结构形式&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;21-da转换器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-da转换器&#34;&gt;#&lt;/a&gt; 2.1 D/A 转换器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分类：
&lt;ul&gt;
&lt;li&gt;按位数：
&lt;ul&gt;
&lt;li&gt;8 位&lt;/li&gt;
&lt;li&gt;10 位&lt;/li&gt;
&lt;li&gt;12 位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按输出形式：
&lt;ul&gt;
&lt;li&gt;电流输出型&lt;/li&gt;
&lt;li&gt;电压输出型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;满足特殊需求的 D/A 转换器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;211-工作原理与性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#211-工作原理与性能指标&#34;&gt;#&lt;/a&gt; 2.1.1 工作原理与性能指标&lt;/h3&gt;
&lt;h4 id=&#34;1da转换器的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1da转换器的工作原理&#34;&gt;#&lt;/a&gt; 1.D/A 转换器的工作原理&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128154006311.png&#34; alt=&#34;image-20211128154006311&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以 4 位 D/A 转换器为例：&lt;/p&gt;
&lt;p&gt;D/A 转换器主要由基准电压 V&amp;lt;sub&amp;gt;REF&amp;lt;/sub&amp;gt;、R-2R T 型电阻网络、位切换开关 BS&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 和运算放大器 A 四部分构成。&lt;/p&gt;
&lt;p&gt;基准电压 V&amp;lt;sub&amp;gt;REF&amp;lt;/sub &amp;gt; 由外部稳压电源提供，位切换开关 BS&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~BS&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 分别接受要转换的二进制数 D&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 的控制，当某一位 D&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt; = 1，则相应开关 BS&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 切换到 “1” 端（虚地），就会把基准电压 V&amp;lt;sub&amp;gt;REF&amp;lt;/sub &amp;gt; 加在该分支电阻 2R 上的电流 I&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 切换到放大器的反相端，此电流经反馈电阻 R&amp;lt;sub&amp;gt;fb&amp;lt;/sub &amp;gt; 直至输出端，从而把 D&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt; = 1 转换成相应的模拟电压 V&amp;lt;sub&amp;gt;OUT&amp;lt;/sub &amp;gt; 输出；而当 D&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt; = 0 时，BS&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 切换到 “0” 端（地），则电流 I&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 切换到放大器的正相端流入地中而对放大器输出不起作用。&lt;/p&gt;
&lt;p&gt;由于 T 型电阻网络中各个节点向右看地等效电阻均为 2R，因此各 2R 支路上的电流就按 1/2 系数进行分配，即：在各 2R 支路上产生与二进制数各位的权成比例的电流，并经运算放大器 A 相加，从而输出成比例关系的模拟电压 V&amp;lt;sub&amp;gt;OUT&amp;lt;/sub&amp;gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128173634882.png&#34; alt=&#34;image-20211128173634882&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2da转换器性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2da转换器性能指标&#34;&gt;#&lt;/a&gt; 2.D/A 转换器性能指标&lt;/h4&gt;
&lt;p&gt;衡量芯片质量的重要参数，也是选取 D/A 芯片型号的依据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分辨率&lt;/p&gt;
&lt;p&gt;指 D/A 转换器能分辨的最小输出模拟增量，即当输入数字发生单位数码变化时所对应输出模拟量的变化量，它取决于能转换的二进制位数，数字量位数越多，分辨率也就越高。其分辨率与二进制位数 n 呈以下关系：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;分辨率&lt;/mtext&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;分辨力&lt;/mtext&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mtext&gt;电压满量程&lt;/mtext&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;分辨率 = \frac{1}{2^n - 1} \\
分辨力 = \frac{电压满量程}{2^n - 1}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;分&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;辨&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.09077em;vertical-align:-0.7693300000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.32144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.590392em;&#34;&gt;&lt;span style=&#34;top:-2.9890000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7693300000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;分&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;辨&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;力&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.1296600000000003em;vertical-align:-0.7693300000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.590392em;&#34;&gt;&lt;span style=&#34;top:-2.9890000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;电&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;压&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;满&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;量&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7693300000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转换精度&lt;/p&gt;
&lt;p&gt;指转换所得的实际值和理论值的接近程度，它可以用绝对误差和相对误差来表示。&lt;/p&gt;
&lt;p&gt;与分辨率时两个不同的概念。对于分辨率很高的 D/A 转换器，有可能由于温度漂移、线性度差等原因并不具有很高的精度。&lt;/p&gt;
&lt;p&gt;例如：满量程时的理论输出值为 10V，实际输出值为 9.99V~10.01V 之间，其转换精度为 ±10mV。&lt;/p&gt;
&lt;p&gt;对于分辨率很高的 D/A 转换器并不一定具有很高的精度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;偏移量误差&lt;/p&gt;
&lt;p&gt;指输入数字量时，输出模拟量对于零的偏移值。此误差可通过 D/A 转换器外接的 V&amp;lt;sub&amp;gt;REF&amp;lt;/sub &amp;gt; 和电位器加以调整。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;稳定时间&lt;/p&gt;
&lt;p&gt;描述 D/A 转换速度快慢的一个参数，指从输入数字量到输出模拟量达到终值误差 1/2LSB（对应于满量程输出的 1/（2^n - 1）) 所需的时间。&lt;/p&gt;
&lt;p&gt;显然，稳定时间越大，转换速度越低。对于输出是电流的 D/A 转换器来说，稳定时间是很快的，约几微秒，而输出是电压的 D/A 转换器，其稳定时间主要取决于运算放大器的响应时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;212-8位dac0832芯片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#212-8位dac0832芯片&#34;&gt;#&lt;/a&gt; 2.1.2 8 位 DAC0832 芯片&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;性能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 8 位 D/A 转换器&lt;/li&gt;
&lt;li&gt;电流输出方式&lt;/li&gt;
&lt;li&gt;稳定时间为 1us&lt;/li&gt;
&lt;li&gt;采用 20 脚双立直插式封装&lt;/li&gt;
&lt;li&gt;同系列芯片还有 DAC0830、DAC0831&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作原理&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128194548549.png&#34; alt=&#34;image-20211128194548549&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DAC0832 主要由 8 位输入寄存器、8 位 DAC 寄存器、8 位 D/A 转换器以及输入控制电路四部分组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;8 位输入寄存器：用于存放主机送来的数字量，使输入数字量得到缓冲和锁存，由 LE&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线) 加以控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8 位 DAC 寄存器：用于存放待转换的数字量，由 LE&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;(上划线) 加以控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8 位 D/A 转换器：输出与数字量成正比的模拟电流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入控制电路：由与门、非与门组成，控制两个寄存器的选通锁或锁存状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各引脚功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DI&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;~DI&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;：数据输入线，其中 DI&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为最低有效位 LSB，I&amp;lt;sub&amp;gt;7&amp;lt;/sub &amp;gt; 为 最高有效位 MSB。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{CS}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8833300000000001em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;片选信号，输入线，低电平有效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{WR_1}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.03333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;写信号 1，输入线，低电平有效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ILE&lt;/p&gt;
&lt;p&gt;输入允许锁存信号，输入线，高电平有效。&lt;/p&gt;
&lt;p&gt;当 ILE、CS (上划线) 和 WR&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线) 同时有效，8 位输入寄存器端为高电平”1“，此时寄存器的输入端 Q 跟随输入端 D 的电平变化；反之，当端为低电平”0“时，原 D 端输入数据被锁存于 Q 端，在此期间，D 端电平的变化不影响 Q 端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{XFER}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8833300000000001em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;传送控制信号，输入线，低电平有效。&lt;/p&gt;
&lt;p&gt;当 WR&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;(上划线) 和 XFER (上划线) 同时有效时，8 位 DAC 寄存器端为高电平”1“，此时 DAC 寄存器的输入端 Q 跟随输入端 D 也就是输入寄存器 Q 端的电平变化；反之，当端为低电平”0“时，第一级 8 位输入寄存器 Q 的状态则锁存到第二级 8 位 DAC 寄存器中，以便第三级 8 位 DAC 转换器进行 D/A 转换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;lt;sub&amp;gt;OUT1&amp;lt;/sub&amp;gt;&lt;/p&gt;
&lt;p&gt;DAC 电流输入端 1，一般作为运算放大器差动输入信号之一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;lt;sub&amp;gt;OUT2&amp;lt;/sub&amp;gt;&lt;/p&gt;
&lt;p&gt;DAC 电流输入 2，一般作为运算放大器另一个差动输入信号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R&amp;lt;sub&amp;gt;fb&amp;lt;/sub&amp;gt;&lt;/p&gt;
&lt;p&gt;固化在芯片内的反馈电阻连接端，用于连接运算放大器的输入端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V&amp;lt;sub&amp;gt;REF&amp;lt;/sub&amp;gt;&lt;/p&gt;
&lt;p&gt;基准电压源端，输入线，-10VDC ~ + 10 VDC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V&amp;lt;sub&amp;gt;C&amp;lt;/sub&amp;gt;&lt;/p&gt;
&lt;p&gt;工作电压源端，输入线，+ 5VDC ~ +15VDC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AGND 和 DGND：模拟电路地与数字电路地，一般情况下，这两种地最后总有一点接在一起，以便提高抗干扰能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;213-12位dac1210芯片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#213-12位dac1210芯片&#34;&gt;#&lt;/a&gt; 2.1.3  12 位 DAC1210 芯片&lt;/h3&gt;
&lt;p&gt;为了提高分辨率产生&lt;/p&gt;
&lt;p&gt;是一个 12 位 D/A 转换器，电流输出方式，其结构原理与控制信号功能基本类似于 DAC0832。由于它比 DAC0832 多了 4 条数据输入线，故有 24 条引脚。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128205015932.png&#34; alt=&#34;image-20211128205015932&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DAC1210 内部有三个寄存器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个位输入寄存器，用于存放 12 位数字量中的高 8 位 DI&amp;lt;sub&amp;gt;11&amp;lt;/sub&amp;gt;~DI&amp;lt;sub&amp;gt;4&amp;lt;/sub&amp;gt;，一个 4 位输入寄存器，用于存放 12 位数字量中的低 4 位 DI&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~DI&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;&lt;/li&gt;
&lt;li&gt;一个 12 位 DAC 寄存器，存放上述两个输入寄存器送来的 12 位数字量&lt;/li&gt;
&lt;li&gt;12 位 D/A 转换器用于完成 12 位数字量的转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由与门、非与门组成的输入控制电路来控制 3 个寄存器的选通或锁存状态。其中引脚（片选信号、低电平有效）、（写信号、低电平有效）和 BYTE1/BYTE2 (上划线)（字节控制信号）的组合，用来控制 8 位输入寄存器和 4 位输入寄存器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 CS (上划线)、WR&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线) 为低电平”0“，BYTE1/BYTE2 (上划线) 为高电平”1“时，与门的输出 LE&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线)、LE&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;(上划线) 为”1“，选通 8 位和 4 位两个输入寄存器，将要转换的 12 位数据全部送入寄存器&lt;/p&gt;
&lt;p&gt;当 BYTE1/BYTE2 (上划线) 为低电平 &amp;quot;0&amp;quot; 时，LE&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 为 &amp;quot;0&amp;quot;，8 位输入寄存器锁存刚传送的 8 位数据，而 LE&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 仍为”1“，4 位输入寄存器仍为选通，新的低 4 位数据将刷新刚传送的 4 位数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，在与计算机接口电路中，计算机必须先送高 8 位后送低 4 位！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XFER (上划线)（传送控制信号、低电平有效）和 WR&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;(上划线)（写信号、低电平有效）用来控制 12 位 DAC 寄存器，当它们都为低电平”0“时，与门输出 LE&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 为 &amp;quot;1&amp;quot;，12 位数据全部送入 DAC 寄存器；当它们中有一个为高电平”1“时，与门输出 LE&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 即为”0“，则 12 位 DAC 寄存器锁存住数据，使 12 位 D/A 转换器开始数模转换。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-接口电路&#34;&gt;#&lt;/a&gt; 2.2 接口电路&lt;/h2&gt;
&lt;p&gt;为使主机能向 D/A 转换器传输数据，必须在两者之间设置接口电路。&lt;/p&gt;
&lt;p&gt;接口电路功能：进行地址译码、产生片选信号或写信号。&lt;/p&gt;
&lt;h3 id=&#34;221-dac0832接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#221-dac0832接口电路&#34;&gt;#&lt;/a&gt; 2.2.1 DAC0832 接口电路&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128211738733.png&#34; alt=&#34;image-20211128211738733&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于 DAC0832 内部有输入寄存器，所以它的数据总线可直接与主机的数据总线相连，所以它的数据总线可直接与主机的数据总线相连。&lt;/p&gt;
&lt;p&gt;图为 DAC0832 与 PC 总线的单缓冲接口电路，它是由 DAC0832 转换芯片、运算放大器以及 74LS138 译码器和门电路构成的地址译码电路组成。&lt;/p&gt;
&lt;p&gt;图中 DAC0832 内的 DAC 寄存器控制端的 WR&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;(上划线) 和 XFER (上划线) 直接接地，使 DAC 寄存器的输入到输出始终直通；而输入寄存器的控制端分别受地址译码器信号与输入输出指令控制，即 PC 的地址线 A9~A0 经 138 译码器和门电路产生接口地址信号作为 DAC0832 的片选信号，输入输出写信号 IOW (上划线) 作为 DAC0832 的写信号 WR&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线)。&lt;/p&gt;
&lt;p&gt;当需要进行 D/A 转换时，把被转换的数据如 DATA 送进累加器 AL，入口地址如 220H 送入 DX，然后执行一条 OUT 输出指令，则 CS (上划线) 和 WR&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线)（IOW (上划线)）同为低电平，则 LE&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 为”1“，此时主机输出的数据写入 DAC0832 内的 8 位输入寄存器，再直通送入 D/A 转换器进行转换，当 IOW (上划线) 恢复为高电平时，使 D/A 转换的输出也保持不变。&lt;/p&gt;
&lt;p&gt;程序接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MOV DX,220H
MOV AL,[DATA]
OUT DX,AL
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;222-dac1210接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#222-dac1210接口电路&#34;&gt;#&lt;/a&gt; 2.2.2 DAC1210 接口电路&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129154607461.png&#34; alt=&#34;image-20211129154607461&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DAC 内部也有输入寄存器，但用 PC 中 8 位数据总线与 12 位 D/A 转换器组成接口电路时，需要对数据总线采用复用形式。&lt;/p&gt;
&lt;p&gt;上图是 12 位 D/A 转换器 DAC1210 转换芯片、运算放大器以及地址译码电路组成。与 8 位 DAC0832 接口电路不同的是，除了数据总线 D&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 与 DAC 高 8 位 DI&amp;lt;sub&amp;gt;11&amp;lt;/sub&amp;gt;~DI&amp;lt;sub&amp;gt;4&amp;lt;/sub &amp;gt; 直接相连以外，D&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 还要与 DAC1210 低 4 位 DI&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~DI&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 复用，因而控制电路也略为复杂。&lt;/p&gt;
&lt;p&gt;图中，CS (上划线)、WR&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线) 和 BYTE1/BYTE2 (上划线) 组合，用来依次控制 8 位输入寄存器（LE&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线)）和 4 位输入寄存器（LE&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;(上划线)）的选通与锁存；WR&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;(上划线) 和 XFER (上划线) 用来控制 DAC 寄存器（LE&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;(上划线)）的选通与锁存；IOW (上划线) 与 WR&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;~WR&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 连接，用来在执行输出指令时获得低电平 (有效)，译码器的两条输出线 Y&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;(上划线)\、Y&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;(上划线) 分别连接到 CS (上划线)~XFER (上划线)，一条地址线 A&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 连接到 BYTE1/BYTE2 (上划线)，从而形成三个口地址：低 4 位输入寄存器为 380H；高 8 位输入寄存器为 381H;12 位 DAC 寄存器为 384H。&lt;/p&gt;
&lt;p&gt;在软件设计中，为了实现 8 位数据线 D&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;7&amp;lt;/sub &amp;gt; 传送 12 位被转换数，主机须分两次传送被转换数。首先将被转换数的高 8 位传送给 8 位输入寄存器 DI&amp;lt;sub&amp;gt;11&amp;lt;/sub&amp;gt;~DI&amp;lt;sub&amp;gt;4&amp;lt;/sub&amp;gt;，再将低 4 位传给 4 位输入寄存器 DI&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~DI&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;，然后再打开 DAC 寄存器，把 12 位数据送到 12 位 D/A 转换器去转换。当输出指令执行完成后，DAC 寄存器又自动处于锁存状态以保持 D/A 转换器的输出不变。设 12 位被转换数的高 8 位存放在 DATA 单元中，低 4 位存放在 DATA+1 单元中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DAC:MOV DX,0381H # 高8位
	MOV AL,[DATA]
	OUT DX,AL
	MOV DX,[DATA+1] # 低4位
	OUT DX,AL
	MOV DX,0384H
	OUT DX,AL # 完成12位数据转换
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;23-输出方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-输出方式&#34;&gt;#&lt;/a&gt; 2.3 输出方式&lt;/h2&gt;
&lt;p&gt;多数 D/A 转换芯片输出的是弱电流信号，要驱动后面的自动化装置，需要在电流输出端外接运算放大器。&lt;/p&gt;
&lt;h3 id=&#34;231-电压输出方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#231-电压输出方式&#34;&gt;#&lt;/a&gt; 2.3.1 电压输出方式&lt;/h3&gt;
&lt;p&gt;由于系统要求不同，电压输出方式又分为单极性输出和双极性输出两种形式。&lt;/p&gt;
&lt;h4 id=&#34;dac单极性输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dac单极性输出&#34;&gt;#&lt;/a&gt; DAC 单极性输出&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129163732367.png&#34; alt=&#34;image-20211129163732367&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;dac双极性输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dac双极性输出&#34;&gt;#&lt;/a&gt; DAC 双极性输出&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129164331141.png&#34; alt=&#34;image-20211129164331141&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129164639328.png&#34; alt=&#34;image-20211129164639328&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;232-电流输出方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#232-电流输出方式&#34;&gt;#&lt;/a&gt; 2.3.2 电流输出方式&lt;/h3&gt;
&lt;p&gt;因为电流信号易于远距离传送，且不易受干扰，特别是在过程控制系统中，自动化仪表只接收电流信号，所以在微机控制输出通道中常以电流信号来传送信息，这就需要将电压信号再转换成电流信号，完成电流输出方式的电路被称为 V/I 变换电路。电流输出方式一般有两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通运算 V/I 变换电路&lt;/li&gt;
&lt;li&gt;集成转换器 V/I 变换电路（高精度）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;普通运算vi变换电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#普通运算vi变换电路&#34;&gt;#&lt;/a&gt; 普通运算 V/I 变换电路&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129185616846.png&#34; alt=&#34;image-20211129185616846&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129185755348.png&#34; alt=&#34;image-20211129185755348&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129185927930.png&#34; alt=&#34;image-20211129185927930&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129190219797.png&#34; alt=&#34;image-20211129190219797&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;集成转换器vi变换电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集成转换器vi变换电路&#34;&gt;#&lt;/a&gt; 集成转换器 V/I 变换电路&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129190649268.png&#34; alt=&#34;image-20211129190649268&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129190702464.png&#34; alt=&#34;image-20211129190702464&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129190822417.png&#34; alt=&#34;image-20211129190822417&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;233-自动手动输出方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#233-自动手动输出方式&#34;&gt;#&lt;/a&gt; 2.3.3 自动 / 手动输出方式&lt;/h3&gt;
&lt;p&gt;在计算机过程控制中，除了正常运行的自动控制方式以外，在开、停车或事故情况下还需要进行手动控制方式，在自动 / 手动控制方式切换的瞬间，必须保持系统输出信号不变，才能对执行器的现有位置不产生扰动，即达到双向切换时平衡对位的无扰动切换。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129191323875.png&#34; alt=&#34;image-20211129191323875&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在普通运算放大器 V/I 变换电路的基础上，增加了自、手动切换开关 K1、K2、K3 和手动增减电路与输出跟踪电路。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自动 / 手动状态下的 V/I 变换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当开关处于自动（A）状态时，运算放大器 A2 与 A1 接通，形成一个电压比较型跟随器。当 V&amp;lt;sub&amp;gt;f&amp;lt;/sub&amp;gt;≠V&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 时，电路能自动地使输出电流增大或减小，最终使 V&amp;lt;sub&amp;gt;f&amp;lt;/sub&amp;gt;=V&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt;，于是有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mn&gt;9&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;I_L = V_i / (R_9 + R_P)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以看出：只要电阻 R&amp;lt;sub&amp;gt;9&amp;lt;/sub&amp;gt;、R&amp;lt;sub&amp;gt;P&amp;lt;/sub &amp;gt; 稳定性好，A&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、A&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 具有较好的增益，该电路就有较高的线性精度。当 R&amp;lt;sub&amp;gt;9&amp;lt;/sub&amp;gt;+R&amp;lt;sub&amp;gt;P&amp;lt;/sub&amp;gt; = 500Ω 或 250Ω 时，输出电流 I&amp;lt;sub&amp;gt;L&amp;lt;/sub &amp;gt; 就以 0mA~10mA 或 4mA~20mA 的直流信号线性地对应 V&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 的 0V~5V 或 1V~5V 的直流电压信号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当开关处于手动（H）状态时，此时运放 A&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 与 A&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 断开，成为一个保持型反相积分器。当按下 “增” 按钮时，V&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 以一定的速率上升，从而使 I&amp;lt;sub&amp;gt;L&amp;lt;/sub &amp;gt; 也以同样的速率上升；当按下 “减” 按钮时，V&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 以一定的速率下降，I&amp;lt;sub&amp;gt;L&amp;lt;/sub &amp;gt; 也以同样的速率下降。&lt;strong&gt;负载 R&amp;lt;sub&amp;gt;L&amp;lt;/sub&amp;gt;（一般为电动调节阀）上的电流 I&amp;lt;sub&amp;gt;L&amp;lt;/sub &amp;gt; 的升降速率取决于&lt;em&gt; R&lt;/em&gt;6、&lt;em&gt;R&lt;/em&gt;7、C 和电源电压 ±E 的大小，而手动操作按钮的时间长短决定输出电流 I&amp;lt;sub&amp;gt;L&amp;lt;/sub &amp;gt; 的大小。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动 / 手动双向无扰动切换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自动到手动的切换：当开关 S1、S2、S3 都从自动（A）切换为手动（H），“增”、“减” 两处按钮处于断开状态，运算放大器 A&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 为一高输入阻抗保持器，则 A&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 的输出 V&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 几乎保持不变，从而维持输出电流 I&amp;lt;sub&amp;gt;L&amp;lt;/sub &amp;gt; 恒定。因此，自动到手动的无扰动切换是由手动操作电路的硬件实现的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动到自动的切换：当开关 S1、S2、S3 手动（H）切换为自动（A）时，要做到无扰动切换必须使自动输出电路具有跟踪手动输出的功能，即在手动状态下，使来自计算机 D/A 转换电路的自动输入信号 V&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 始终等于反映手动输出的信号 V&amp;lt;sub&amp;gt;f&amp;lt;/sub&amp;gt;（V&amp;lt;sub&amp;gt;f&amp;lt;/sub &amp;gt; 和 I&amp;lt;sub&amp;gt;L&amp;lt;/sub &amp;gt; 总是一一对应的）。要达到这个目的，必须有上图所示的硬件电路与相应的跟踪程序配合。&lt;/p&gt;
&lt;p&gt;工作过程：在每个控制周期，计算机首先由数字量输入通道（DI）读入开关 S&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 的状态，以判断输出电路是处于手动状态还是自动状态：若是自动状态，则程序执行本回路预先规定的控制运算，输出 V&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 并通过 V/I 变换输出电流 I&amp;lt;sub&amp;gt;L&amp;lt;/sub&amp;gt;；若为手动状态，则首先由 A/D 通道读入 V&amp;lt;sub&amp;gt;f&amp;lt;/sub &amp;gt; 并转换为数字信号，然后原封不动地将此数字信号送出，由 D/A 转换为电压信号送至输出电路的输入端 V&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt;，这样就使 V&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 始终与 V&amp;lt;sub&amp;gt;f&amp;lt;/sub &amp;gt; 相等。当开关 S1 从手动（H）切换为自动（A）是，由于 V&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt;≡V&amp;lt;sub&amp;gt;f&amp;lt;/sub&amp;gt;，所以 V2 与 I&amp;lt;sub&amp;gt;L&amp;lt;/sub &amp;gt; 都保持不变，从而实现了手动到自动的无扰动切换。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;24-da转换模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-da转换模板&#34;&gt;#&lt;/a&gt; 2.4 D/A 转换模板&lt;/h2&gt;
&lt;p&gt;将上述 D/A 转换器芯片及其接口以及输出电路组合集成在一块模板上，就构成了计算机控制系统中的 D/A 转换模板。&lt;/p&gt;
&lt;h3 id=&#34;241-da转换模板的通用性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#241-da转换模板的通用性&#34;&gt;#&lt;/a&gt; 2.4.1 D/A 转换模板的通用性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;符合总线标准&lt;/p&gt;
&lt;p&gt;指计算机内部的总线结构，D/A 转换模板及其他所有电路模板都应符合统一的总线标准。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口地址可选&lt;/p&gt;
&lt;p&gt;一套控制系统往往需要配置多块功能模板，或者同一功能模板可能被组合在不同系统中。因此，每块模板应具有接口地址的可选性。&lt;/p&gt;
&lt;p&gt;一般接口地址可由基址（或称板址）和片址（或称口地址）组成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129203324913.png&#34; alt=&#34;image-20211129203324913&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上图为一种可选的译码电路，8 位量值比较器 74LS688、地址 A3~A7、置位开关 S 与上拉电阻组成基址译码电路，74LS138 译码器、地址 A0~A2 构成片址译码电路。只有当 P&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt; = Q&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt;(i = 1,2,3……7) 时，它的输出端 P = Q 为有效低电位从而使 74LS138 译码器处于工作状态，产生由相应片址 A0~A2 确定的片选信号 WC0~WC7，该片选信号可分别作为多 D/A 结构中 8 个 D/A 转换器的片选信号 CS (下划线) 或写信号 WR&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(下划线)。&lt;/p&gt;
&lt;p&gt;而基址 A7~A3 的确定，完全取决于置位开关 S7~S3 的通断状态，其基址可在 00000xxx~11111xxx 范围内任意选定。上图中，S7、S6 闭合，S5、S4、S3 断开，即确定该板的基址为 00111xxx，则该板 8 个片址最终确定了 8 个 D/A 通道的口地址为 00111000~00111111，即：38H~3FH&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出方式可选&lt;/p&gt;
&lt;p&gt;为了适应不同控制系统对执行器的不同需求，D/A 转换模板往往把各种电压输出和电流输出方式组合在一起，&lt;strong&gt;然后通过短接柱来选定某一种输出方式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个实际的 D/A 转换模板，供用户选择的输出范围常常是：0~5V、0~10V、±5V、0~10mA、4~20mA 等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;242-da转换模板的设计举例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#242-da转换模板的设计举例&#34;&gt;#&lt;/a&gt; 2.4.2 D/A 转换模板的设计举例&lt;/h3&gt;
&lt;p&gt;D/A 转换模板设计主要考虑以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全可靠&lt;/p&gt;
&lt;p&gt;尽量选用性能好的元器件，并采用光电隔离技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能 / 性价比高&lt;/p&gt;
&lt;p&gt;既要在性能上达到预定的技术指标，又要在技术路线、芯片元件上降低成本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通用性&lt;/p&gt;
&lt;p&gt;D/A 转换模板应符合总线标准，其接口地 址及输出方式应具备可选性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D/A 模板转换设计步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定性能指标&lt;/li&gt;
&lt;li&gt;设计电路原理图&lt;/li&gt;
&lt;li&gt;设计和制造印制线路板&lt;/li&gt;
&lt;li&gt;最后焊接和调试电路板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129205912003.png&#34; alt=&#34;image-20211129205912003&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图 2-15 给出了 8 路 8 位 D/A 转换模板的结构组成框图，它是按照总线接口逻辑、I/O 功能逻辑和 I/O 电气接口等三部分布局电子元器件的。图中，&lt;strong&gt;总线接口逻辑部分主要由数据缓冲与地址译码电路组成，完成 8 路通道的分别选通与数据传送&lt;/strong&gt;（参见图 2-14 接口地址可选的译码电路）；I/O 功能逻辑部分由 8 片 DAC0832 组成，&lt;strong&gt;完成数模转换&lt;/strong&gt;（参见图 2-5DAC0832 接口电路）；而&lt;strong&gt; I/O 电气接口部分由运算放大器与 V/I 变换电路组成，实现电压或电流信号的输出&lt;/strong&gt;（参见图 2-8 的双极性电压输出方式与图 2-9 的电流输出方式）。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMTI5MjExNjA2MTM2LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129211606136.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211129211606136&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;考试要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;掌握 DA 原理 判断 简答&lt;/p&gt;
&lt;p&gt;DA 转换器的性能指标&lt;br /&gt;
 DA 大题 电路分析（8 位 / 12 位）地址分析 根据需要设计电路&lt;/p&gt;
&lt;p&gt;输出方式：重点掌握自动手动输出切换&lt;/p&gt;
&lt;p&gt;电路分析不考察&lt;/p&gt;
&lt;h2 id=&#34;课后习题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h2&gt;
&lt;p&gt;1、画图说明模拟量输出通道的功能、各组成部分及其作用。&lt;/p&gt;
&lt;p&gt;2、D/A 转换器的性能指标有哪些？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、结合图 2-3，分析说明 DAC0832 的内部结构组成及其作用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、结合图 2-5 分析说明由 DAC0832 组成的单缓冲接口电路的工作过程，编写完成一次 D/A 转换的接口程序。&lt;/p&gt;
&lt;p&gt;5、结合图 2-6 分析说明由 DAC1210 组成的接口电路的工作过程，编写完成一次 D/A 转换的接口程序。&lt;/p&gt;
&lt;p&gt;6、简单说明 D/A 转换输出电路有几种输出方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、结合图 2-13 分析说明自动 / 手动双向无扰动切换过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;8、结合图 2-14 分析说明基址与片址的译码过程。&lt;/p&gt;
&lt;p&gt;9、结合图 2-15 分析说明 D/A 转换模板的结构组成及各部分逻辑功能。&lt;/p&gt;
&lt;h1 id=&#34;第3章-模拟量输入通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第3章-模拟量输入通道&#34;&gt;#&lt;/a&gt; 第 3 章 模拟量输入通道&lt;/h1&gt;
&lt;h2 id=&#34;引言部分-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言部分-2&#34;&gt;#&lt;/a&gt; 引言部分&lt;/h2&gt;
&lt;p&gt;本章要点：&lt;/p&gt;
&lt;p&gt;1．模拟量输入通道的结构组成。&lt;/p&gt;
&lt;p&gt;2．多路开关，前置放大、采样保持等各环节的功能作用。&lt;/p&gt;
&lt;p&gt;3．8 位 A/D 转换器 ADC0809 芯片及其接口电路。&lt;/p&gt;
&lt;p&gt;4．12 位 A/D 转换器 AD574A 芯片及其接口电路。&lt;/p&gt;
&lt;p&gt;模拟量输入通道的任务：将被控对象的过程参数如温度、压力、流量、液体、重量等模拟量转换成计算机可以接收的数字量信号。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130151014344.png&#34; alt=&#34;image-20211130151014344&#34; /&gt;&lt;/p&gt;
&lt;p&gt;来自于工业现场传感器或变送器的多个模拟信号量首先需要进行信号调理，然后经多路模拟开关，分时切换到后级进行前置放大、采样保持和 A/D 转换，通过接口电路以数字信号量进入主机系统，从而完成对过程参数的巡回检测任务。&lt;/p&gt;
&lt;p&gt;显然，该通道的核心是 A/D 转换器，通常把模拟信号量输入通道称为 A/D 通道或 AI 通道。&lt;/p&gt;
&lt;h2 id=&#34;31-信号调理电路不考大题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-信号调理电路不考大题&#34;&gt;#&lt;/a&gt; 3.1 信号调理电路 (不考大题)&lt;/h2&gt;
&lt;p&gt;在模拟输入通道中，对现场可能引入的各种干扰，必须采取相应的技术措施以保证 A/D 转换的精度，所以首先要在输入通道之前设置输入信号调理电路。&lt;/p&gt;
&lt;p&gt;根据通道需要，可以采取不同的信号调理技术，如：信号滤波、光电隔离、电平转换、过电压保护、反电压保护、电流 / 电压变换等。&lt;/p&gt;
&lt;p&gt;在控制系统中，对被控量的检测往往采用各种类型的测量变送器，当它们的输出信号为 0 - 10 mA 或 4 -20 mA 的电流信号时，一般是采&lt;strong&gt;用电阻分压法&lt;/strong&gt;把现场传送来的&lt;strong&gt;电流信号转换为电压信号&lt;/strong&gt;，以下是两种变换电路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无源 I/V 变换&lt;/p&gt;
&lt;p&gt;构成：无源器件电阻＋（RC 滤波＋二极管限幅）等保护&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130153113342.png&#34; alt=&#34;image-20211130153113342&#34; /&gt;&lt;/p&gt;
&lt;p&gt;取值:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入 0- 10 mA，输出为 0 -5 V ，R1=100Ω，R2=500Ω；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入 4 -20 mA，输出为 1 - 5 V，R1=100Ω，R2=250Ω；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有源 I/V 变换&lt;/p&gt;
&lt;p&gt;构成：有源器件运算放大器＋电阻、电容组成&lt;/p&gt;
&lt;p&gt;利用&lt;strong&gt;同相放大电路&lt;/strong&gt;，把电阻 R1 上的输入电压变成标准输出电压，该同相放大电路的放大倍数：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMTMwMTU0NzQ3NjkwLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130154747690.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211130154747690&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;取值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R1=200Ω，R3=100kΩ，R4=150kΩ 输入 0 ~ 10 mA 输出 0 ~ 5 V&lt;/li&gt;
&lt;li&gt;R1=200Ω，R3=100kΩ，R4=25kΩ 输入 4 ~ 20 mA 输出 1 ~ 5 V&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-多路模拟开关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-多路模拟开关&#34;&gt;#&lt;/a&gt; 3.2 多路模拟开关&lt;/h2&gt;
&lt;p&gt;由于计算机工作速度远远快于被测参数的变化，因此一台计算机系统可供几十个检测回路使用，但计算机在某一时刻只能接收一个回路信号。因此，必须通过多路模拟开关实现多选 1 的操作，将多路输入信号依次切换到后级。&lt;/p&gt;
&lt;p&gt;目前计算机控制系统使用的多路开关种类很多，并具有不同的功能和用途。如：集成电路芯片 CD4051 (双向、单端、8 路)、CD4052 (单向、双端、4 路)、AD7506 (单向、单端、16 路) 等。&lt;/p&gt;
&lt;p&gt;双向：该芯片既可以实现多到一的切换，也可以完成一到多的切换；而单向则只能完成多到一的切换。&lt;/p&gt;
&lt;p&gt;双端：指芯片内的一对开关同时动作，从而完成差动输入信号的切换，以满足抑制共模干扰的需要。&lt;/p&gt;
&lt;h3 id=&#34;321-结构原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#321-结构原理&#34;&gt;#&lt;/a&gt; 3.2.1 结构原理&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130160155871.png&#34; alt=&#34;image-20211130160155871&#34; /&gt;&lt;/p&gt;
&lt;p&gt;8 路模拟开关&lt;/p&gt;
&lt;p&gt;构成：电平转换、译码驱动、开关电路&lt;/p&gt;
&lt;p&gt;当禁止端 INH (上划线) 为 “1” 时，前后级通道断开，即：S0~S7 端不可能接通；当 INH (上划线) 为 “0” 时，则通道可以被接通，通过改变控制输入端 C、B、A 的数值，就可以选通 8 个通道 S0~S7 中的一路。比如：当 CBA = 000 时，通道 S0 选通；CBA = 001 时，通道 S1 选通；……；当 CBA = 111，通道 S7 选通。&lt;/p&gt;
&lt;p&gt;见书 3-1 真值表&lt;/p&gt;
&lt;h3 id=&#34;322-扩展电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#322-扩展电路&#34;&gt;#&lt;/a&gt; 3.2.2 扩展电路&lt;/h3&gt;
&lt;p&gt;当采样通道多至 16 路，可直接选用 16 路模拟开关的芯片，也可以将 2 个 8 路 CD4051 并联起来，组成一个单端 16 路开关。&lt;/p&gt;
&lt;p&gt;例：试用两个 CD4051 扩展成一个 1x16 路的模拟开关。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130161038650.png&#34; alt=&#34;image-20211130161038650&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数据总线 D3~D0 作为通道选择信号，D3 用来控制两个多路开关的禁止端 INH (下划线)。当 D3 = 0 时，选中上面的多路开关，当 D2、D1、D0 从 000 变为 111 时，依次选通 S0~S7 通道；当 D3 = 1，经反相器变成低电平，选中下面的多路开关，此时当 D2、D1、D0 从 000 变为 111，则依次选通 S8~S15 通道。&lt;/p&gt;
&lt;h2 id=&#34;33前置放大器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33前置放大器&#34;&gt;#&lt;/a&gt; 3.3 前置放大器&lt;/h2&gt;
&lt;h3 id=&#34;引言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言&#34;&gt;#&lt;/a&gt; 引言&lt;/h3&gt;
&lt;p&gt;前置放大器的任务：将输入模拟小信号放大到 A/D 转换的量程范围 ，如 0-5VDC;&lt;/p&gt;
&lt;p&gt;对于单纯的微弱信号，可以用一个运算放大器进行单端同相放大或单端反向。&lt;/p&gt;
&lt;p&gt;下图 (a)，信号源的一端若接放大器的正端，则为同相放大，同相放大倍数 G = 1 + R2 / R1。&lt;/p&gt;
&lt;p&gt;下图 (b)，信号源的一端接放大器的负端，则为反相放大，反相放大电路的放大倍数 G = -R2 / R1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130162307356.png&#34; alt=&#34;image-20211130162307356&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当然，这两种电路都是单端放大，所以信号源的另一端是与放大器的另一个输入端共地。&lt;/p&gt;
&lt;h3 id=&#34;331-测量放大器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#331-测量放大器&#34;&gt;#&lt;/a&gt; 3.3.1 测量放大器&lt;/h3&gt;
&lt;p&gt;来自生产现场的传感器信号往往带有共模干扰，而单个运算放大器的差动输入端难以起到很好的抑制作用。因此，A/D 通道中的前置放大器常采用由一组运算放大器构成的测量放大器，也称仪表放大器，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130165127045.png&#34; alt=&#34;image-20211130165127045&#34; /&gt;&lt;/p&gt;
&lt;p&gt;经典的测量放大器由三个运算放大器组成对称结构，测量放大器的差动输入端 V&amp;lt;sub&amp;gt;IN+&amp;lt;/sub &amp;gt; 和 V&amp;lt;sub&amp;gt;IN-&amp;lt;/sub &amp;gt; 分别是两个运算放大器 A1、A2 的同相输入端，输入阻抗很高，而且完全对称地直接与被测信号相连，因而有极强的抑制共模干扰能力。&lt;/p&gt;
&lt;p&gt;增益公式：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130165924767.png&#34; alt=&#34;image-20211130165924767&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;332-可变增益放大器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#332-可变增益放大器&#34;&gt;#&lt;/a&gt; 3.3.2 可变增益放大器&lt;/h3&gt;
&lt;p&gt;在 A/D 转换通道中，多路被测信号经常共用一个测量放大器，而各路的输入信号大小往往不同，但都要放大到 A/D 转换器的同一量程范围。因此对于不同大小的输入信号，测量放大器的增益也应不相同。具有这种性能的放大器称为可变增益放大器或可编程放大器，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130170357067.png&#34; alt=&#34;image-20211130170357067&#34; /&gt;&lt;/p&gt;
&lt;p&gt;把 (a) 图中的外接电阻换成一组精密的电阻网络，每个电阻支路上有一个开关，通过支路开关依次通断就可以改变放大器的增益，根据开关支路上的电阻值与增益公式，就可以算得支路开关自上而下闭合时的放大器增益分别为 2、4、8、16、32、64、128、256 倍。显然这组开关如果用多路模拟开关就可以方便地进行增益可变地计算机数字程序控制，此类集成电路芯片有 AD612/AD614 等。&lt;/p&gt;
&lt;p&gt;另外，还可以用数字电位器代替增益电阻，同样通过编程控制电位器阻值，使其放大倍数接近连续化。此类集成芯片有 X9313、X9511、MAX5161。&lt;/p&gt;
&lt;h2 id=&#34;34采样保持器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34采样保持器&#34;&gt;#&lt;/a&gt; 3.4 采样保持器&lt;/h2&gt;
&lt;p&gt;当某一通道进行 A/D 转换时，&lt;strong&gt;由于 A/D 转换需要一定时间，如果输入信号变化较快，就会引起较大的转换误差&lt;/strong&gt;。为了保证转换的精度，需要应用采样保持器。&lt;/p&gt;
&lt;h3 id=&#34;341-采样定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#341-采样定理&#34;&gt;#&lt;/a&gt; 3.4.1 采样定理&lt;/h3&gt;
&lt;p&gt;以一定时间间隔对连续的信号进行采样，使连续信号转换为时间上离散的、幅值上连续的脉冲序列的过程称为采样过程。&lt;/p&gt;
&lt;p&gt;把连续变化的量变成离散量后再进行处理的计算机控制系统，称为采样数据系统或离散系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;离散系统的采样形式：
&lt;ul&gt;
&lt;li&gt;周期采样（应用最多）&lt;/li&gt;
&lt;li&gt;多阶采样&lt;/li&gt;
&lt;li&gt;随机采样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130173017036.png&#34; alt=&#34;image-20211130173017036&#34; /&gt;&lt;/p&gt;
&lt;p&gt;采样开关每次闭合的时间称为采样时间或采样宽度，采样开关每次通断的时间间隔称为采样周期 T。&lt;/p&gt;
&lt;p&gt;香农定理：为了使采样信号 f&amp;lt;sup&amp;gt;*&amp;lt;/sup&amp;gt;(t) 能完全复现原信号 f (t)，采样频率 f&amp;lt;sub&amp;gt;s&amp;lt;/sub &amp;gt; 至少要为原信号最高有效频率 f&amp;lt;sub&amp;gt;max&amp;lt;/sub &amp;gt; 的两倍，即：f&amp;lt;sub&amp;gt;s&amp;lt;/sub&amp;gt;≥2f&amp;lt;sub&amp;gt;max&amp;lt;/sub&amp;gt;&lt;/p&gt;
&lt;p&gt;若选择的频率对连续信号所含的最高频率来说，能做到在其一个周期内采样两次以上，则在采样获得的脉冲序列中将包含连续信号的全部信息。反之，若采样信号次数太少，就做不到无失真地再现原连续信号。&lt;/p&gt;
&lt;p&gt;实际：f&amp;lt;sub&amp;gt;s&amp;lt;/sub&amp;gt;≥（5~10）f&amp;lt;sub&amp;gt;max&amp;lt;/sub&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;342-零阶采样保持器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#342-零阶采样保持器&#34;&gt;#&lt;/a&gt; 3.4.2 零阶采样保持器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130174527339.png&#34; alt=&#34;image-20211130174527339&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在两次采样时间间隔内，根据采样信号而复现原信号的装置被称为保持器。当用&lt;strong&gt;常数、线性函数和抛物线函数&lt;/strong&gt;去逼近两个相邻采样时间的原信号时，分别称为&lt;strong&gt;零阶、一阶、高阶采样保持器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;零阶采样保持器是最常用的一种信号保持器，它在两次采样的间隔时间内，一直保持采样值不变，直到下一个采样时刻，如上图所示，采样保持器由输入 / 输出缓冲放大器 A1、A2 和采样开关 S、保持电容 C&amp;lt;sub&amp;gt;H&amp;lt;/sub &amp;gt; 等组成。&lt;/p&gt;
&lt;p&gt;采样期间，开关 S 闭合，输入电压 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 通过 A1 对 C&amp;lt;sub&amp;gt;H&amp;lt;/sub &amp;gt; 快速充电，输出电压 V&amp;lt;sub&amp;gt;OUT&amp;lt;/sub &amp;gt; 跟随 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 变化；保持期间，开关 S 断开，由于 A2 的输入阻抗很高，理想情况下电容 C&amp;lt;sub&amp;gt;H&amp;lt;/sub &amp;gt; 将保持电压 V&amp;lt;sub&amp;gt;C&amp;lt;/sub &amp;gt; 不变，因而输出电压 V&amp;lt;sub&amp;gt;OUT&amp;lt;/sub&amp;gt; = V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 也保持恒定。&lt;/p&gt;
&lt;p&gt;显然，保持电容 C&amp;lt;sub&amp;gt;H&amp;lt;/sub &amp;gt; 的作用很重要。实际上，保持期间的电容保持电压 V&amp;lt;sub&amp;gt;C&amp;lt;/sub &amp;gt; 在慢慢下降，这是由于保持电容的漏电流所致。保持电压的变化率：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;msub&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\frac{dV_C}{dt} = \frac{I_D}{C_H}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.05744em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.37144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.19633em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I&amp;lt;sub&amp;gt;D&amp;lt;/sub &amp;gt; 是保持期间电容总泄漏电流，它包括放大器的输入电流、开关截止时的漏电流等。增大电容 C&amp;lt;sub&amp;gt;H&amp;lt;/sub &amp;gt; 可以减小电压变化率，但同时又会增加充电即采样时间，因此保持电容的容量大小与采样精度成正比而与采样频率成反比。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130194620579.png&#34; alt=&#34;image-20211130194620579&#34; /&gt;&lt;/p&gt;
&lt;p&gt;常见的零阶采样保持器有：AD582 (图 a)、LF198/LF298/LF398 (图 b)。这里用&lt;strong&gt; TTL 逻辑电平&lt;/strong&gt;控制采样和保持状态：当 LF198/LF298/LF398 的引脚 8 为低电平时，开关 S 断开，电路进入保持状态。AD582 的控制逻辑与之相反。&lt;/p&gt;
&lt;p&gt;在 A/D 通道中，采样保持器的采样和保持电平与后级的 A/D 转换相配合，该电平信号既可以由其他控制电路产生，也可以由 A/D 转换器直接提供。总之采样器在采样期间，不启动 A/D 转换器，而一旦进入保持期间，则立即启动 A/D 转换器，从而保证 A/D 转换时的模拟输入电压恒定，以确保 A/D 转换的精度。&lt;/p&gt;
&lt;h2 id=&#34;35-ad转换器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-ad转换器&#34;&gt;#&lt;/a&gt; 3.5 A/D 转换器&lt;/h2&gt;
&lt;p&gt;A/D 转换器能把输入的模拟电压变成与它成正比的数字量，即能把被控对象的各种模拟信息变成计算机可以识别的数字信息。&lt;/p&gt;
&lt;h3 id=&#34;351-工作原理和性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#351-工作原理和性能指标&#34;&gt;#&lt;/a&gt; 3.5.1 工作原理和性能指标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;逐位逼近式 A/D 转换&lt;/p&gt;
&lt;p&gt;速度较快，精度也较高，目前应用最多的一种。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双积分式 A/D 转换&lt;/p&gt;
&lt;p&gt;转换速度慢，但转换精度高，多用于数据采集系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;电压 / 频率式 A/D 转换&lt;/p&gt;
&lt;p&gt;接口原理简单，转换速度较慢，但精度较高，适合于远距离的数据传送。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;逐位逼近式ad转换原理重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逐位逼近式ad转换原理重点&#34;&gt;#&lt;/a&gt; 逐位逼近式 A/D 转换原理（重点）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130201022203.png&#34; alt=&#34;image-20211130201022203&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1 个 n 位 A/D 转换器是由：逐位逼近寄存器、D/A 转换器、比较器、控制时序和逻辑电路、数字量输出锁存器五部分组成。&lt;/p&gt;
&lt;p&gt;现以 4 位 A/D 转换器把模拟量 9 转换为二进制 1001 为例，说明诸位逼近式 A/D 转换器工作原理：&lt;/p&gt;
&lt;p&gt;如上图，当启动信号作用后，时钟信号在控制逻辑作用下，首先使逐位逼近寄存器的最高位 D&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;=1，其余为 0，此时数字量 1000 经 D/A 转换器转换成模拟量即：V&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt; = 8，送到比较器的输入端与被转换的模拟量 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt; = 9 进行比较，控制逻辑根据比较器的输出进行判断。若 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt; ≥V &amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;，则保留 D&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;；再对下一位 D2 进行比较，同样先使 D&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt; = 1，与上一位 D&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 一起即 1100 进入 D/A 转换器，转换为 V&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt; = 12 再进入比较器，与 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 进行比较，因为 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt; ＜V &amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;，所以使 D&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt; = 0；再下一位 D&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 位也是如此，D&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt; = 1，经 D/A 转换为 V&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt; = 10，因为 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt; ＜V &amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;，所以使 D&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt; = 0；最后一位 D&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt; = 1，经 D/A 转换为 V&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt; = 9，再与 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 进行比较，因为 V&amp;lt;sub&amp;gt;IN &amp;lt;/sub&amp;gt; ≥ V &amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;，故保留 D&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt; = 1。比较结束，逐位逼近寄存器中的数字量 1001 极为模拟量 9 的转换结果，存在数字输出锁存器中等待输出。&lt;/p&gt;
&lt;p&gt;一个 n 位 A/D 转换器的 A/D 转换表达式：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mtext&gt;：转换后的输出数字量&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mtext&gt;：要转换的输入模拟量&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mtext&gt;、&lt;/mtext&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mtext&gt;：基准电压源的正、负输入。&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;B = \frac{V_{IN} - V_{R-}}{V_{R+} - {V_{R-}}} × 2^n\\
B：转换后的输出数字量\\
V_{IN}：要转换的输入模拟量\\
V_{R+}、V_{R-}：基准电压源的正、负输入。
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.254661em;vertical-align:-0.894331em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.328331em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.328331em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.328331em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.894331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7143919999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7143919999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;换&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;后&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;出&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;字&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;量&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;要&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;换&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;入&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;拟&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;量&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.891661em;vertical-align:-0.208331em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.328331em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.328331em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;基&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;准&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;电&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;压&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;源&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;正&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;负&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;入&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;即：当基准电压源确定后，n 位 A/D 转换器的数字输出量 B 与要转换的输入模拟量 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 成正比。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130205208472.png&#34; alt=&#34;image-20211130205208472&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此种 A/D 转换器的常用品种有普通型 8 位单路 ADC0801～ADC0805、8 位 8 路 ADC0808/0809、8 位 16 路 ADC0816/0817 等，混合集成高速型 12 位单路 AD574A、ADC803 等。&lt;/p&gt;
&lt;h4 id=&#34;双积分式ad转换原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双积分式ad转换原理&#34;&gt;#&lt;/a&gt; 双积分式 A/D 转换原理&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130205331050.png&#34; alt=&#34;image-20211130205331050&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上图为原理图，在转换开始信号控制下，开关接通模拟输入端，输入的模拟电压 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 在固定时间 T 内对积分器上的电容 C 开始充电 (正向积分)，时间一到，控制逻辑将开关切换到与 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 极性相反的基准电源上，此时电容 C 开始放电 (反向积分)，同时计数器开始计数。当比较器判定电容 C 放电完毕时输出信号，由控制逻辑停止计数器的计数，并发出转换结束信号。这时计数器所记的脉冲个数正比于放电时间。&lt;/p&gt;
&lt;p&gt;放电时间 T1 或 T2 正比于输入电压 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt;，即输入电压大，则放电时间长，计数器的计数值越大。因此，计数器计数值的大小反映了输入电压 V&amp;lt;sub&amp;gt;IN&amp;lt;/sub &amp;gt; 在固定积分时间 T 内的平均值。&lt;/p&gt;
&lt;p&gt;此种 A/D 转换器品种常有输出为 3 位半 BCD 码 (二进制编码的十进制数) 的 ICL7107、MC14433、输出为 4 位半 BCD 码的 ICL7135 等。&lt;/p&gt;
&lt;h4 id=&#34;电压频率式ad转换原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#电压频率式ad转换原理&#34;&gt;#&lt;/a&gt; 电压 / 频率式 A/D 转换原理&lt;/h4&gt;
&lt;p&gt;电压 / 频率式 A/D 转换器简称 V/F 转换器，是把模拟电压信号转换为频率信号的器件。&lt;/p&gt;
&lt;p&gt;实现 V/F 转换的方法很多，现以常见的电荷平衡 V/F 转换法说明其转换原理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130211544566.png&#34; alt=&#34;image-20211130211544566&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A1 是积分放大器，A2 为零电压比较器，恒流源 I&amp;lt;sub&amp;gt;R&amp;lt;/sub &amp;gt; 和开关 S 构成 A&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 的反充电回路，开关 S 由单稳态定时器触发控制。当积分放大器 A1 的输出电压 V&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 下降到零时，零电压比较器 A2 输出跳变，触发单稳态定时器，产生暂态时间为 T1 的定时脉冲，并使开关 S 闭合；同时又使晶体管 VT 截止，频率输出端 V&amp;lt;sub&amp;gt;fO&amp;lt;/sub &amp;gt; 输出高电平。&lt;br /&gt;
在开关 S 闭合期间，恒流 I&amp;lt;sub&amp;gt;R&amp;lt;/sub &amp;gt; 被接入积分器的 “-” 输入端。由于电路是按 I&amp;lt;sub&amp;gt;R&amp;lt;/sub&amp;gt;＞V&amp;lt;sub&amp;gt;Imax&amp;lt;/sub&amp;gt; / R&amp;lt;sub&amp;gt;I&amp;lt;/sub &amp;gt; 设计的，故此时电容 C 被&lt;strong&gt;反向充电&lt;/strong&gt;，充电电流为 I&amp;lt;sub&amp;gt;R&amp;lt;/sub&amp;gt;-V&amp;lt;sub&amp;gt;I&amp;lt;/sub&amp;gt; / R&amp;lt;sub&amp;gt;I&amp;lt;/sub&amp;gt;，则&lt;strong&gt;积分器 A1 输出电压 V&amp;lt;sub&amp;gt;O&amp;lt;/sub &amp;gt; 从零开始线性上升&lt;/strong&gt;。当定时时间 T&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 结束，定时器恢复稳态，使开关 S 断开，反向充电停止，同时使晶体导管 VT 导通，V&amp;lt;sub&amp;gt;fO&amp;lt;/sub &amp;gt; 输出低电平。&lt;/p&gt;
&lt;p&gt;开关 S 断开后，&lt;strong&gt;正输入电压 V&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 开始对电容 C 正向充电&lt;/strong&gt;，其充电电流为 V&amp;lt;sub&amp;gt;I&amp;lt;/sub&amp;gt; / R&amp;lt;sub&amp;gt;I&amp;lt;/sub&amp;gt;，则&lt;strong&gt;积分放大器 A1 输出电压 V&amp;lt;sub&amp;gt;O&amp;lt;/sub &amp;gt; 开始线性下降&lt;/strong&gt;。当 V&amp;lt;sub&amp;gt;O&amp;lt;/sub&amp;gt; = 0 时，比较器 A&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 输出再次跳变，又使单稳态定时器产生 T&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 时间的定时脉冲，而控制开关再次闭合，A&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 再次反向充电，同时 V&amp;lt;sub&amp;gt;fO&amp;lt;/sub &amp;gt; 端又输出高电平。&lt;/p&gt;
&lt;p&gt;如此反复，就会在积分器 A&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 输出端 V&amp;lt;sub&amp;gt;O&amp;lt;/sub&amp;gt;、单稳态定时器脉冲输出端和频率输出端 V&amp;lt;sub&amp;gt;fO&amp;lt;/sub &amp;gt; 端产生 (b) 中的波形，其波形的周期为 T。&lt;/p&gt;
&lt;p&gt;根据反向充电电荷量和正向充电电荷量相等的平衡原理，可得：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mfrac&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(I_R - \frac{V_1}{R_1})T_1 = \frac{V_1}{R_1}(T-T_1)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.19633em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.19633em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;整理得：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T = \frac{I_RR_1T_1}{V_1}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.19633em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;则 V&amp;lt;sub&amp;gt;fO&amp;lt;/sub &amp;gt; 端输出的电压频率为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;f_O = \frac{1}{T}=\frac{V_1}{I_RR_1T_1}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.00744em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.32144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.19633em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个&lt;strong&gt; f&amp;lt;sub&amp;gt;O&amp;lt;/sub &amp;gt; 就是由 V&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 转换而来的输出频率，两者成线性比例关系&lt;/strong&gt;。由上式可见，要精确地实现 V/F 变换，要求 I&amp;lt;sub&amp;gt;R&amp;lt;/sub&amp;gt;、R&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、T&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 应准确稳定。积分电容 C 虽然没有出现在上式中，但它的漏电流将会影响到充电电流 V&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;/R&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;，从而&lt;strong&gt;影响转换精度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此种 V/F 转换器常用品种：VFC32、LM131/LM331、AD650、AD651&lt;/p&gt;
&lt;h4 id=&#34;ad转换器性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ad转换器性能指标&#34;&gt;#&lt;/a&gt; A/D 转换器性能指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分辨率&lt;/p&gt;
&lt;p&gt;分辨率是指 A/D 转换器对微小输入信号变化的敏感程度。分辨率越高，转换时对输入量微小变化的反应越灵敏。通常用数字量的位数来表示，如 8 位、10 位、12 位等。分辨率为&lt;em&gt; n&lt;/em&gt;，表示它可以对满刻度的 1/2&lt;em&gt;n&lt;/em&gt; 的变化量作出反应。即：&lt;/p&gt;
&lt;p&gt;分辨力 = 满刻度值 / 2&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转换精度&lt;/p&gt;
&lt;p&gt;转换后所得实际值与理论值的接近程度，可用&lt;strong&gt;绝对误差和相对误差&lt;/strong&gt;来表示。&lt;/p&gt;
&lt;p&gt;绝对误差 = 实际模拟输入值 - 理论值&lt;/p&gt;
&lt;p&gt;绝对误差包括增益误差，零点误差和非线性误差等。&lt;/p&gt;
&lt;p&gt;相对误差 =（指绝对误差 / 满刻度值）* 100%&lt;/p&gt;
&lt;p&gt;对 A/D 转换器常用最低有效值的位数 LSB（Least SIgnificant Bit）来表示，1LSB = 1 / 2&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt;&lt;/p&gt;
&lt;p&gt;例如，对于一个 8 位 0~5V 的 A/D 转换器，如果其相对误差为 ±1LSB，则其绝对误差为 ±19.5 mV，相对误差值为 0.39%，一般来说，&lt;strong&gt;位数 n 越大，其相对误差（或绝对误差）越小。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非线性误差&lt;/p&gt;
&lt;p&gt;**A/D 转换器实际转换特性曲线与理想特性曲线之间的最大偏差。** 在转换器设计中，一般要求非线性误差不大于 1 / 2 LSB。通常用非线性误差来表示 A/D 转换器的线性度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转换时间&lt;/p&gt;
&lt;p&gt;A/D 转换器完成一次转换所需的时间称为转换时间。如逐位逼近式 A/D 转换器的转换时间为微秒级，双积分式 A/D 转换器的转换时间为毫秒级。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;352-adc0809芯片及其接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#352-adc0809芯片及其接口电路&#34;&gt;#&lt;/a&gt; 3.5.2 ADC0809 芯片及其接口电路&lt;/h3&gt;
&lt;h4 id=&#34;adc0809芯片介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adc0809芯片介绍&#34;&gt;#&lt;/a&gt; ADC0809 芯片介绍&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;8 位逐位逼近式 A/D 转换器&lt;/li&gt;
&lt;li&gt;分辨率为 1 / 2&amp;lt;sub&amp;gt;8&amp;lt;/sub&amp;gt; ≈0.39%&lt;/li&gt;
&lt;li&gt;模拟电压转换范围 0 ~+5V&lt;/li&gt;
&lt;li&gt;标准转换时间为 100us&lt;/li&gt;
&lt;li&gt;采用 28 脚双立直插式封装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211201204159073.png&#34; alt=&#34;image-20211201204159073&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ADC0809 是在逐位逼近式 A/D 转换原理基础上，增加了 8 路模拟开关、一个用来选择通道的地址锁存与译码电路和一个三态输出锁存器，其引脚功能如下：&lt;/p&gt;
&lt;p&gt;V&amp;lt;sub&amp;gt;IN0&amp;lt;/sub&amp;gt;~V&amp;lt;sub&amp;gt;IN7&amp;lt;/sub&amp;gt;：8 路模拟量输入端。允许 8 路模拟量分时输入，共用一个 A/D 转换器。&lt;/p&gt;
&lt;p&gt;ALE：地址锁存允许信号，输入，高电平有效。上升沿时锁存 3 位通道选择信号。&lt;/p&gt;
&lt;p&gt;A、B、C：3 位地址线即模拟量通道选择线。ALE 位高电平时，地址译码与对应通道选择如表：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211201205735012.png&#34; alt=&#34;image-20211201205735012&#34; /&gt;&lt;/p&gt;
&lt;p&gt;START：A/D 转换启动信号，输入，高电平有效。上升沿时将转换器内部清零，下降沿时启动 A/D 转换。&lt;/p&gt;
&lt;p&gt;EOC：转换结束信号，输出，高电平有效。平时 EOC 为高电平，A/D 转换期间为低电平，A/D 转换结束后又变成高电平。EOC 可用作向主机申请中断的信号，或供主机查询 A/D 转换是否结束的信号。&lt;/p&gt;
&lt;p&gt;OE：输出允许信号，输入，高电平有效。该信号用来打开三态输出缓冲器，将 A/D 转换得到的 8 位数字量送到数据总线上。&lt;/p&gt;
&lt;p&gt;DO&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;~DO&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;：8 位数字量输出。DO&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为最低位，DO&amp;lt;sub&amp;gt;7&amp;lt;/sub &amp;gt; 为最高位。由于有三态输出锁存，可与主机数据总线直接相连。&lt;/p&gt;
&lt;p&gt;CLOCK：外部时钟脉冲输入端。当脉冲频率为 640kHz 时，A/D 转换时间为 100us&lt;/p&gt;
&lt;p&gt;V&amp;lt;sub&amp;gt;R+&amp;lt;/sub&amp;gt;、V&amp;lt;sub&amp;gt;R-&amp;lt;/sub&amp;gt;：基准电压源正端、负端。取决于被转换的模拟电压范围。通常：V&amp;lt;sub&amp;gt;R+&amp;lt;/sub&amp;gt; = + 5V (DC)，V&amp;lt;sub&amp;gt;R-&amp;lt;/sub&amp;gt; = 0V (DC)&lt;/p&gt;
&lt;p&gt;GND：电源地&lt;/p&gt;
&lt;p&gt;了解 ADC0809 的内部转换时序十分重要，这是设计硬件与软件的主要依据。&lt;/p&gt;
&lt;p&gt;转换过程如下：首先 ALE 上升沿将地址代码锁存、译码后选通模拟开关中的某一路，使该路模拟量进入到 A/D 转换器中。同时 START 的上升沿将转换器内部清零，下降沿启动 A/D 转换器，即在时钟作用下，逐位逼近过程开始，转换结束信号 EOC 即变为低电平。&lt;/p&gt;
&lt;p&gt;当转换结束后，EOC 恢复高电平，此时，如果对输出允许 OE 输入一高电平命令，则可读出数据。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211201211838081.png&#34; alt=&#34;image-20211201211838081&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上述过程中，判断 A/D 转换器是否完成一次转换，可以依据结束信号 EOC 电平的高低，或者根据输入时钟频率计算出转换芯片的转换时间。因此读取 A/D 转换数可以采用 **：程序查询、定时采样、中断采样和 CPU 等待 ** 等多种方式。&lt;/p&gt;
&lt;p&gt;另外，ADC0809 这种芯片输出端具有可控的缓冲锁存门，易于直接与主机进行接口。还有一类芯片内部没有缓冲锁存门，不能直接与主机相连。这样，在 A/D 转换器与主机之间也出现了直接连接、通过 8255 或锁存器间接连接几种情形。&lt;/p&gt;
&lt;h4 id=&#34;adc0809接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adc0809接口电路&#34;&gt;#&lt;/a&gt; ADC0809 接口电路&lt;/h4&gt;
&lt;p&gt;A/D 转换器的接口电路主要是解决主机如何分时采集多路模拟量输入信号的，即主机如何启动 A/D 转换（体现为对 START 和 ALE 引脚的控制），如何判断 A/D 完成一次模数转换（体现为是否读取 EOC 标志，如何读取），如何读入并存放转换结果的。下面仅介绍两种典型的接口电路。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查询方式读取 A/D 转换数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202140055009.png&#34; alt=&#34;image-20211202140055009&#34; /&gt;&lt;/p&gt;
&lt;p&gt;组成：PC 总线、ADC0809、74LS138、74LS02、74LS126 三态缓冲器组成。启动转换的板址 PA = 01000000，每一路的口址分别为 000~111，故 8 路转换地址为 40H~47H。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		MOV   BX，BUFF    ；置采样数据区首址
		MOV   CX，08H     ；８路输入
START：OUT   PA，AL       ；启动A/D转换
REOC： IN     AL，PB      ；读EOC
		RCR   AL，01      ；判断EOC
		JNC   REOC        ；若EOC=0，继续查询
		IN     AL，PA  ；若EOC=1，读A/D转换数
		MOV  [BX]，AL    ；存A/D转换数
		INC    BX        ；存A/D转换数地址加1
		INC    PA         ；接口地址加1
		LOOP  START       ；循环
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现说明&lt;strong&gt;启动转换过程&lt;/strong&gt;：首先主机执行一条启动第一路的输出指令，把 AL 中的数据送到地址为 PA 的接口电路中，此时 AL 中的内容无关紧要，而地址 PA = 40H，使 138 译码器的 Y&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;(上划线) 输出一个低电平，连同 OUT 输出指令造成的 IOW (上划线) 低电平，从而使非与门 02 (3) 产生脉冲信号到引脚 ALE 和 START，ALE 的上升沿将通道地址代码 000 锁存并进行译码，选通模拟开关中的第一路 V&amp;lt;sub&amp;gt;IN0&amp;lt;/sub&amp;gt;，使该路模拟量进入到 A/D 转换器中；同时 START 的上升沿将 ADC0809 中的逐位逼近寄存器 SAR 清零，下降沿启动 A/D 转换，即在时钟的作用下，逐位逼近的 A/D 转换过程开始。&lt;/p&gt;
&lt;p&gt;接着，主机&lt;strong&gt;查询&lt;/strong&gt;转换结束信号 EOC 的状态，通过执行输入指令，把地址为 PB 的转换接口电路的数据读入 AL，此时地址 PB = 01001000 (48H)，使 74LS138 译码器的 Y&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;(上划线) 输出一个低电平，连同 IN 输入指令造成 IOR (上划线) 低电平，从而使非与门 02 (1) 产生脉冲信号并选通 126 三态缓冲器，使 EOC 电平状态出现在数据线 D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 上。然后将读入的 8 位数据进行循环右移，以判断 EOC 的电平状态。如果 EOC 为 “0”，表示 A/D 转换正在进行，程序再跳回 REOC，反复查询；当 EOC 为 “1”，表示 A/D 转换结束。&lt;/p&gt;
&lt;p&gt;然后，主机执行一条输出指令，把接口地址为 PA 的转换数据读入 AL，Y&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;(上划线) 输出一个低电平，连同 IN 输入指令造成 IOR (上划线) 低电平，从而使非与门 02 (1) 产生脉冲信号，并选通 126 三态缓冲器判断，使 EOC 电平状态出现在数据线 D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 上。然后将读入的 8 位数据进行带进位的循环右移，以判断 EOC 状态。如果 EOC 为 “0”，表示 A/D 转换正在进行，程序跳回 REOC，反复查询；当 EOC 为 “1”，表示 A/D 转换结束。&lt;/p&gt;
&lt;p&gt;接下来，主机执行一条输入指令，把接口地址为 PA 的转换数据读入 AL 中，Y&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;(输出一个低电平)，连同 IN 输入指令造成 IOR (低电平)，从而使非与门 02 (2) 产生脉冲信号，即产生输出允许信号到 OE，使 ADC0809 内部的三态输出锁存缓冲器释放转换到数据线上，并被读入到 AL 中。&lt;/p&gt;
&lt;p&gt;接下来，把 A/D 转换器数据存入寄存器 BX 所指的数据区首地址 0000H 中，数据区地址加 1，为第 2 路 A/D 转换数据的存放做准备；接口地址加 1，准备接通第 2 路模拟信号；计数器减 1，不为 0 则返回到 START，继续进行下一路的 A/D 转换。如此循环，直至完成 8 路 A/D 转换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非与门 02 (3) 和 IOW (上划线) 控制 A/D 转换器启动；通过三态缓冲器读入 EOC 状态以判断是否转换结束。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定时方式读 A/D 转换数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202150253618.png&#34; alt=&#34;image-20211202150253618&#34; /&gt;&lt;/p&gt;
&lt;p&gt;它与查询方式的不同仅仅在于 A/D 转换后，无需查询 EOC 引脚状态而只&lt;strong&gt;需要等待转换时间，然后读取 A/D 转换数&lt;/strong&gt;。因此，硬件电路可以取消 126 三态缓冲器及其控制电路，软件上也相应地去掉查询 EOC 电平地 REOC 程序段，而换之以调用定时子程序 (CALL DELAY) 即可。&lt;/p&gt;
&lt;p&gt;这里定时时间应略大于 ADC0809 的实际转换时间。图中 ADC0809 的 CLOCK 引脚 (输入时钟频率) 为 640kHz，因此转换时间为 8×8 个时钟周期，相当于 100us。&lt;/p&gt;
&lt;p&gt;显然，定时方式比查询方式简单，但前提是必须预先精确地知道 A/D 转换芯片完成一次 A/D 转换所需要的时间。&lt;/p&gt;
&lt;p&gt;这两种方法的共同特点是硬件、软件接口简单，但在&lt;strong&gt;转换期间独占了 CPU 时间&lt;/strong&gt;，好在这种逐位逼近式 A/D 转换时间只是在微秒数量级。当选用双积分式 A/D 转换器时，因其转换时间在毫秒级，因此采用&lt;strong&gt;中断法&lt;/strong&gt;读 A/D 转换数的方式更为适宜。因此，在设计数据采集系统时，究竟采用何种接口方式要根据 A/D 转换器芯片而定。&lt;/p&gt;
&lt;p&gt;8 位 A/D 转换器的分辨率 0.0039，转换精度在 0.4% 以下，这对一些精度要求较高的控制系统时不够的，因此要采用更多位的 A/D 转换器，如 10 位、12 位、14 位等 A/D 转换器。下面以 AD574A 为例介绍 12 位 A/D 转换器及其接口电路。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;353-ad574a芯片及其接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#353-ad574a芯片及其接口电路&#34;&gt;#&lt;/a&gt; 3.5.3 AD574A 芯片及其接口电路&lt;/h3&gt;
&lt;h4 id=&#34;1ad574a芯片介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1ad574a芯片介绍&#34;&gt;#&lt;/a&gt; 1.AD574A 芯片介绍&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;AD574A 是一种高性能的 12 位&lt;strong&gt;逐位逼近式 A/D 转换器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;分辨率为 1 / 2&amp;lt;sup&amp;gt;12&amp;lt;/sup&amp;gt;≈0.024%&lt;/li&gt;
&lt;li&gt;转换时间为 25us，适合于在高精度快速采样系统中使用&lt;/li&gt;
&lt;li&gt;内部结构大体于 ADC0809 类似，由 12 位 A/D 转换器、控制逻辑、三态输出锁存缓冲器与 10V 基准电压源构成，可直接与主机数据总线连接，但只能输入一路模拟量。&lt;/li&gt;
&lt;li&gt;AD574A 也采用 28 脚双立式直插式封装。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202152637664.png&#34; alt=&#34;image-20211202152637664&#34; /&gt;&lt;/p&gt;
&lt;p&gt;10V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt;、20V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt;、BIP、OFF：模拟电压信号输入端。单极性应用时，将 BIP OFF 接 0V，双极性时接 10V。量程可以是 10V，也可以是 20V。输入信号在 10V 范围内变化时，将输入信号接至 10V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt;；在 20V 变化时，接至 20V&amp;lt;sub&amp;gt;IN&amp;lt;/sub&amp;gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202153525037.png&#34; alt=&#34;image-20211202153525037&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202153551701.png&#34; alt=&#34;image-20211202153551701&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202153557601.png&#34; alt=&#34;image-20211202153557601&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2ad574接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2ad574接口电路&#34;&gt;#&lt;/a&gt; 2.AD574 接口电路&lt;/h4&gt;
&lt;p&gt;12 位 A/D 转换器 AD574A 与 PC 总线的接口有多种方式。既可以与 PC 总线的 16 位数据总线直接相连，构成简单的 12 位数据采集系统；也可以只占用 PC 总线的低 8 位数据总线，将转换后的 12 位数字量分两次读入主机，以节省硬件投入。&lt;/p&gt;
&lt;p&gt;同样，在 A/D 转换器与 PC 总线之间的数据传送上也可以使&lt;strong&gt;用程序查询、软件定时或中断控制&lt;/strong&gt;等多种方法。&lt;strong&gt;由于 AD574A 的转换速度很高，一般多采用查询或定时方式&lt;/strong&gt;。其接口电路及其程序参见下一节。&lt;/p&gt;
&lt;h2 id=&#34;36-ad转换模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-ad转换模板&#34;&gt;#&lt;/a&gt; 3.6 A/D 转换模板&lt;/h2&gt;
&lt;p&gt;A/D 转换模板也需要遵循 I/O 模板的通用性原则：符合总线标准，接口地址可选以及输入方式可选。输入方式可选主要是指模板既可以接受单端输入信号，也可以接受双端差动输入信号。&lt;/p&gt;
&lt;p&gt;A/D 转换模板结构组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I/O 电气接口：&lt;/p&gt;
&lt;p&gt;完成电平转换、滤波、隔离等信号调理作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 功能部分：实现采样、放大、模 / 数转换等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总线接口：完成数据缓冲、地址译码等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202155345077.png&#34; alt=&#34;image-20211202155345077&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 AD574A 芯片中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;STS (上划线)：转换结束信号，高电平表示正在转换，低电平表示已转换完毕。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CE：片能用信号，输入，高电平有效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CS (上划线)：片选信号，输入，低电平有效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R/C (上划线)：读 / 转换信号，输入，高电平时读入 A/D 转换数据，低电平时启动 A/D 转换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12 / 8 (低电平)：数据输出方式选择信号，输入，高电平时输出 12 位数据，低电平时与 A&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 信号配合输出高 8 位或低 4 位数据。12 / 8 (低电平) 不能用 TTL 控制，必须直接接至 + 5V (引脚 1) 或数字 (引脚 15).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;：字节信号，在转换状态，A&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为低电平可使 AD574A 进行 12 位转换，A&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为高电平可使 AD574A 进行 8 位转换。在读数据状态，如果 12/8 (上划线) 为低电平，A&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为低电平时，则输出高 8 位数，而 A&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为高电平时，则输出低 4 位数；如果 12 / 8 (上划线) 为高电平，则 A&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 状态不起作用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CE、CS (上划线)、R/C (上划线)、12 / 8 (低电平)、A&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 各控制信号组合作用表：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202205122755.png&#34; alt=&#34;image-20211202205122755&#34; /&gt;&lt;/p&gt;
&lt;p&gt;模板采集数据的过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通道选择：将模拟量输入通道号写入 8255A 端口 C 低 4 位 (PC3~PC0)，可依次选通 8 路。&lt;/li&gt;
&lt;li&gt;采样保持控制。把 AD574A 的 STS (上划线) 信号通过反相器连接到 LF398 的信号采样保持端，当 AD574A 未转换期间或转换结束时 STS (上划线) = 0，使 LF398 处于采样状态，当 AD574A 转换期间 STS (上划线) = 1，使 LF398 处于保持状态。&lt;/li&gt;
&lt;li&gt;启动 AD574A 进行 A/D 转换。通过 8255A 的端口 PC6~PC4 输出控制信号，启动 AD574A。&lt;/li&gt;
&lt;li&gt;查询 AD574A 是否转换结束。读 8255A 的端口 A，查询 STS (上划线) 是否已由高电平转换为低电平。&lt;/li&gt;
&lt;li&gt;读取转换结果：若 STS (上划线) 已由高电平转换为低电平，则读取 8255A 端口 A、B，便可以得到 12 位转换结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202161831658.png&#34; alt=&#34;image-20211202161831658&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;考试要求-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-2&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;不考程序汇编、不考 AD 转换器电路设计，只是分析电路&lt;/p&gt;
&lt;p&gt;三类 AD 转换器，抽一类出来分析阐述&lt;/p&gt;
&lt;h2 id=&#34;课后习题-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题-2&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h2&gt;
&lt;p&gt;1. 画图说明模拟量输入通道的功能、各组成部分及其作用？&lt;/p&gt;
&lt;p&gt;2. 分析说明 8 路模拟开关 CD4051 的结构原理图，结合真值表设 计出两个 CD4051 扩展为一个 8 路双端模拟开关的示意图。&lt;/p&gt;
&lt;p&gt;3．什么叫周期采样？采样时间？采样周期？（区分清楚）&lt;/p&gt;
&lt;p&gt;4．分析图 3-9 采样保持器的原理电路及工作过程。&lt;/p&gt;
&lt;p&gt;5．简述逐位逼近式、双积分式、电压 / 频率式的 A/D 转换原理。&lt;/p&gt;
&lt;p&gt;6．结合图 3-14 与图 3-15，分析说明 ADC0809 的结构组成及其引脚作用。&lt;/p&gt;
&lt;p&gt;7．试分析图 3-16、图 3-17 ADC0809 接口电路的启动、转换、查询或定时读入数据的工作过程。比较说明这两种接口电路在硬软件上的异同点。&lt;/p&gt;
&lt;p&gt;8．分析说明图 3-19 的 8 路 12 位 A/D 转换模板的工作原理。&lt;/p&gt;
&lt;h1 id=&#34;第4-章-数字量输入输出通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第4-章-数字量输入输出通道&#34;&gt;#&lt;/a&gt; 第 4 章 数字量输入 / 输出通道&lt;/h1&gt;
&lt;h2 id=&#34;引言-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-2&#34;&gt;#&lt;/a&gt; 引言&lt;/h2&gt;
&lt;p&gt;在微机控制系统中，除了要处理模拟量信号以外，还要处理&lt;strong&gt;数字信号&lt;/strong&gt;，包括开关信号、脉冲信号。如开关触点的闭合和断开，指示灯的亮和灭，继电器或接触器的吸合和释放，马达的启动和停止，晶闸管的通和断，阀门的打开和关闭，仪器仪表的 BCD 码，以及脉冲信号的计数和定时等等 。&lt;/p&gt;
&lt;h2 id=&#34;41-光电耦合隔离技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-光电耦合隔离技术&#34;&gt;#&lt;/a&gt; 4.1 光电耦合隔离技术&lt;/h2&gt;
&lt;p&gt;计算机控制系统的输入信号来自于现场的信号传感器，输出信号又送回现场的执行器。因此，现场的电磁干扰会通过输入 / 输出通道串入到计算机系统中，这就需要采用通道隔离技术。最常用的方法是光电耦合隔离技术。&lt;/p&gt;
&lt;h3 id=&#34;411-光电耦合隔离器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#411-光电耦合隔离器&#34;&gt;#&lt;/a&gt; 4.1.1 光电耦合隔离器&lt;/h3&gt;
&lt;p&gt;光电耦合隔离器的几种类型：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202171611623.png&#34; alt=&#34;image-20211202171611623&#34; /&gt;&lt;/p&gt;
&lt;p&gt;现以三极管型光电耦合隔离器为例来说明它的结构原理 ：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMTcxNzM5MTM2LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202171739136.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211202171739136&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;三极管型光耦器件的发光二极管和光敏三极管封装在一个管壳内，发光二极管为光耦隔离器的信号输入端，光敏三极管的集电极和发射极为光耦隔离器的输出端，它们之间的信号传递是依靠发光二极管在信号电压的控制下发光，传送给光敏三极管的输入、输出特性，即存在着&lt;strong&gt;截止区、饱和区与线性区&lt;/strong&gt;三部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用光耦隔离器的开关特性（光敏三极管工作在截止区、饱和区）可传送数字信号而隔离电磁干扰&lt;/strong&gt;，简称对数字信号进行隔离。例如：在数字量输入 / 输出通道中，以及在模拟量输入通道中的 A/D 转换器与 CPU 之间或模拟量输出通道中的 CPU 与 D/A 转换器之间的数字信号传送，都可以用光耦的这种开关特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用光耦隔离器的线性放大区 (光敏三极管工作在线性区)，可传送模拟信号而隔离电磁干扰&lt;/strong&gt;，简称对模拟信号进行隔离。例如：在现场，传感器与 A/D 转换器或 D/A 转换器与现场执行器之间的模拟信号传输，可利用光耦的这种线性区对模拟信号进行隔离。&lt;/p&gt;
&lt;p&gt;光耦的这两种隔离方法各有优点。模拟信号隔离方法的优点是：使用少量的光耦，成本低；缺点是：调试困难，如果光耦挑选得不合适，会影响 A/D 或 D/A 转换的精度和线性度。&lt;/p&gt;
&lt;p&gt;数字信号隔离方法优点是：调试简单，不影响系统的精度和线性度；缺点是：使用较多的光耦器件，成本较高。但是因为光耦器件越来越廉价，数字信号隔离方法的优势凸显出来，因而在工程中使用更多。&lt;/p&gt;
&lt;p&gt;需要注意的是，用于驱动发光管的电源与驱动光敏三极管的电源不应是共地的同一个电源，必须分开，单独供电，才能有效避免输出端与输出端相互之间的反馈和干扰；另外，发光二极管的动态电阻很小，也可以抑制系统内外的噪声干扰。因此，利用光耦隔离器可以有效隔离电磁场的干扰。&lt;/p&gt;
&lt;h3 id=&#34;412-光电耦合隔离电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#412-光电耦合隔离电路&#34;&gt;#&lt;/a&gt; 4.1.2 光电耦合隔离电路&lt;/h3&gt;
&lt;p&gt;分类：数字量同相和数字量相反传递两种。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202174627736.png&#34; alt=&#34;image-20211202174627736&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同相传递：光耦的输入输出同相，即输入为低（高）输出为低（高）&lt;/p&gt;
&lt;p&gt;反向传递：光耦的输入输出反相，即输入为高（低）输出为高。&lt;/p&gt;
&lt;h2 id=&#34;42-数字量输入通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-数字量输入通道&#34;&gt;#&lt;/a&gt; 4.2 数字量输入通道&lt;/h2&gt;
&lt;p&gt;数字量输入通道（DI 通道）的任务：把生产过程中的数字信号转换成计算机易于接受的形式。&lt;/p&gt;
&lt;p&gt;信号调理电路：虽然都是数字信号，不需进行 A/D 转换，但对通道中可能引入的各种干扰必须采取相应的技术措施，即在外部信号与单片机之间要设置输入信号调理电路。&lt;/p&gt;
&lt;h3 id=&#34;421-开关输入电流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#421-开关输入电流&#34;&gt;#&lt;/a&gt; 4.2.1 开关输入电流&lt;/h3&gt;
&lt;p&gt;开关信号：凡在电路中起到通断作用的各种按钮、触点、开关，其端子引出均统称开关信号。&lt;/p&gt;
&lt;p&gt;在开关输入电路中，主要考虑信号调理技术，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电平转换：用电阻分压法把电流信号转换为电压信号。&lt;/li&gt;
&lt;li&gt;RC 滤波：用 RC 滤波器滤出高频干扰&lt;/li&gt;
&lt;li&gt;过电压保护：用稳压管和限流电阻作过电压保护；用稳压管或压敏电阻把瞬态尖峰电压钳位在安全电平上。&lt;/li&gt;
&lt;li&gt;反电压保护：串联一个二极管防止反极性电压输入。&lt;/li&gt;
&lt;li&gt;光电隔离：用光耦隔离器实现计算机与外部的完全电隔离。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202192206617.png&#34; alt=&#34;image-20211202192206617&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点画线右边是由开关 S 与电源组成的外部电路。(a) 为直流输入电路，(b) 为直流输入电路。&lt;/p&gt;
&lt;p&gt;交流电比直流电多一个降压电容和整流桥块，可把高压交流（如 380V (AC)）变换为电压直流（如 5V (AC)）。开关 S 的状态经 RC 滤波、稳压管 VD&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 钳位保护、电阻 R&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 限流、二极管 VD&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 防止反极性电压输入以及光耦隔离等措施后送至输入缓冲器，主机通过执行输入指令便可以读取开关 S 的状态。比如，当开关 S 闭合时，输入回路由电流流过，光耦中的发光二极管发光，光敏管导通，数据线上为低电平，即输入信号为 “0” 对应于开关 S 闭合；反之，开关 S 断开，光耦中的发光二极管无电流流过，光敏管截止，数据线上为高电平，即输入信号为 “1” 对应于外电路开关 S 的断开。&lt;/p&gt;
&lt;h3 id=&#34;422-脉冲计数器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#422-脉冲计数器&#34;&gt;#&lt;/a&gt; 4.2.2 脉冲计数器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202193411935.png&#34; alt=&#34;image-20211202193411935&#34; /&gt;&lt;/p&gt;
&lt;p&gt;有些用于检测流量、转速的传感器发出的是脉冲频率信号，对于大量程可以设计一种定时计数输入接口，即在一定的时间内统计输入的脉冲个数，然后根据传感器的比例系数换算出所检测的物理量。&lt;/p&gt;
&lt;p&gt;上图为一种定时计数输入接口电路，传感器发出的脉冲频率信号，经过简单的信号调理，引到 8253/8254 芯片的计数通道 1 的 CLK&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 口。8254 是具有 3 个 16 位计数器通道的可编程计数器 / 定时器。计数通道 0 工作于模式 3，CLK&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 用于接收系统时钟脉冲，OUT&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 输出一个周期位系统时钟脉冲 N 倍（N 为通道 0 的计数初值）的连续方波脉冲，其高、低电平时段是计数通道 1 的采样时间和采样间隔时间，分别记为 T&amp;lt;sub&amp;gt;S&amp;lt;/sub&amp;gt;、T&amp;lt;sub&amp;gt;W&amp;lt;/sub&amp;gt;；计数通道 1 和通道 2 均选为工作模式 2，且 OUT&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 串接到 CLK&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;，使两者构成一个计数长度 2&amp;lt;sup&amp;gt;32&amp;lt;/sup &amp;gt; 的脉冲计数器，以对 T&amp;lt;sub&amp;gt;S&amp;lt;/sub &amp;gt; 内的输入脉冲计数。&lt;/p&gt;
&lt;p&gt;如果获得 T&amp;lt;sub&amp;gt;S&amp;lt;/sub &amp;gt; 时间内的输入脉冲个数为 n，则单位时间内的脉冲个数即脉冲频率为 n/T&amp;lt;sub&amp;gt;S&amp;lt;/sub&amp;gt;，从而可换算出介质的流量或电机的转速值。比如，发出脉冲信号的是涡轮流量计或磁电式速度传感器，它们的脉冲当量（一个脉冲相当的流量或转速）为 K，则介质的流量或电机的转数就为 K * n / T&amp;lt;sub&amp;gt;S&amp;lt;/sub&amp;gt;。&lt;/p&gt;
&lt;h2 id=&#34;43-数字量输出通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-数字量输出通道&#34;&gt;#&lt;/a&gt; 4.3 数字量输出通道&lt;/h2&gt;
&lt;h3 id=&#34;引言-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-3&#34;&gt;#&lt;/a&gt; 引言&lt;/h3&gt;
&lt;p&gt;数字量输出通道简称 DO 通道。&lt;/p&gt;
&lt;p&gt;任务：把计算机输出的微弱的数字信号转换成能对生产过程进行控制数字驱动信号。&lt;/p&gt;
&lt;p&gt;常用电路：三极管驱动输出电路、继电器输出驱动电路、晶闸管输出驱动电路、固态继电器输出驱动电路等。&lt;/p&gt;
&lt;p&gt;选择：根&lt;strong&gt;据现场负荷的不同&lt;/strong&gt;，如指示灯、继电器、接触器、电机、阀门等，可以选用不同的功率放大器件构成不同的开关量驱动输出通道。&lt;/p&gt;
&lt;h3 id=&#34;431-三极管驱动电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#431-三极管驱动电路&#34;&gt;#&lt;/a&gt; 4.3.1 三极管驱动电路&lt;/h3&gt;
&lt;p&gt;对于&lt;strong&gt;低压&lt;/strong&gt;情况下的小电流开关量，用功率三极管就可以作为开关驱动组件，其&lt;strong&gt;输出电流就是输入电流与三极管增益的乘积&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;普通三极管驱动电路&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjAwMTI2NTc1LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202200126575.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211202200126575&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;当驱动电流只有&lt;strong&gt;几毫安&lt;/strong&gt;时，如驱动发光二极管、小功率继电器等器件，只要采用一个普通的功率三极管就能构成驱动电路。&lt;/p&gt;
&lt;p&gt;上图为驱动 LED 数码管的小功率三极管导通，当 CPU 数据线 D&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 输出数字 “0” 即低电平时，经 7406 反相锁存器变为高电平，使 NPN 型三极管导通，集电极电流驱动 LED 数码管发光。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;达林顿驱动电路&lt;/p&gt;
&lt;p&gt;当驱动电流需要达到&lt;strong&gt;几百毫安&lt;/strong&gt;时，如驱动中功率继电器，电磁开关等装置，输出电路必须采取多级放大或提高三极管增益的办法。&lt;/p&gt;
&lt;p&gt;构成：多对两个三极管组成的达林顿复合管构成&lt;/p&gt;
&lt;p&gt;特点：具有高阻抗、高增益、输出功率大及保护措施完善的特点，同时多对复合管适用于计算机控制系统中的多路负荷。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202201000869.png&#34; alt=&#34;image-20211202201000869&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjAxMTA5NzY3LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202201109767.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211202201109767&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;MC1416 内含有 7 对达林顿复合管，每个复合管的集电极电流可达 500mA，截止时能承受 100V 电压，其输入 / 输出端均有钳位二极管，输出钳位二极管 VD&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 抑制高电位上发生的正向过冲，VD&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、VD&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 可抑制低电平上的负向过冲。&lt;/p&gt;
&lt;p&gt;对于达林顿阵列驱动电路，当 CPU 数据线 D&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 输出数字 “0” 即低电平时，经过 7406 反相锁存器变为高电平，使达林顿复合管导通，产生的几百毫安集电极电流足以驱动负载线圈，而且利用符合管内的保护二极管构成了负荷线圈断电时产生的反向电动势的泄流回路。&lt;/p&gt;
&lt;h3 id=&#34;432-继电器驱动电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#432-继电器驱动电路&#34;&gt;#&lt;/a&gt; 4.3.2 继电器驱动电路&lt;/h3&gt;
&lt;p&gt;电磁继电器主要由线圈、铁芯、衔铁和触点等部件组成，简称继电器，它分为&lt;strong&gt;电压继电器、电流继电器、中间继电器&lt;/strong&gt;等几种类型。&lt;strong&gt;继电器方式的开关量输出是一种最常用的输出方式，通过弱电控制外界交流或直流的高电压、大电流设备。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjAzNDUyMDkyLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202203452092.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211202203452092&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;继电器驱动电路的设计要根据所用所用的继电器线圈的吸合电压和电流而定，** 控制电流一定要大于继电器的吸合电流才能使继电器可靠地工作。** 上图为经光耦隔离器的继电输出驱动电路，当 CPU 数据线 D&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 输出数字 “1” 即高电平时，经 7406 反相驱动器变为低电平，光耦隔离器的发光二极管导通且发光，使光敏三极管导通，继电器线圈 KA 得电，动合触电闭合，从而驱动大型符合设备。&lt;/p&gt;
&lt;p&gt;由于继电器线圈是电感性负载，当电路突然关断时，会出现较高的电感性浪涌电压，为了保护驱动器件，应在继电器线圈两端并联一个阻尼二极管，为电感线圈提供一个电路泄放回路。&lt;/p&gt;
&lt;h3 id=&#34;443-晶闸管驱动电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#443-晶闸管驱动电路&#34;&gt;#&lt;/a&gt; 4.4.3 晶闸管驱动电路&lt;/h3&gt;
&lt;p&gt;晶闸管又称可控硅 SCR，是一种大功率的半导体器件，&lt;strong&gt;具有用小功率控制大功率、开关无触点&lt;/strong&gt;等特点，在交流 / 直流电机调速系统、调功系统、随动系统中应用广泛。&lt;/p&gt;
&lt;p&gt;分类：单向晶闸管、双向晶闸管&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjA0ODA1NDk2LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202204805496.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211202204805496&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;单向晶闸管：有阳极 A、阴极 K、控制极（门极）G 三个极。当阳、阴极之间加正向电压，控制极与阴极两端也施加正向电压使控制极电流增大到触发电流时，晶闸管由截止变为导通；只有在阳极、阴极间施加反向电压或阳极电流减小到维持电流以下，晶闸管才由导通变为截止。单向晶闸管具有单向导电功能 **，在控制系统中多用于直流大电流场合，也可在交流系统中用于大功率整流回路 **。&lt;/p&gt;
&lt;p&gt;双向晶闸管也叫三端双向可控硅，在结构上相当于两个单向晶闸管&lt;strong&gt;反向并联&lt;/strong&gt;，但共享一个控制极。当两个电极 T&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、T&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 之间的电压大于 1.5V 时，不论极性如何，都可以利用控制极 G 触发电流控制其导通。&lt;strong&gt;因此特别适用于交流大电流场合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjEwNzUwOTYwLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202210750960.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211202210750960&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;晶闸管常用于高电压大电流的负载，不适宜与 CPU 直接相连，在实际使用时要采用隔离措施。上图为经光耦隔离的双向晶闸管输出驱动电路，当 CPU 数据线 D&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 输出数字 “1” 时，经 7406 反相变为低电平，发光二级管导通，使光敏晶闸管导通，导通电流再触发双向晶闸管导通，从而驱动大型交流负荷设备 R&amp;lt;sub&amp;gt;L&amp;lt;/sub&amp;gt;。&lt;/p&gt;
&lt;h3 id=&#34;434-固态继电器驱动电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#434-固态继电器驱动电路&#34;&gt;#&lt;/a&gt; 4.3.4 固态继电器驱动电路&lt;/h3&gt;
&lt;p&gt;固态继电器 SSR：是一种新型的无触点开关的电子继电器，它利用电子技术实现了控制回路与负载回路之间的电隔离和信号耦合，而且没有任何可动部件或触电，却能实现电磁继电器的功能。&lt;/p&gt;
&lt;p&gt;优点：体积小，开关速度快，无机械噪声、无抖动和回跳、寿命长。1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202211838862.png&#34; alt=&#34;image-20211202211838862&#34; /&gt;&lt;/p&gt;
&lt;p&gt;固态继电器是一个四端组件，有 2 个输入端、2 个输出端，其内部结构类似于晶闸管输出驱动电路。上图为其结构原理图，由五部分组成。&lt;/p&gt;
&lt;p&gt;光耦隔离的作用是在输入与输出之间起信号传递作用，同时使两端在电气上完全隔离；控制触发电路是为后级提供一个触发信号，使电子开关（三极管或晶闸管）能可靠地导通；电子开关电路用来接通或关断直流或交流负载电源；吸收保护电路的功能是防止电源的尖峰和浪涌对开关电路产生干扰造成开关的误动作或损害，一般由 RC 串联网络和压敏电阻组成；零压检测是为交流型 SSR 过零触发而设置的。&lt;/p&gt;
&lt;p&gt;SSR 的输入端与晶体管、TTL、CMOS 电路兼容，输出端利用器件内的电子开关来接通和断开负载。工作时只要在输入端施加一定的弱电信号，就可以控制输出端大电流负载的通断。&lt;/p&gt;
&lt;p&gt;SSR 的输出端可以是直流，也可以是交流，分别称为直流型 SSR 和交流型 SSR。** 直流型 SSR 内部的开关组件为功率三极管，交流型 SSR 内部的开关组件为双向晶闸管。** 而交流 SSR 按控制触发方式不同又可分为过零型和移相型两种，其中应用最广泛的是过零型。&lt;/p&gt;
&lt;p&gt;过零型交流 SSR 是指当输入端加入控制信号后，需等待负载电源电压过零时，SSR 才为导通状态；而断开控制信号后，也要等待交流电压过零时，SSR 才为断开状态。移相型交流 SSR 的断开条件同过零型交流 SSR，但其导通条件简单，只要加入控制信号，不管负载电源相位如何，立即导通。&lt;/p&gt;
&lt;p&gt;直流型 SSR 的输入控制信号与输出完全同步。直流型 SSR 主要用于直流大功率控制。一般取输入电压为 4V~32V，输入电流为 5mA~10mA。它的输出端为晶体管，输出工作电压为 30V~180V。&lt;/p&gt;
&lt;p&gt;交流型 SSR 主要用于交流大功率控制。一般输入电压为 4V~32V，输出电流小于 500mA。输出端为双向晶闸管，一般额定电流在 1A~500A 范围内，电压多为 380V 或 220V。下图为一种常用的固态继电器驱动电路，当数据线 D&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 输出数字 “0” 时，经 7406 反相变为高电平，使 NPN 型三极管导通，SSR 输入端得电，输出端接通大型交流负荷设备 R&amp;lt;sub&amp;gt;L&amp;lt;/sub&amp;gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203125639042.png&#34; alt=&#34;image-20211203125639042&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际使用中，要特别注意固态继电器的过电流与过电压保护以及浪涌电流的承受等工程问题 **，在选用固态继电器的额定工作电流与额定工作电压时，一定要远大于实际负载的电流和电压 **，而且输出驱动电路中仍要考虑增加阻容吸收组件。&lt;/p&gt;
&lt;h2 id=&#34;44-dido模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-dido模板&#34;&gt;#&lt;/a&gt; 4.4 DI/DO 模板&lt;/h2&gt;
&lt;p&gt;把上述数字量输入通道或数字量输出通道设计在一块模板上，就称为 DI 模板或 DO 模板。图中含有 DI 通道和 DO 通道的 PC 总线数字量 I/O 模板的结构框图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203130246484.png&#34; alt=&#34;image-20211203130246484&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PC 总线接口逻辑部分组成：8 位数据缓冲器、基址译码器、输入片址译码、输出片址译码。&lt;/p&gt;
&lt;p&gt;I/O 逻辑接口部分组成：输入缓冲器、输出缓冲器。其中，输入缓冲器起着对外部输入信号的缓冲、加强和选通作用；输出缓冲器锁存 CPU 输出的数据或控制信号，供外部设备使用。I/O 缓冲功能可以用可编程接口如 8255A 构成，也可以用 74LS240、74LS244、74LS373、74LS273 等芯片实现。&lt;/p&gt;
&lt;p&gt;I/O 电气接口部分的功能主要是：电平转换、滤波、保护、隔离、功率驱动等。&lt;/p&gt;
&lt;p&gt;各种数字量 I/O 模板的前两部分大同小异不同的主要在于 I/O 电气接口部分，即输入信号的调理和输出信号的驱动，这是由生产过程的不同需求所决定的。&lt;/p&gt;
&lt;h2 id=&#34;考试要求-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-3&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;主要考选择判断，概念了解&lt;/p&gt;
&lt;p&gt;不考大题&lt;/p&gt;
&lt;h2 id=&#34;课后习题-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题-3&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;画图分析说明三极管型光电耦合隔离器的工作原理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析说明光耦隔离器的两种特性及其隔离电磁干扰的作用机理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结合图 4-4，简述信号调理电路的构成及其各元器件的作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析说明图 4-5 脉冲计数电路的工作过程及其用途。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简述数字量输出通道的功能及其常用的输出驱动电路。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对比分析说明三极管输出驱动与继电器输出驱动电路的异同点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对比分析说明晶闸管输出驱动与固态继电器输出驱动电路的异同点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结合图 4-14，简述数字量 I/O 模板电路的结构组成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;第5章-键盘及其接口技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第5章-键盘及其接口技术&#34;&gt;#&lt;/a&gt; 第 5 章 键盘及其接口技术&lt;/h1&gt;
&lt;h2 id=&#34;引言-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-4&#34;&gt;#&lt;/a&gt; 引言&lt;/h2&gt;
&lt;p&gt;键盘是一种最常见的输入设备，它是一组按键的集合，从功能上可分为&lt;strong&gt;数字键和功能键&lt;/strong&gt;两种，作用是输入数据与命令，查询和控制系统的工作状态，实现简单的人机对话。&lt;/p&gt;
&lt;p&gt;键盘接口电路可分为&lt;strong&gt;编码键盘和非编码键盘&lt;/strong&gt;两种类型。&lt;/p&gt;
&lt;p&gt;编码键盘采用硬件编码电路来实现键的编码，每按下一个键，键盘便自动产生一个按键代码。编码键盘主要有 BCD 码键盘、ASCII 码键盘等类型。&lt;/p&gt;
&lt;p&gt;非编码键盘仅提供按键的通或断状态，按键代码的产生与识别由软件完成。&lt;/p&gt;
&lt;p&gt;编码键盘的特点是使用方便，键盘码产生&lt;strong&gt;速度快，占用 CPU 时间少&lt;/strong&gt;，但对按键的检测与抖动干扰的消除是靠硬件电路来完成的，因而硬件电路复杂、成本高。而非编码键盘硬件电路简单，成本低，&lt;strong&gt;但占用 CPU 时间较长&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;51-键盘输入电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51-键盘输入电路&#34;&gt;#&lt;/a&gt; 5.1 键盘输入电路&lt;/h2&gt;
&lt;p&gt;计算机控制系统中的键盘通常采用&lt;strong&gt;触点式按键&lt;/strong&gt;，触点式按键是利用机械触点的闭合或断开来输入状态信息。&lt;/p&gt;
&lt;h3 id=&#34;511-键盘的抖动干扰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#511-键盘的抖动干扰&#34;&gt;#&lt;/a&gt; 5.1.1 键盘的抖动干扰&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203141325555.png&#34; alt=&#34;image-20211203141325555&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于机械触点的弹性振动，按键在按下时不会马上稳定地接通，在弹起时也不能一下子完全地断开，因而在按键闭合和断开的瞬间均会出现一连串的抖动，这种抖动称为按键抖动。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如上图，当按下按键时会产生前沿抖动，当按键弹起时会产生后沿抖动。这是所有机械触点式按键在状态输出时的共性问题，&lt;strong&gt;抖动时间长短取决于按键的机械特性与操作状态&lt;/strong&gt;，一般 10ms~100ms，这是键处理设计时要考虑的一个重要参数。&lt;/p&gt;
&lt;h3 id=&#34;512-抖动干扰的消除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#512-抖动干扰的消除&#34;&gt;#&lt;/a&gt; 5.1.2 抖动干扰的消除&lt;/h3&gt;
&lt;p&gt;按键的抖动会导致按一次键产生的开关状态被 CPU 误读几次。为了使 CPU 能正确地读取按键状态，必须在按键闭合或断开时，消除产生的前沿或后沿抖动，去抖动的方法有：硬件方法、软件方法&lt;/p&gt;
&lt;h4 id=&#34;1硬件方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1硬件方法&#34;&gt;#&lt;/a&gt; 1. 硬件方法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;设计一个滤波延时电路或单稳态电路&lt;/strong&gt;等硬件电路来避开按键的抖动时间。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMTQyNDA2Njk3LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203142406697.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211203142406697&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;上图由 R&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 和 C 组成的滤波延时电路，设置在按键 S 与 CPU 数据线 D&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 之间。按键 S 未按下时，电容两端电压为 0，即非与门 V&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 为 0，输出 V&amp;lt;sub&amp;gt;O&amp;lt;/sub &amp;gt; 为 1。当 S 按下时，由于 C 两端电压不能突变，充电电压 V&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 在充电时间内未达到非门的开启电压，输出 V&amp;lt;sub&amp;gt;O&amp;lt;/sub &amp;gt; 将不会变化，直到充电电压 V&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 大于门的开启电压时，其输出 V&amp;lt;sub&amp;gt;O&amp;lt;/sub &amp;gt; 才会变成 0，这段充电延时时间取决于 R&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、R&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 和 C 值的大小，电路设计时只要使之大于或等于 100ms 即可避开按键抖动的影响。同理，按键 S 断开时，即使出现抖动，由于 C 的放电延迟过程，也会消除按键抖动的影响。&lt;/p&gt;
&lt;p&gt;上图的图二中，V&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 是未施加滤波电路含有前沿抖动、后沿抖动的波形，V&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 是施加滤波电路后消除抖动的波形。&lt;/p&gt;
&lt;h4 id=&#34;2软件方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2软件方法&#34;&gt;#&lt;/a&gt; 2. 软件方法&lt;/h4&gt;
&lt;p&gt;编制一段时间大于 100ms 的延时程序。&lt;/p&gt;
&lt;p&gt;在第一次检测到有按键按下时，执行这段延时子程序使键的前沿抖动消失后再检测该键状态，如果该键仍保持闭合状态电平，则确认为该键已稳定按下，否则无键按下，从而消除了抖动的影响。同理，在检测到按键释放后，也同样要延迟一段时间，以消除后沿抖动，然后转入对该按键的处理。&lt;/p&gt;
&lt;h2 id=&#34;52-非编码独立式键盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52-非编码独立式键盘&#34;&gt;#&lt;/a&gt; 5.2 非编码独立式键盘&lt;/h2&gt;
&lt;p&gt;独立式键盘是非编码键盘中最简单的一种键盘结构形式。每个按键独立地占有一根 I/O 口线，一般通过上拉电阻保证按键断开时 I/O 口线有确定的高电平，而按键闭合时为低电平。可以把各个按键的 I/O 口线直接与 CPU 数据线相连，通过 CPU 对相关 I/O 口线状态的检测，即可知道键盘上是否有按键按下和哪个键按下，并可以根据各个按键的功能定义进行相关的键功能处理。根据 CPU 何时访问和怎样访问按键的 I/O 口线，就构成了两种独立式键盘接口电路。&lt;/p&gt;
&lt;h3 id=&#34;521-查询法接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#521-查询法接口电路&#34;&gt;#&lt;/a&gt; 5.2.1 查询法接口电路&lt;/h3&gt;
&lt;p&gt;现在以 3 个按键为例，下图即为独立式键盘查询接口电路。按键 S&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;、S&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、S&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 分别通过上拉电阻与 CPU 的数据线相连，当按键 S&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 闭合时，数据线直接接地，因而 CPU 读入 D&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt; = 0；当按键 S&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 断开时，数据线通过上拉电阻接到正电源，因而 CPU 读入 D&amp;lt;sub&amp;gt;i&amp;lt;/sub&amp;gt; = 1。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMTUxMjI1ODY0LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203151225864.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211203151225864&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;该接口电路实现的功能：查询检测是否有按键按下，如有键闭合，则消除抖动，再判断键号，然后转入相应的键处理程序。流程如下：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMTUxNzMzMjkyLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203151733292.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211203151733292&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;采用查询法，必须保证 CPU 每隔一定时间就主动地去扫描按键一次，该扫描时间间隔应小于两次按键的时间间隔，否则会有按键不响应的情形。显然这种方式占用 CPU 时间比较多。&lt;/p&gt;
&lt;h3 id=&#34;522-中断法接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#522-中断法接口电路&#34;&gt;#&lt;/a&gt; 5.2.2 中断法接口电路&lt;/h3&gt;
&lt;p&gt;仍以 3 个键为例，下图为一个用于炉温控制系统的独立式键盘中断法接口电路，S&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;、S&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、S&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 分别代表自动 / 手动切换、炉温参数显式和炉温参数打印功能。这是在上述查询法接口电路的基础上，再把按键 S&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;、S&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、S&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 的数据输出线经过与非门和反相器后与 8255A 的选通输入信号 PC&amp;lt;sub&amp;gt;4&amp;lt;/sub &amp;gt; 相连，8255A 的 PC&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 发出中断请求信号经中断控制器 8259A 与 CPU 的中断请求引脚相连，这是一种典型的中断法键盘接口电路。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMTUyMTIwNjY4LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203152120668.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211203152120668&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;工作过程：当 CPU 对 8255A 初始化（8255A 的 A 口工作于方式 1 选通输入）后，CPU 即执行主程序。当按下 S&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 键，即表示要进入自动控制状态，此时与之相连的 I/O 口线呈现低电平，使 8255A 端口 A 的选通输入信号 PC&amp;lt;sub&amp;gt;4&amp;lt;/sub&amp;gt;（STBa (上划线)）有效，则 PA&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;~PA&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 引脚接收并存入 3 个按键的 “0” 或 “1” 状态，当 STBa (上划线) 恢复成高电平，经 T&amp;lt;sub&amp;gt;SIT&amp;lt;/sub &amp;gt; 时间，8255A 的 PC&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 发出 INTRa 中断请求信号，经中断控制器 8259A 向 CPU 申请中断，CPU 响应中断后，即转到中断服务程序中。中断服务程序依次查询按键的通断状态，当查询到是自动 / 手动控制子程序的入口地址，从而使系统进入自动控制状态。如果按键没有按下，则相应的 I/O 口线均为高电平，也不会产生中断信号，CPU 继续运行主程序。&lt;/p&gt;
&lt;p&gt;键盘中断服务子程序，与查询方式相似，在保护现场后，首先调用 100ms 延时子程序去除抖动，然后依次查键号，并转入键功能处理程序，最后恢复现场，中断返回。显然，查询顺序代表了按键的排队优先级。&lt;/p&gt;
&lt;p&gt;采用中断法，CPU 对按键而言是被动方式，在无键按下时，不占用 CPU 时间，因而 CPU 有更多时间执行其他程序。&lt;/p&gt;
&lt;p&gt;上述分析说明：独立式键盘接口电路简单灵活，软件结构简单，但每个按键必须占用一根 I/O 口线，在按键数量较多时，需要占用较多的 I/O 口线。比如：64 个键需要有 64 根线，不仅连线复杂，查询按键的时间也较长。&lt;strong&gt;故这种键盘电路只适合按键数量比较少的小型控制系统或智能控制仪表。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;53-非编码矩阵式键盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53-非编码矩阵式键盘&#34;&gt;#&lt;/a&gt; 5.3 非编码矩阵式键盘&lt;/h2&gt;
&lt;p&gt;当按键数量较多时，为了少占用 CPU 的 I/O 口线，通常将按键排列成矩阵式结构。矩阵式结构也是非编码键盘中的一种形式。&lt;/p&gt;
&lt;h3 id=&#34;531-矩阵式键盘的结构组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#531-矩阵式键盘的结构组成&#34;&gt;#&lt;/a&gt; 5.3.1 矩阵式键盘的结构组成&lt;/h3&gt;
&lt;p&gt;矩阵式键盘又叫行列式键盘，是用 I/O 口线组成的行、列线的交叉处，二线不能直接相通而是通过一个按键跨接接通。采用这种矩阵结构只需要 M 根行输出线和 N 根列输入线，就可以连接 M×N 个按键。通过键盘扫描程序的行输出与列输入就可以确认按键的状态，再通过键盘处理程序便可以识别按键值。&lt;/p&gt;
&lt;p&gt;当键盘中无任何键按下时，所有的行线和列线被断开且相互独立，输入线 Y&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;~Y&amp;lt;sub&amp;gt;7&amp;lt;/sub &amp;gt; 列都为高电平；当有任意一键按下，则该键所在的行线与列线接通，因此，该列线的电平取决于该键所在的行线。基于此，产生了 “行扫描法” 和 “线扫描法” 两种识别方法。&lt;/p&gt;
&lt;p&gt;行扫描法又称逐行零扫描查询法，即逐行输出行扫描信号 “0”，使各行依次为低电平，然后分别读入列数据，检查此 (低电平) 行中是否有键按下。若读得某列线为低电平，则表示此 (低电平) 行线与此列线叫交叉处有有按键按下，再对该键进行译码计算出键值，然后转入该键的功能子程序入口地址；如果没有任何一根列线为低电平，则说明此 (低电平) 没有按键按下。接着进行下一行的 “0” 行扫描与列读入直到 8 行全部检查完毕为止，若无按键按下，则返回。&lt;/p&gt;
&lt;p&gt;有时为了快速判断键盘中是否有键按下，也可以将全部行线全部置为低电平，然后检测列线的状态；若所有列线均为高电平，则说明键盘中无键按下，立即返回；若要有一列的电平为低，则表示键盘中有按键被按下，然后在如上那样进行逐行扫描。&lt;/p&gt;
&lt;h3 id=&#34;532-矩阵式键盘的程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#532-矩阵式键盘的程序设计&#34;&gt;#&lt;/a&gt; 5.3.2 矩阵式键盘的程序设计&lt;/h3&gt;
&lt;p&gt;在计算机控制系统中，键盘扫描只是 CPU 工作的一部分。因此在设计键盘扫描程序时，必须保证键盘操作的实时性，又不能占用太多的 CPU 时间，还要充分考虑到抖动干扰的消除。一般可根据情况选用&lt;strong&gt;编程扫描、定时扫描或中断扫描&lt;/strong&gt;中的一种方式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203190324518.png&#34; alt=&#34;image-20211203190324518&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KEY：  MOV  AL，0
MOV  CL，AL          ；行值寄存器CL和列值寄存器DL清零
MOV  DL，AL
MOV  AL，0FFH
OUT  PORT1，AL      ；使所有行线为低电平
IN    AL，PORT1     ； 读列键值
CMP  AL，0FFH       ； 检查是否有键按下
JZ    DONE           ； 无键按下转返回
CALL DELAY          ； 有键按下调延时100mA子程序
MOV  AL，0FFH
OUT  PORT1，AL      
IN   AL，PORT1       ； 重复上述扫描,再次确认是否有键按下

CMP  AL，0FFH
JZ   DONE           ； 无键按下转返回
MOV  AH，08         ； 行数08送计数器AH
MOV  BL，01H        ；行扫描初值(即X0线)送BL
KEY1： MOV  AL，BL
OUT  PORT1，AL      ；输出使某行为低电平
IN   AL，PORT1      ； 读入列值
CMP  AL，0FFH       ； 判断此行是否有键按下
JNZ  KEY2           ； 有键按下转KEY2
MOV  AL，CL
ADD  AL，08         ； 无键按下,行值寄存器加08
DAA               
MOV  CL，AL

RCL  BL，1           ； 求下一行为低电平的输出代码
DEC  AH              ； 判8行全扫描完了吗
JNZ  KEY1            ； 若未完转KEY1，继续扫描下一行
DONE：IRET           ； 若全完则返回
KEY2：INC  DL        ； 列值寄存器加1(与键值对应)
RCR  AL，1           ； 列值循环右移1位
JC   KEY2 ； 判断该列是否为1，为1则无键按下继查下一列
MOV  AL，CL          ； 为0则有键按下,获得列值
ADD  AL，DL
DAA                  ；求键值
MOV  [BUFF]，AL      ；键值送缓冲单元暂存
JMP  KEYADR          ；转查找功能键的入口地址
END  KEY             ；

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于键盘处理程序来说，求得键值并不是目的。如果该键是数字键，就应把该键直接送到显示缓冲区进行键值的数字显示；如果该按键是功能键，则应找到该键子程序的入口地址，转而执行该键的功能指令。&lt;/p&gt;
&lt;h2 id=&#34;54-编码键盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#54-编码键盘&#34;&gt;#&lt;/a&gt; 5.4 编码键盘&lt;/h2&gt;
&lt;p&gt;上面所述的非编码键盘都是通过软件的方法来实现键盘扫描、键值处理和消除抖动干扰的。显然，这将占用较多的 CPU 时间。在一个较大的控制系统中，不允许主要用来执行键盘程序，这将严重影响系统的实时控制。下面以二进制编码键盘为例，介绍一种硬件方法来识别键盘和解决抖动干扰的键盘编码器及编码键盘接口电路。&lt;/p&gt;
&lt;h3 id=&#34;541-二进制编码器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#541-二进制编码器&#34;&gt;#&lt;/a&gt; 5.4.1 二进制编码器&lt;/h3&gt;
&lt;p&gt;具有优先级的二进制 8 位编码器 CD4532B 的真值表如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203192210095.png&#34; alt=&#34;image-20211203192210095&#34; /&gt;&lt;/p&gt;
&lt;p&gt;表示芯片优先级的输入允许端 E&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 为 “0” 时，无论编码器的信号输入 I&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为何状态，编码器输出全为 “0”，芯片处于屏蔽状态，同时 E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为 “0”，也为 “0”，也屏蔽下一级芯片；当输入允许端 E&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 为 “1” 时，且编码器的信号输入 I&lt;sub&gt;7&lt;/sub&gt;~I&lt;sub&gt;0&lt;/sub&gt; 全为 “0”，时，编码输出也为 “0”，但输出允许端 E&lt;sub&gt;0&lt;/sub&gt; 为 “1”，表明此编码器输入端无按键按下，却允许优先级低的相邻编码器处于编码状态。这两种情形下的工作状态端 GS 均为 “0”.&lt;/p&gt;
&lt;p&gt;该芯片的 8 个输入端当中，I&lt;sub&gt;0&lt;/sub&gt; 的优先级最高，I&lt;sub&gt;7&lt;/sub&gt; 的优先级最低。当有多个按键按下时，优先级高的被选中，同时自动屏蔽优先级低的各输入端和下一级芯片（使 E&lt;sub&gt;0&lt;/sub&gt; 端为 “0”）。比如处于正常编码状态即 E&lt;sub&gt;i&lt;/sub&gt; 为 “1” 时，当 I&lt;sub&gt;0&lt;/sub&gt; 端为 “1”，其余输入端无论为 “1” 或 “0”，编码输出均为二进制 000；而当 I&lt;sub&gt;1&lt;/sub&gt; 端为 “1” 时，编码输出则为二进制 001；…… 以此类推，输入端的键值号与二进制编码输出一一对应。&lt;/p&gt;
&lt;h3 id=&#34;542-编码键盘接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#542-编码键盘接口电路&#34;&gt;#&lt;/a&gt; 5.4.2 编码键盘接口电路&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203192554797.png&#34; alt=&#34;image-20211203192554797&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如图所示是一种采用两片 CD4532B 构成的 16 个按键的二进制编码接口电路。其中由于 U&lt;sub&gt;1&lt;/sub&gt; 的 E&lt;sub&gt;0&lt;/sub&gt; 作为 U&lt;sub&gt;2&lt;/sub&gt; 的 E&lt;sub&gt;i&lt;/sub&gt;，所以按键 S&lt;sub&gt;0&lt;/sub&gt; 的优先级最高，S&lt;sub&gt;15&lt;/sub&gt; 的优先级最低。U&lt;sub&gt;1&lt;/sub&gt; 和 U&lt;sub&gt;2&lt;/sub&gt; 的输出 O&lt;sub&gt;2&lt;/sub&gt;~O&lt;sub&gt;0&lt;/sub&gt; 经或门 A&lt;sub&gt;3&lt;/sub&gt;~A&lt;sub&gt;1&lt;/sub&gt; 输出，以形成低 3 位编码 D&lt;sub&gt;2&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub&gt;。而最高位 D&lt;sub&gt;3&lt;/sub&gt; 则由 U&lt;sub&gt;2&lt;/sub&gt; 的 GS 产生。当按键 S&lt;sub&gt;8&lt;/sub&gt;~S&lt;sub&gt;15&lt;/sub&gt; 中有一个闭合时，其输出为 “1”。从而 S&lt;sub&gt;0&lt;/sub&gt;~S&lt;sub&gt;15&lt;/sub&gt; 中任意一个按键被按下，由编码 D&lt;sub&gt;3&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub&gt; 均可以输出相应的 4 位二进制码。&lt;/p&gt;
&lt;p&gt;为了消除键盘按下时产生的抖动干扰，该接口电路还设置了由与非门 B&lt;sub&gt;1&lt;/sub&gt;、B&lt;sub&gt;2&lt;/sub&gt;、电阻 R&lt;sub&gt;2&lt;/sub&gt;、电容 C&lt;sub&gt;2&lt;/sub&gt; 组成的单稳电路和由或门 A&lt;sub&gt;4&lt;/sub&gt;、电阻 R&lt;sub&gt;1&lt;/sub&gt;、电容 C&lt;sub&gt;1&lt;/sub&gt; 组成的延时电路，电路中 E、F、G、H 和 I 这五点的波形下图。由于 U&lt;sub&gt;1&lt;/sub&gt; 和 U&lt;sub&gt;2&lt;/sub&gt; 的 GS 接或门 A&lt;sub&gt;4&lt;/sub&gt; 的输入端，所以当按下某键时，A&lt;sub&gt;4&lt;/sub&gt; 为高电平，其输出经 R&lt;sub&gt;1&lt;/sub&gt; 和 C&lt;sub&gt;1&lt;/sub&gt; 延时后使 G 点也为高电位，作为与非门 B&lt;sub&gt;3&lt;/sub&gt; 的输入之一。同时，U&lt;sub&gt;2&lt;/sub&gt; 的输出信号 E&lt;sub&gt;O&lt;/sub&gt; 触发单稳态（B&lt;sub&gt;1&lt;/sub&gt; 和 B&lt;sub&gt;2&lt;/sub&gt;），在暂稳态持续时间 ΔT 内，其输出 F 点为低电位，也作为与非门 B&lt;sub&gt;3&lt;/sub&gt; 的输入之一。由于暂稳态期间（ΔT）E 点电位的变化（即按键的抖动）对其输出 F 点电位无影响，所以此时不论 G 点电位如何，与非门 B&lt;sub&gt;3&lt;/sub&gt; 输出（H 点）均为高电位。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203192601701.png&#34; alt=&#34;image-20211203192601701&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;考试要求-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-4&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;5.3.1&lt;/p&gt;
&lt;p&gt;！！！！很重要&lt;/p&gt;
&lt;p&gt;大题：考察阐述矩阵式扫描键盘原理&lt;/p&gt;
&lt;p&gt;选择填空&lt;/p&gt;
&lt;p&gt;5.4.2&lt;/p&gt;
&lt;p&gt;可能考察按下不同开关输出的编码！！！&lt;/p&gt;
&lt;h2 id=&#34;课后习题-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题-4&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h2&gt;
&lt;p&gt;1．简述键盘的两种类型及其特点。&lt;/p&gt;
&lt;p&gt;2．简述何为键盘的抖动干扰及其消除的两种方法。&lt;/p&gt;
&lt;p&gt;3．对比分析说明图 5-3 与图 5-5 两种键盘接口电路的异同。&lt;/p&gt;
&lt;p&gt;4．结合图 5-6，分析说明矩阵式键盘电路的逐行零扫描法的工作过程。&lt;/p&gt;
&lt;p&gt;5．分析说明图 5-8 二进制编码键盘接口电路的工作原理。&lt;/p&gt;
&lt;p&gt;6．结合图 5-8 与图 5-9，分析说明硬件电路消除抖动干扰的过程。&lt;/p&gt;
&lt;h1 id=&#34;第6章-显示器及其接口技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第6章-显示器及其接口技术&#34;&gt;#&lt;/a&gt; 第 6 章 显示器及其接口技术&lt;/h1&gt;
&lt;h2 id=&#34;引言-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-5&#34;&gt;#&lt;/a&gt; 引言&lt;/h2&gt;
&lt;p&gt;显示装置：主要用来显示生产过程的工艺状况与运行结果。&lt;/p&gt;
&lt;p&gt;常用的显示期器件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示记录仪：模拟方式连续显示和记录过程参数的动态变化，但其价格都很贵，在目前的计算机控制系统中已很少采用。&lt;/li&gt;
&lt;li&gt;发光二极管 LED：具有结构简单、体积小、功耗低、配置灵活、显示清晰、可靠性高等优点，已被微型计算机控制系统及智能化仪表广泛采用。&lt;/li&gt;
&lt;li&gt;液晶显示器 LCD：则以其功耗极低的特点，占据了从电子表到计算器，从袖珍仪表到便携式微型计算机等应用场合。&lt;/li&gt;
&lt;li&gt;阴极射线管 CRT 图形显示器终端：CRT 终端以其图文并茂的直观生动画面，可以显示生产过程中的各种画面及报表，如生产流程图、显示报警图、趋势曲线图、路查询图等，在很多微型计算机控制系统中，特别在 DDC，SCC 以及 DCS 控制系统中，大都采用 CRT 操作台进行监视和控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;61-led显示器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#61-led显示器&#34;&gt;#&lt;/a&gt; 6.1 LED 显示器&lt;/h2&gt;
&lt;h3 id=&#34;611-led显示器的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#611-led显示器的工作原理&#34;&gt;#&lt;/a&gt; 6.1.1 LED 显示器的工作原理&lt;/h3&gt;
&lt;p&gt;LED：是利用 PN 结把电能转换成光能的固体发光器件，根据制造材料的不同可以发出&lt;strong&gt;红、黄、绿、白&lt;/strong&gt;等不同色彩的可见光来。&lt;/p&gt;
&lt;p&gt;伏安特性：类似普通二极管，正向压降约为 2 伏左右，工作电流一般在 10~20 mA。&lt;/p&gt;
&lt;p&gt;结构形式：单段的圆形或方形 LED 常用来显示设备的运行状态，8 段 LED 可以显示各种数字和字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构形式
&lt;ul&gt;
&lt;li&gt;共阴极：发光管的阴极并接成公共端 COM，加高电平灯亮；&lt;/li&gt;
&lt;li&gt;共阳极：发光管的阳极并接成公共端 COM，加低电平灯亮。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMjEyMjExNzM1LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203212211735.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211203212211735&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;实现方法： CPU 的数据线与 LED 各段引脚相连，控制输出的数据，点亮 8 段 LED 不同段的组合，显示等十六进制数。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMjEyMzAwMTc0LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203212300174.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211203212300174&amp;quot; style=&amp;quot;zoom: 67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:/Users/LEGION/AppData/Roaming/Typora/typora-user-images/image-20211204105706512.png&amp;quot; alt=&amp;quot;image-20211204105706512&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;612-led显示器的显示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#612-led显示器的显示方式&#34;&gt;#&lt;/a&gt; 6.1.2 LED 显示器的显示方式&lt;/h3&gt;
&lt;p&gt;在计算机控制系统中，常利用&lt;em&gt; n&lt;/em&gt; 个 LED 显示器构成&lt;em&gt; n&lt;/em&gt; 位显示。通常把点亮 LED 某一段的控制称为&lt;strong&gt;段选&lt;/strong&gt;，而把点亮 LED 某一位的控制称为&lt;strong&gt;位选或片选&lt;/strong&gt;。根据 LED 显示器的段选线、位选线与控制端口的连接方式不同，LED 显示器有&lt;strong&gt;静态显示与动态显示&lt;/strong&gt;两种方式，下面以 4 个共阴极 LED 的组合为例进行说明。&lt;/p&gt;
&lt;h4 id=&#34;1静态显示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1静态显示方式&#34;&gt;#&lt;/a&gt; 1. 静态显示方式&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204110906070.png&#34; alt=&#34;image-20211204110906070&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构特点：&lt;/p&gt;
&lt;p&gt;4 个 COM 端连接在一起并接有效电平 ——&lt;strong&gt; 无位选&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;每个 LED 的段选各自与一个 8 位并行 I/O 口相连 ——&lt;strong&gt; 段选独立&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作特点：&lt;/p&gt;
&lt;p&gt;缺点是电路中占用 I/O 口资源多，电路复杂，硬件成本高；而且由于同时显示，功耗大&lt;/p&gt;
&lt;p&gt;优点是占用 CPU 机时少，显示稳定可靠&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适用：规模较大的实时控制系统。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2动态显示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2动态显示方式&#34;&gt;#&lt;/a&gt; 2. 动态显示方式&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204110838022.png&#34; alt=&#34;image-20211204110838022&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构特点：&lt;/p&gt;
&lt;p&gt;4 个 LED 显示器各自的段选线连在一起，与一个 8 位的 I/O 口相连；&lt;/p&gt;
&lt;p&gt;各自的 COM 端则由另一个 I/O 口进行位选。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;要显示不同的字符，只能由 CPU 通过两个 I/O 口依次轮流输出段选码和位选码，循环扫描 LED，使其分时显示。动态显示利用了人的视觉惯性，虽然同一时间只能显示一个，但通过不断地分时轮流扫描显示，只要每个显示保持延时几毫秒，刷新周期不超过 20ms (刷新周期与 LED 工作电流有关)，就可以获得视觉稳定地显示效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作特点：&lt;/p&gt;
&lt;p&gt;优点是占用 I/O 资源少，线路简单，硬件成本低；分时显示，功耗略低。&lt;/p&gt;
&lt;p&gt;缺点是需用软件程序不断地循环扫描定时刷新，因而占用了 CPU 的大多数机时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适用：只适用于小型测控系统，特别是专用于状态显示的数字仪器仪表中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;613-led显示器接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#613-led显示器接口电路&#34;&gt;#&lt;/a&gt; 6.1.3 LED 显示器接口电路&lt;/h3&gt;
&lt;p&gt;控制系统中的 LED 显示电路，除了要完成把字符串转换为对应的段选码的译码功能外，还要具有数据锁存和驱动的功能以外。其中，&lt;strong&gt;译码功能可以通过硬件译码器完成，也可以通过软件编程实现；而数据锁存与驱动只有依赖硬件电路来实现。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;静态显示接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态显示接口电路&#34;&gt;#&lt;/a&gt; 静态显示接口电路&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;锁存、译码、驱动均由硬件实现&lt;/strong&gt; ——CD4511B&lt;/p&gt;
&lt;p&gt;实现过程：74LS138 输出作为 LED 片选，每两个共用一个片选；每两个段选码共用一个字节。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204195035276.png&#34; alt=&#34;image-20211204195035276&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4 片 CD4511B 和一片 74LS138&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MOV     BX，OFFSET  DATA1MOV     AL，[BX]OUT      PORT0，AL    ；显示左2位INC       BXMOV     AL，[BX]OUT      PORT1，AL    ；显示右2位
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;动态显示接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态显示接口电路&#34;&gt;#&lt;/a&gt; 动态显示接口电路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;锁存、驱动由硬件电路实现（两个 I/O 并行端口）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;段选码的译码由软件实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现过程：各个 LED 段选线对应&lt;strong&gt;并接&lt;/strong&gt;到一片 8D 触发器 74LS374（U1）进行段选控制，其间串有 8 个三极管以正向驱动 LED 的阳极；各个 LED 的 COM 端由另一片 74LS374（U2）进行位选控制，其间接有&lt;strong&gt;达林顿阵列驱动器 MC1413（内含 7 对复合三极管）对阴极进行反向驱动&lt;/strong&gt;，构成了位选通道；74LS138：控制位选和段选的锁存器 74LS374，Y0=0，锁存 CPU 输出的段选码；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204201111653.png&#34; alt=&#34;image-20211204201111653&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjAxMzU4NzMxLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204201358731.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211204201358731&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;软件译码：略&lt;/p&gt;
&lt;h2 id=&#34;62-lcd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#62-lcd&#34;&gt;#&lt;/a&gt; 6.2 LCD&lt;/h2&gt;
&lt;h3 id=&#34;引言-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-6&#34;&gt;#&lt;/a&gt; 引言&lt;/h3&gt;
&lt;p&gt;液晶显示器 LCD (Liquid Crystal Display) 是一种利用液晶的扭曲 / 向列效应制成的新型显示器，它具有功耗极低、体积小、抗干扰能力强、价格廉等特点，目前已广泛应用在各种显示领域，尤其在袖珍仪表和低功耗应用系统中。LCD 可分为&lt;strong&gt;段位式、字符式和点阵式&lt;/strong&gt;三种。如右图所示。&lt;/p&gt;
&lt;h3 id=&#34;621-lcd显示器结构原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#621-lcd显示器结构原理&#34;&gt;#&lt;/a&gt; 6.2.1 LCD 显示器结构原理&lt;/h3&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjAyMDE3NzU4LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204202017758.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211204202017758&amp;quot; style=&amp;quot;zoom: 67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;LCD 是借助外界光线照射液晶材料而实现显示的&lt;strong&gt;被动显示器件&lt;/strong&gt;。液晶是一种介于液体与固体之间的热力学的中间稳定相，&lt;strong&gt;在一定的温度范围内既有液体的流动性和连续性，又有晶体的各向异性。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;622-lcd的驱动方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#622-lcd的驱动方式&#34;&gt;#&lt;/a&gt; 6.2.2 LCD 的驱动方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;直接驱动：显示器件只有一个背极（即下玻璃电极基板），但每个字符段都有独立的引脚；&lt;/li&gt;
&lt;li&gt;多极驱动：显示器具有多个背极，各字符段按点阵结构排列，这是&lt;strong&gt;显示字段较多时常采用的驱动方式&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204202813184.png&#34; alt=&#34;image-20211204202813184&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上图总结：
&lt;ul&gt;
&lt;li&gt;电压相位相同，两电极相位差为 0，字段不显示；电压相位不相同，字段显示。&lt;/li&gt;
&lt;li&gt;交流电压驱动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204203338433.png&#34; alt=&#34;image-20211204203338433&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X 接地，显示与否取决于 Y，Y=1 正常显示&lt;/li&gt;
&lt;li&gt;从低到高：D C B A&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;623-段位式lcd接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#623-段位式lcd接口电路&#34;&gt;#&lt;/a&gt; 6.2.3 段位式 LCD 接口电路&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;C:/Users/LEGION/AppData/Roaming/Typora/typora-user-images/image-20211204203743304.png&#34; alt=&#34;image-20211204203743304&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组成：
&lt;ul&gt;
&lt;li&gt;一个 8 位并行 I/O 口作为译码驱动&lt;/li&gt;
&lt;li&gt;6 片 BCD 码 7 段译码驱动器 4056&lt;/li&gt;
&lt;li&gt;2 片 4 位液晶显示启动器 4054&lt;/li&gt;
&lt;li&gt;1 片单稳态多谐振荡器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;由单片机 P1 口的低 4 位输出 LCD 的段选码而由高 4 位输出位选码&lt;/li&gt;
&lt;li&gt;4054、4056 的锁存输出功能，使该电路称为静态显示电路&lt;/li&gt;
&lt;li&gt;为了与液晶显示的低功耗相适应，全部芯片皆选用 CMOS 器件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显示程序略&lt;/p&gt;
&lt;h3 id=&#34;624-点阵式lcd接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#624-点阵式lcd接口电路&#34;&gt;#&lt;/a&gt; 6.2.4 点阵式 LCD 接口电路&lt;/h3&gt;
&lt;h4 id=&#34;引言-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-7&#34;&gt;#&lt;/a&gt; 引言&lt;/h4&gt;
&lt;p&gt;** 点阵式 LCD 不但可以显示字符，而且可以显示各种图形及汉字。** 把点阵式 LCD 与配套或选定的驱动器、控制器集成在一起，就组成点阵式图形液晶显示模块，控制器的种类很多，比如日本东芝的 T6963, 日立的 HD61880, 精工的 SED1330/SED1335 等。现以 12864 点阵式 LCD 液晶显示模块为例加以说明。&lt;/p&gt;
&lt;p&gt;液晶显示模块 12864 主要由行 / 列驱动器及 128×64 全点阵液晶显示器组成。内部含有国标一级、二级简体中文字库和 128 个 16×8 点的 ASCII 字符集。可以同时显示 8×4 个（16×16 点阵）汉字和图形显&lt;strong&gt;示。它与 CPU 的接口连线可采用并行或串行两种方式。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;1液晶模块接线原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1液晶模块接线原理&#34;&gt;#&lt;/a&gt; 1. 液晶模块接线原理&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjA1MTMxNTY0LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204205131564.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211204205131564&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;2液晶模块指令说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2液晶模块指令说明&#34;&gt;#&lt;/a&gt; 2. 液晶模块指令说明&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204205401338.png&#34; alt=&#34;image-20211204205401338&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;3软件初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3软件初始化&#34;&gt;#&lt;/a&gt; 3. 软件初始化&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjA1NDMwMzczLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204205430373.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211204205430373&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;4应用举例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4应用举例&#34;&gt;#&lt;/a&gt; 4. 应用举例&lt;/h4&gt;
&lt;p&gt;液晶字符显示使用时还应注意以下 3 点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;要在某一个位置显示中文字符时，应先设定显示字符位置，即先设定显示地址，再写入中文字符编码。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;显示 ASCII 字符过程与显示中文字符过程相同。不过在&lt;strong&gt;显示连续字符时，只须设定一次显示地址&lt;/strong&gt;，由模块自动对地址加 1 指向下一 个字符位置，否则，显示的字符中将会有一个空 ASCII 字符位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当字符编码为 2 字节时，应先写入高位字节，再写入低位字节。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204205604927.png&#34; alt=&#34;image-20211204205604927&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;63-图形显示器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#63-图形显示器&#34;&gt;#&lt;/a&gt; 6.3 图形显示器&lt;/h2&gt;
&lt;h3 id=&#34;631-图形显示器概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#631-图形显示器概述&#34;&gt;#&lt;/a&gt; 6.3.1 图形显示器概述&lt;/h3&gt;
&lt;p&gt;常用的图形显示器有两种：CRT 显示器和 TFT 平面显示器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CRT 显示器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CRT（Cathod Ray Tube）显示器：由一个图形监示器和相应的控制电路组成。在工业计算机中，插入一块 VGA/TVGA 图形控制板即可实现功能很强的图象显示功能。目前是计算机控制系统应用最多的一种图形显示技术。&lt;/p&gt;
&lt;p&gt;分辨率要求很高，或者显示速度要求很高时，使用智能图形终端，含有图形显示控制器（GDC），但是价格较高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：硬件技术成熟，软件支持丰富，价格较为低廉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：体积与功耗大，易受振动和冲击，容易受射线辐射、磁  场干扰，因此在恶劣工况下须采用特殊加固和屏蔽措施。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TFT 显示器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体积小，耗电省，如最薄的壁挂式机型厚度仅为 5cm (2in)；&lt;/li&gt;
&lt;li&gt;可靠性高，寿命长，不易受振动、冲击和射线的干扰影响；&lt;/li&gt;
&lt;li&gt;显示颜色 256 种基色，可扩展至 25600 种组合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;632-图形显示画面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#632-图形显示画面&#34;&gt;#&lt;/a&gt; 6.3.2 图形显示画面&lt;/h3&gt;
&lt;h4 id=&#34;引言-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-8&#34;&gt;#&lt;/a&gt; 引言&lt;/h4&gt;
&lt;p&gt;图形显示器作用：直观形象地监视和操作工业生产过程。&lt;/p&gt;
&lt;p&gt;显示画面功能： 反映出整个生产的工艺流程，便于单元操作控制；要有实时动态数据，又要有历史记忆功能。&lt;/p&gt;
&lt;p&gt;显示画面功能内容：调节器、指示仪、记录仪、报警仪、模拟屏以及开关按钮、指示灯等。&lt;/p&gt;
&lt;p&gt;设计语言： 早期用汇编语言来编写，后来多采用高级语言，现在采用组态软件，诸如美国的 Intouch、Fix 和德国的 Wincc，国内的组态王、力控、MCGS 和 Controx 等。&lt;/p&gt;
&lt;p&gt;常用的显示画面：有总貌画面、分组画面、点画面、流程图画面、趋势曲线画面、报警显示画面、操作指导画面等&lt;/p&gt;
&lt;h4 id=&#34;总貌画面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总貌画面&#34;&gt;#&lt;/a&gt; 总貌画面&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjExMDUxNTgwLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204211051580.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211204211051580&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;分组画面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分组画面&#34;&gt;#&lt;/a&gt; 分组画面&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204211950917.png&#34; alt=&#34;image-20211204211950917&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可控制回路进行必要操作&lt;/p&gt;
&lt;h4 id=&#34;点画面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#点画面&#34;&gt;#&lt;/a&gt; 点画面&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204212112822.png&#34; alt=&#34;image-20211204212112822&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点画面可以进行参数调节&lt;/p&gt;
&lt;h4 id=&#34;趋势曲线画面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#趋势曲线画面&#34;&gt;#&lt;/a&gt; 趋势曲线画面&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204212250882.png&#34; alt=&#34;image-20211204212250882&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实时记录趋势与历史记录趋势&lt;/p&gt;
&lt;h4 id=&#34;报警显示画面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报警显示画面&#34;&gt;#&lt;/a&gt; 报警显示画面&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204212655911.png&#34; alt=&#34;image-20211204212655911&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;操作指导画面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作指导画面&#34;&gt;#&lt;/a&gt; 操作指导画面&lt;/h4&gt;
&lt;p&gt;为了安全方便地操作，设计者&lt;strong&gt;按操作顺序预先将各项操作指令存入计算机&lt;/strong&gt;，实际操作时，再以操作指导画面形式显示出来，用以指导操作。如果出现误操作，计算机会拒绝接收并显示出错标志，从而保证了安全操作。&lt;/p&gt;
&lt;h2 id=&#34;考试要求-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-5&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;共阴共阳电路工作原理&lt;/p&gt;
&lt;p&gt;静态显示方式、动态显示方式&lt;/p&gt;
&lt;p&gt;可以出大题&lt;/p&gt;
&lt;p&gt;LED 电路给出，写出完整工作原理 / 阐述原理&lt;/p&gt;
&lt;p&gt;6.1.3&lt;/p&gt;
&lt;p&gt;设计显示器接口不考察&lt;/p&gt;
&lt;p&gt;分析可能会考察&lt;/p&gt;
&lt;p&gt;实际应用，不会去考程序设计，考察工作大致流程&lt;/p&gt;
&lt;p&gt;6.2&lt;/p&gt;
&lt;p&gt;不必过多了解，LCD 本身的显示原理，不考大题，选填判&lt;/p&gt;
&lt;h2 id=&#34;课后习题-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题-5&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h2&gt;
&lt;p&gt;1. 结合图 6-1，简述 8 段 LED 显示器的结构与工作原理。&lt;/p&gt;
&lt;p&gt;2. 结合图 6-2，说明 8 段 LED 显示器段选码的概念及其 0~F 的段选码表。&lt;/p&gt;
&lt;p&gt;3．以 4 位 LED 为例，说明 LED 的静态显示原理及其显示效果、特点及适用场合。&lt;/p&gt;
&lt;p&gt;4．以 4 位 LED 为例，说明 LED 的动态显示原理及其显示效果、特点及适用场合。&lt;/p&gt;
&lt;p&gt;5．结合图 6-5，简述 LED 静态显示硬件译码电路的工作过程。&lt;/p&gt;
&lt;p&gt;6．结合图 6-6，简述 LED 动态显示软件译码电路的工作过程。&lt;/p&gt;
&lt;p&gt;7．LCD 液晶显示器有哪几种类型？简述其作用。&lt;/p&gt;
&lt;p&gt;8．结合图 6-9、图 6-10，分析说明 7 段 LCD 液晶显示器的译码驱动电路。&lt;/p&gt;
&lt;p&gt;9．在计算机控制系统中，常用的监控显示画面有哪些？&lt;/p&gt;
&lt;h1 id=&#34;第7章数据处理技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第7章数据处理技术&#34;&gt;#&lt;/a&gt; 第 7 章数据处理技术&lt;/h1&gt;
&lt;h2 id=&#34;引言-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-9&#34;&gt;#&lt;/a&gt; 引言&lt;/h2&gt;
&lt;p&gt;数据采集：在计算机控制系统中，是最基本的一种模式。一般是通过传感器、变送器把生产过程的各种物理参数转换成电信号，然后经 A/D 通道或 DI 通道，把数字量送入计算机中。&lt;/p&gt;
&lt;p&gt;数据处理：计算机在对这些数字量进行显示和控制之前，还必须根据需要进行相应的数值计算即数据处理。为了满足不同系统的需要，设计出了许多有效的数据处理技术方法，如&lt;strong&gt;预处理，数字滤波，标度变换，查表和越限报警&lt;/strong&gt;等。&lt;/p&gt;
&lt;h2 id=&#34;71-数据预处理技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#71-数据预处理技术&#34;&gt;#&lt;/a&gt; 7.1 数据预处理技术&lt;/h2&gt;
&lt;p&gt;对数据的预处理是计算机控制系统数据处理的基础，这包括：数字凋零、系统校准技术以及输入、输出数据的极性与字长的预处理技术。&lt;/p&gt;
&lt;h3 id=&#34;711-系统误差的自动校准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#711-系统误差的自动校准&#34;&gt;#&lt;/a&gt; 7.1.1 系统误差的自动校准&lt;/h3&gt;
&lt;p&gt;系统误差：在控制系统的测量输入通道中，一般均存在放大器等器件的&lt;strong&gt;零点偏移和漂移&lt;/strong&gt;，会造成放大电路&lt;strong&gt;的增益误差及器件参数的不稳定等现象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;特点：是在一定的测量条件下，其变化规律是可以掌握的，产生误差的原因一般也是知道的。&lt;/p&gt;
&lt;p&gt;处理方法：通过适当的技术方法如数字调零、系统校准来确定并加以校正的，一般采用&lt;strong&gt;软件程序&lt;/strong&gt;进行处理。&lt;/p&gt;
&lt;h4 id=&#34;1数字凋零&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1数字凋零&#34;&gt;#&lt;/a&gt; 1. 数字凋零&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205134744967.png&#34; alt=&#34;image-20211205134744967&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数字调零：处理由零点偏移造成系统误差，通过软件进行零点的调整&lt;/p&gt;
&lt;p&gt;电路：多路开关、前置放大器、A/D 转换器、CPU&lt;/p&gt;
&lt;p&gt;原理：CPU 分时巡回采集 1 路&lt;strong&gt;校准电路&lt;/strong&gt;至 n 路传感变送器送来的电压信号。&lt;/p&gt;
&lt;p&gt;①寻找零点偏移值：第 0 路为校准信号即接地信号，理论上电压＝0，CPU 采样值＝零，而实际上产生了一个不等于零的数值，此值零点偏移值&lt;em&gt; N&lt;/em&gt;0；&lt;/p&gt;
&lt;p&gt;②然后依次采集 1、2、… &lt;em&gt;n&lt;/em&gt; 路，采样值&lt;em&gt; N&lt;/em&gt;1、&lt;em&gt;N&lt;/em&gt;2、… &lt;em&gt;N&lt;/em&gt;n 值就是实际值＋零点偏移值&lt;em&gt; N&lt;/em&gt;0。计算机要进行的数字调零恢复本次测量的实际值＝（&lt;em&gt;Ni- N&lt;/em&gt;0）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：此方法，可去掉放大电路、A/D 转换电路本身的偏移及随时间与温度而发生的各种漂移的影响，从而大大降低对这些电路器件的偏移值的要求，降低硬件成本。&lt;/li&gt;
&lt;li&gt;缺点：不能校正由传感器本身引入的误差。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2系统校准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2系统校准&#34;&gt;#&lt;/a&gt; 2. 系统校准&lt;/h4&gt;
&lt;p&gt;原因：克服由传感器本身引入的误差。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VR ：标准输入信号；&lt;/p&gt;
&lt;p&gt;NR： VR 对应采样值&lt;/p&gt;
&lt;p&gt;V：实际被测输入信号；&lt;/p&gt;
&lt;p&gt;N： V 对应采样值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205140124878.png&#34; alt=&#34;image-20211205140124878&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适用场合：传感器特性随时间会发生变化的场合&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;712-数字字长的预处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#712-数字字长的预处理&#34;&gt;#&lt;/a&gt; 7.1.2 数字字长的预处理&lt;/h3&gt;
&lt;p&gt;为了满足不同精度的要求，数据在进行数字滤波、标度变换和控制运算后，必须对数字量的位数加以处理。&lt;/p&gt;
&lt;h4 id=&#34;1输入位数大于输出位数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1输入位数大于输出位数&#34;&gt;#&lt;/a&gt; 1. 输入位数大于输出位数&lt;/h4&gt;
&lt;p&gt;处理方法：&lt;strong&gt;忽略高位数&lt;/strong&gt;的最低几位。如：10 位 A/D 转换器的输 入值为 0011111010，此值经处理后送入 8 位 D/A 转换 器的值就变为 00111110。这在计算机中通过向&lt;strong&gt;右移位&lt;/strong&gt;的方法是很容易实现的。&lt;/p&gt;
&lt;h4 id=&#34;2输入位数小于输出位数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2输入位数小于输出位数&#34;&gt;#&lt;/a&gt; 2. 输入位数小于输出位数&lt;/h4&gt;
&lt;p&gt;处理方法：将 8 位数左移两位构成 10 位数，最低两位用 “0” 填充&lt;/p&gt;
&lt;p&gt;如：转换前的 8 位输入值为：××××××××；&lt;/p&gt;
&lt;p&gt;转换后的 10 位输出值为：××××××××00。&lt;/p&gt;
&lt;h2 id=&#34;72-数字滤波方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#72-数字滤波方法&#34;&gt;#&lt;/a&gt; 7.2 数字滤波方法&lt;/h2&gt;
&lt;h3 id=&#34;引言-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-10&#34;&gt;#&lt;/a&gt; 引言&lt;/h3&gt;
&lt;p&gt;数字滤波：就是计算机系统对输入信号采样多次，然后用某种计算方法进行数字处理，以削弱或滤除干扰噪声造成的随机误差，从而获得一个真实信号的过程。&lt;/p&gt;
&lt;p&gt;这种滤波方法只是根据预定的滤波算法编制相应的程序，实质上是一种程序滤波，因而可靠性高，稳定性好，修改滤波参数也容易，而且一种滤波子程序可以被多个通道所共用，成本很低。&lt;/p&gt;
&lt;p&gt;不足是需要占用 CPU 的机时。&lt;/p&gt;
&lt;h3 id=&#34;721-平均值滤波&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#721-平均值滤波&#34;&gt;#&lt;/a&gt; 7.2.1 平均值滤波&lt;/h3&gt;
&lt;p&gt;种类：算术平均、去极值平均、加权平均、滑动平均&lt;/p&gt;
&lt;h4 id=&#34;1算数平均&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1算数平均&#34;&gt;#&lt;/a&gt; 1. 算数平均&lt;/h4&gt;
&lt;p&gt;算术平均滤波：在采样周期 T 内，对测量信号&lt;em&gt; y&lt;/em&gt; 进行&lt;em&gt; m&lt;/em&gt; 次采 样， 把&lt;em&gt; m&lt;/em&gt; 个采样值相加后的算术平均值作为本次的有效采样值，即：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTQyNDU1MTI1LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205142455125.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205142455125&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;缺点：不能将明显的偶然的脉冲干扰消除，只是把其平均到采样结果中，从而降低了测量精度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;适用于周期性干扰的信号滤波。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;2去极值滤波&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2去极值滤波&#34;&gt;#&lt;/a&gt; 2. 去极值滤波&lt;/h4&gt;
&lt;p&gt;连续采样的&lt;em&gt; m&lt;/em&gt; 个数据去掉其中的最大值与最小值，然后计算余下的&lt;em&gt; m&lt;/em&gt;-2 个数据的算术平均值。&lt;/p&gt;
&lt;p&gt;适用场合：工业场合经常遇到的&lt;strong&gt;尖脉冲干扰&lt;/strong&gt;的信号滤波。&lt;/p&gt;
&lt;p&gt;** 缺点：算数平均和取极值平均滤波均存在平滑性和灵敏度的矛盾。** 采样次数太少则平滑效果差，次数较多则灵敏度下降，对测量参数变化趋势不敏感。&lt;/p&gt;
&lt;h4 id=&#34;3加权平均滤波&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3加权平均滤波&#34;&gt;#&lt;/a&gt; 3. 加权平均滤波&lt;/h4&gt;
&lt;p&gt;加权平均滤波：对每次采样值不以相同的权系数而以增加新鲜采样值的权重相加。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTQzNDUxMjcwLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205143451270.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205143451270&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C&lt;sub&gt;i&lt;/sub&gt; 为加权系数，&lt;strong&gt;先小后大，且均为小于 1 但总和等于 1 的小数&lt;/strong&gt;，既满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;C1 + C2 +&lt;/em&gt; &lt;em&gt;… + Cm&lt;/em&gt; = 1&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cm &amp;gt; Cm-1 &amp;gt;&lt;/em&gt; &lt;em&gt;…C1&lt;/em&gt; &amp;gt; 0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C&lt;sub&gt;i&lt;/sub&gt; 的取值应视具体情况选取，并通过调试确定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如，某纯滞后时间为&lt;em&gt; τ&lt;/em&gt; 被控对象，采用&lt;em&gt; m&lt;/em&gt; =4 的加权平均滤波算式为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205143931154.png&#34; alt=&#34;image-20211205143931154&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205144309162.png&#34; alt=&#34;image-20211205144309162&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4滑动平均滤波&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4滑动平均滤波&#34;&gt;#&lt;/a&gt; 4. 滑动平均滤波&lt;/h4&gt;
&lt;p&gt;适用场合：前三种的平均滤波算法有一个共同点：即每取得一个有效采样值必须连续进行若干次采样。系统的采样速度较慢或采样信号变化较快时，系统的实时性就无法得到保证。&lt;/p&gt;
&lt;p&gt;滑动平均滤波：在每个采样周期只采样一次，将这一次采样值和过去的若干次采样值一起求平均，所得结果即为有效采样值。&lt;/p&gt;
&lt;p&gt;滑动平均滤波算法优势：实时性好，提高了系统响应速度。&lt;/p&gt;
&lt;p&gt;具体做法：可由循环队列结构方式来实现数据的存放，比如 m 个采样求滑动平均，只要在 RAM 中开辟 m 个数据暂存区，每次采集一个数据便存入暂存区的队尾，同时冲掉队首的一个数据，这样在存储器的队列中始终保持有 m 个最新的数据。&lt;/p&gt;
&lt;h3 id=&#34;722-中值滤波&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#722-中值滤波&#34;&gt;#&lt;/a&gt; 7.2.2 中值滤波&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将信号&lt;em&gt; y&lt;/em&gt; 的连续&lt;em&gt; m&lt;/em&gt; 次采样值按大小进行排序，取其中间值作为本次的有效采样值。本算法为取中值，故采样次数&lt;em&gt; m&lt;/em&gt; 应为奇数，一般 3~5 次即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编制中值滤波的算法程序：首先把&lt;em&gt; m&lt;/em&gt; 个采样值从小到大（或从大到小）进行排队，这可采用几种常规的排序算法如&lt;strong&gt;冒泡算法&lt;/strong&gt;，然后再取中间值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适用场合：中值滤波对&lt;strong&gt;缓变过程中的偶然因素&lt;/strong&gt;引起的波动或采样器不稳定造成的误差所引起的脉动干扰比较有效，而对快速变化过程 (如流量) 的信号采样则不适用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;723-限幅滤波&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#723-限幅滤波&#34;&gt;#&lt;/a&gt; 7.2.3 限幅滤波&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把两次相邻的采样值相减，求其增量的绝对值，再与两次采样所允许的最大差值 Δ&lt;em&gt;Y&lt;/em&gt; 进行比较，如果小于或等于 Δ&lt;em&gt;Y&lt;/em&gt;，表示本次采样值 &lt;em&gt;y&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;) 是真实的，则取&lt;em&gt; y&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;) 为有效采样值；反之，&lt;em&gt;y&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;) 是不真实的， 则取上次采 样值&lt;em&gt; y&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;-1) 作为本次有效采样值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 |&lt;em&gt;y&lt;/em&gt;(&lt;em&gt;k)-y(k-1)&lt;/em&gt; |≤ Δ&lt;em&gt;Y&lt;/em&gt; 时，则取 &lt;em&gt;y&lt;/em&gt;(k)=&lt;em&gt;y(k)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当 |&lt;em&gt;y&lt;/em&gt;(&lt;em&gt;k)-y(k-1)&lt;/em&gt; | ＞Δ&lt;em&gt;Y&lt;/em&gt; 时，则取&lt;em&gt; y&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;)=&lt;em&gt;y&lt;/em&gt;(k-1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;式中：
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;y&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;)──t=kT 时的采样值；&lt;/li&gt;
&lt;li&gt;&lt;em&gt;y&lt;/em&gt; (K-1) ──t=(k-1) T 时的采样值；&lt;/li&gt;
&lt;li&gt;Δ&lt;em&gt;Y&lt;/em&gt;──相邻两次采样值所允许的最大偏差，其大小取决于控制系统采样周期 T 和信号 Y 的正常变化率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用场合：对随机干扰或采样器不稳定引起的失真有良好的滤波效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;724-惯性滤波&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#724-惯性滤波&#34;&gt;#&lt;/a&gt; 7.2.4 惯性滤波&lt;/h3&gt;
&lt;p&gt;不考&lt;/p&gt;
&lt;h2 id=&#34;73-标度变换技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#73-标度变换技术&#34;&gt;#&lt;/a&gt; 7.3 标度变换技术&lt;/h2&gt;
&lt;h3 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h3&gt;
&lt;p&gt;生产中的各种参数都有着不同的量纲和数值，但在计算机控制系统的采集、A/D 转换过程中已变为无量纲的数据，当系统进行显示、记录、打印和警报等操作时，&lt;strong&gt;必须把这些测得的参数还原为无量纲的物理量，这就需要进行标度变换&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;标度：衡量某种物理量或参数的量纲。&lt;/p&gt;
&lt;p&gt;变换：从一种物理量转换为另一种物理量。&lt;/p&gt;
&lt;p&gt;标度变换的任务：把计算机系统检测的对象参数的二进制数值还原变换为原物理量的工程实际值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下图为温度测控系统标度变换原理图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205151616981.png&#34; alt=&#34;image-20211205151616981&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标度变换方法：线性式变换、非线性式变换、多项式变换查表法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法选择依据：&lt;strong&gt;被测参数的工程量与转换后数字量间的函数关系&lt;/strong&gt;；&lt;strong&gt;通常传感器的输入输出特性&lt;/strong&gt;决定了此函数关系，从而决定标度变换方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;731-线性式变换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#731-线性式变换&#34;&gt;#&lt;/a&gt; 7.3.1 线性式变换&lt;/h3&gt;
&lt;p&gt;线性标度变换：最常用的标度变换方式。&lt;/p&gt;
&lt;p&gt;前提条件：传感器输出信号与被测参数间呈&lt;strong&gt;线性关系&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组量 N&lt;sub&gt;X&lt;/sub&gt; 对应的工程量 A&lt;sub&gt;X&lt;/sub&gt; 的线性标度变换公式：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205152347677.png&#34; alt=&#34;image-20211205152347677&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A&lt;sub&gt;0&lt;/sub&gt;：一次测量仪表的下限（测量范围最小值）&lt;/p&gt;
&lt;p&gt;A&lt;sub&gt;m&lt;/sub&gt;：一次测量仪表的上限（测量范围最大值）&lt;/p&gt;
&lt;p&gt;A&lt;sub&gt;X&lt;/sub&gt;：实际测量值（工程量）&lt;/p&gt;
&lt;p&gt;N&lt;sub&gt;0&lt;/sub&gt;：仪表下限所对应的数字量&lt;/p&gt;
&lt;p&gt;N&lt;sub&gt;m&lt;/sub&gt;：实际测量值所对应的数字量&lt;/p&gt;
&lt;p&gt;N&lt;sub&gt;x&lt;/sub&gt;：实际测量值所对应的数字量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;N&lt;sub&gt;0&lt;/sub&gt; = 0 时的方程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A&lt;sub&gt;0&lt;/sub&gt; = 0 时的方程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例 7-1 !!!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;732-非线性式变换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#732-非线性式变换&#34;&gt;#&lt;/a&gt; 7.3.2 非线性式变换&lt;/h3&gt;
&lt;p&gt;条件：传感器的输出信号与被测参数之间呈&lt;strong&gt;非线性关系&lt;/strong&gt;，但函数关系可用解析式来表示。&lt;/p&gt;
&lt;p&gt;例如，在差压法测流量中，流量与差压间的关系为：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTU0MDIzOTEwLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205154023910.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205154023910&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;式中：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q&lt;/em&gt;—— 流体流量；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;K&lt;/em&gt; —— 刻度系数，与流体的性质及节流装置的尺寸有关；&lt;/p&gt;
&lt;p&gt;ΔP —— 节流装置前后的差压。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非线式标度变换公式：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205155421634.png&#34; alt=&#34;image-20211205155421634&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205155427801.png&#34; alt=&#34;image-20211205155427801&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;733-多项式变换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#733-多项式变换&#34;&gt;#&lt;/a&gt; 7.3.3 多项式变换&lt;/h3&gt;
&lt;p&gt;适用场合：传感器输出信号与被测参数间呈非线性关系&lt;/p&gt;
&lt;p&gt;应用条件：&lt;strong&gt;非线性函数关系不可用解析式来表示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采用方法：插值多项式来进行标度变换&lt;/p&gt;
&lt;p&gt;插值多项式－用一个&lt;em&gt; n&lt;/em&gt; 次多项式来代替某种非线性函数关系。&lt;/p&gt;
&lt;p&gt;插值原理－被测参数&lt;em&gt; y&lt;/em&gt; 与传感器输出值&lt;em&gt; x&lt;/em&gt; 具有函数关系为       &lt;em&gt;y&lt;/em&gt;=&lt;em&gt;f&lt;/em&gt;( &lt;em&gt;x&lt;/em&gt; )，若已知&lt;em&gt; n&lt;/em&gt;+1 个相异点处的函数值 为： f ( x&lt;sub&gt;0&lt;/sub&gt; ) = y&lt;sub&gt;0&lt;/sub&gt;，f( x&lt;sub&gt;1&lt;/sub&gt; ) = y&lt;sub&gt;1&lt;/sub&gt;，…， f( x&lt;sub&gt;n&lt;/sub&gt; ) = y&lt;sub&gt;n&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;现构造一个&lt;em&gt; n&lt;/em&gt; 次多项式 P&lt;sub&gt;n&lt;/sub&gt;( x ) = a&lt;sub&gt;n&lt;/sub&gt;x&lt;sup&gt;n&lt;/sup&gt;+ a&lt;sub&gt;n-1&lt;/sub&gt;x&lt;sup&gt;n-1&lt;/sup&gt;+ …+ a&lt;sub&gt;1&lt;/sub&gt;x + a&lt;sub&gt;0&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;去逼近函数&lt;em&gt; y&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;( &lt;em&gt;x&lt;/em&gt; )，把&lt;em&gt; n&lt;/em&gt;+1 个测量值代入&lt;em&gt; Pn&lt;/em&gt;( &lt;em&gt;x&lt;/em&gt; )，可获得&lt;em&gt; n&lt;/em&gt;+1 个一次方程组：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTU1OTQ0Nzg0LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205155944784.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205155944784&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;举例 用热敏电阻测量温度的例子&lt;/p&gt;
&lt;p&gt;热敏电阻的阻值与温度之间的关系是非线性的，而且无法用确切函数式表示。现构造一个三阶多项式 P3 (R) 来逼近这种函数关系。n+1 测量点如下表：&lt;/p&gt;
&lt;p&gt;举例 用热敏电阻测量温度的例子&lt;/p&gt;
&lt;p&gt;热敏电阻的阻值与温度之间的关系是非线性的，而且无法用确切函数式表示。现构造一个三阶多项式 P3 (R) 来逼近这种函数关系。n+1 测量点如下表：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205160147105.png&#34; alt=&#34;image-20211205160147105&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTYwMjMzMDI0LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205160233024.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205160233024&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTYwMzAyODIzLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205160302823.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205160302823&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;插值法中插值点的选择对于逼近的精度有很大影响，通常在函数 y = f (x) 的曲线上曲率大的地方适当加密插值点。&lt;/p&gt;
&lt;p&gt;CPU 影响：增加插值点和多项式的次数能提高逼近精度，但是会增加计算时间。&lt;/p&gt;
&lt;p&gt;较好的方法：采用分段插值法。将逼近的函数根据其变换情况分为几段，然后将每一段区间分别用直线或抛物线去逼近。分段插值的分段点的选取可以按照实际曲线的情况灵活决定，既可以采用等距分段法，又可以采用非等距分段法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205161203575.png&#34; alt=&#34;image-20211205161203575&#34; /&gt;&lt;/p&gt;
&lt;p&gt;分段数越多，线性化精度越高，软件开销也相应增加。&lt;/p&gt;
&lt;p&gt;当分段数多到线段缩成一个点时，实际上就是另一种方法 —— 查表法。&lt;/p&gt;
&lt;h3 id=&#34;734-查表法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#734-查表法&#34;&gt;#&lt;/a&gt; 7.3.4 查表法&lt;/h3&gt;
&lt;p&gt;查表法：就是把事先计算或测得的数据按照一定顺序编制成表格&lt;/p&gt;
&lt;p&gt;查表程序的任务：就是根据被测参数的值或者中间结果，查出最终所需要的结果。&lt;/p&gt;
&lt;p&gt;具体的查表方法：顺序查表法，计算查表法，对分搜索法等。&lt;/p&gt;
&lt;h4 id=&#34;1顺序查表法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1顺序查表法&#34;&gt;#&lt;/a&gt; 1. 顺序查表法&lt;/h4&gt;
&lt;p&gt;顺序查表法是&lt;strong&gt;针对无序排列表格&lt;/strong&gt;的一种方法。其查表方法类似人工查表。因为无序表格中所有各项的&lt;strong&gt;排列均无一定的规律&lt;/strong&gt;，所以只能按照顺序从第一项开始逐项寻找，直到找到所要查找的关键字为止。顺序查表法虽然比较 “笨”，但对于&lt;strong&gt;无序表格或较短表格&lt;/strong&gt;而言，仍是一种比较常用的方法。&lt;/p&gt;
&lt;h4 id=&#34;2计算查表法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2计算查表法&#34;&gt;#&lt;/a&gt; 2. 计算查表法&lt;/h4&gt;
&lt;p&gt;根据所给的数据元素 X&lt;sub&gt;i&lt;/sub&gt; ，通过一定的计算，求出元素 Xi 所对应的数值的地址，然后将该地址单元的内容取出即可。&lt;/p&gt;
&lt;p&gt;这种&lt;strong&gt;有序表格&lt;/strong&gt;要求各元素在表中的排列格式及所占用的空间必须一致，而且各元素是严格按顺序排列。其关键在于找出一个计算表地址的公式，&lt;strong&gt;只要公式存在，查表的时间与表格的长度无关&lt;/strong&gt;。正因为它对表格的要求比较严格，并非任何表格均可采用。&lt;strong&gt;通常它适用于某些数值计算程序、功能键地址转移程序以及数码转换程序等。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;3对分搜索法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3对分搜索法&#34;&gt;#&lt;/a&gt; 3. 对分搜索法&lt;/h4&gt;
&lt;p&gt;先取数组的中间值 D=&lt;em&gt;n&lt;/em&gt;/2 进行查找，与要搜索的&lt;em&gt; X&lt;/em&gt; 值进行比较，若相等，则查到。对于从小到大的顺序来说，如果 X＞&lt;em&gt;n&lt;/em&gt;/2 项，则下一次取&lt;em&gt; n&lt;/em&gt;/2-&lt;em&gt;n&lt;/em&gt; 间的中值，即 3&lt;em&gt;n&lt;/em&gt;/4 与 X 进行比较；若 X＜&lt;em&gt;n&lt;/em&gt;/2 项，则取 0~&lt;em&gt;n&lt;/em&gt;/2 的中值，即&lt;em&gt; n&lt;/em&gt;/4 与 X 进行比较。如此比较下去，则可逐次逼近要搜索的关键字，直到找到为止。&lt;/p&gt;
&lt;h2 id=&#34;74-越界警报处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#74-越界警报处理&#34;&gt;#&lt;/a&gt; 7.4 越界警报处理&lt;/h2&gt;
&lt;h3 id=&#34;741-越限报警程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#741-越限报警程序&#34;&gt;#&lt;/a&gt; 7.4.1 越限报警程序&lt;/h3&gt;
&lt;p&gt;上限报警：若&lt;em&gt; XK&lt;/em&gt; ＞ &lt;em&gt;X&lt;/em&gt;H 则发出上限报警，否则继续执行原定操作。&lt;/p&gt;
&lt;p&gt;下限报警：若&lt;em&gt; XK&lt;/em&gt; ＜ &lt;em&gt;X&lt;/em&gt;L ，则下限报警，否则继续执行原定操作。&lt;/p&gt;
&lt;p&gt;上下限报警：若&lt;em&gt; XK&lt;/em&gt; ＞ &lt;em&gt;X&lt;/em&gt;H，则上限报警，否则判断&lt;em&gt; XK&lt;/em&gt; ＜ &lt;em&gt;X&lt;/em&gt;L 否？若是则下限报警，否则继续执行原定操作。&lt;/p&gt;
&lt;p&gt;具体设计报警程序时，为了避免测量值在极限值一点处来回摆动造成频繁报警，一般应在极限值附近设置一个&lt;strong&gt;回差带&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162520736.png&#34; alt=&#34;image-20211205162520736&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162645265.png&#34; alt=&#34;image-20211205162645265&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;742-越限报警方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#742-越限报警方式&#34;&gt;#&lt;/a&gt; 7.4.2 越限报警方式&lt;/h3&gt;
&lt;h4 id=&#34;1普通声光报警&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1普通声光报警&#34;&gt;#&lt;/a&gt; 1. 普通声光报警&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162858496.png&#34; alt=&#34;image-20211205162858496&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2模拟声光报警&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2模拟声光报警&#34;&gt;#&lt;/a&gt; 2. 模拟声光报警&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162949538.png&#34; alt=&#34;image-20211205162949538&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162958377.png&#34; alt=&#34;image-20211205162958377&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;3语音声光报警&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3语音声光报警&#34;&gt;#&lt;/a&gt; 3. 语音声光报警&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205163533852.png&#34; alt=&#34;image-20211205163533852&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;考试要求-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-6&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;总体&lt;/p&gt;
&lt;p&gt;填空选择&lt;/p&gt;
&lt;p&gt;大题：各种滤波方法，给一种滤波方法，让你处理数据&lt;/p&gt;
&lt;p&gt;7.1 选填判&lt;/p&gt;
&lt;p&gt;7.2 7.2.1 7.2.2 7.2.3 为重点，7.2.4 不考，只看前三种&lt;/p&gt;
&lt;p&gt;7.3.1 标出显示结果或者的根据显示情况反推，千万写一下 7-1，背好公式&lt;/p&gt;
&lt;p&gt;主要是掌握线性变换，非线性及其后面了解为主&lt;/p&gt;
&lt;h2 id=&#34;课后习题-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题-6&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h2&gt;
&lt;p&gt;1．在计算机控制系统中，一般要对测量数据进行哪些予处理技&lt;/p&gt;
&lt;p&gt;术？&lt;/p&gt;
&lt;p&gt;2．何为数字调零？何为系统校准？&lt;/p&gt;
&lt;p&gt;3．简述数字滤波及其特点。&lt;/p&gt;
&lt;p&gt;4．简述各种数字滤波方法的原理或算法及适用场合。&lt;/p&gt;
&lt;p&gt;5．结合图 7-3，分析说明标度变换的概念及其变换原理。&lt;/p&gt;
&lt;p&gt;6．某温度测量系统（假设为线性关系）的测温范围为 0~150℃，&lt;/p&gt;
&lt;p&gt;经 ADC0809 转换后对应的数字量为 00H~FFH，试写出它的标&lt;/p&gt;
&lt;p&gt;度变换算式。&lt;/p&gt;
&lt;p&gt;7．在数据处理中，何为查表法？它能完成哪些功能？一般有哪&lt;/p&gt;
&lt;p&gt;些查表方法？&lt;/p&gt;
&lt;p&gt;8．在计算机控制系统中，为什么要设置越限报警？有哪些情况&lt;/p&gt;
&lt;p&gt;需要报警？&lt;/p&gt;
&lt;h1 id=&#34;第8章-抗干扰技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第8章-抗干扰技术&#34;&gt;#&lt;/a&gt; 第 8 章 抗干扰技术&lt;/h1&gt;
&lt;h2 id=&#34;引言-11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-11&#34;&gt;#&lt;/a&gt; 引言&lt;/h2&gt;
&lt;p&gt;计算机控制系统的被控变量分布在生产现场的各个角落，因而计算机是处于干扰频繁的恶劣环境中 **，干扰是有用信号以外的噪声，这些干扰会影响系统的测控精度，降低系统的可靠性，甚至导致系统的运行混乱，造成生产事故。**&lt;/p&gt;
&lt;p&gt;但干扰是客观存在的，所以，人们必须研究干扰，以采取相应的抗干扰措施。本章主要讨论干扰的来源、传播途径及抗干扰的措施。&lt;/p&gt;
&lt;h2 id=&#34;81干扰的来源与传播途径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#81干扰的来源与传播途径&#34;&gt;#&lt;/a&gt; 8.1 干扰的来源与传播途径&lt;/h2&gt;
&lt;h3 id=&#34;811-干扰的来源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#811-干扰的来源&#34;&gt;#&lt;/a&gt; 8.1.1 干扰的来源&lt;/h3&gt;
&lt;p&gt;分为外部干扰和内部干扰。&lt;/p&gt;
&lt;p&gt;外部干扰：&lt;strong&gt;由使用条件和外部环境因素决定&lt;/strong&gt;。有：天体干扰、天电干扰、电气设备的干扰、具有瞬变过程的设备的干扰、电源的工频干扰。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205165809717.png&#34; alt=&#34;image-20211205165809717&#34; /&gt;&lt;/p&gt;
&lt;p&gt;内部干扰：由系统的结构布局、制造工艺所引入的。有分布电容、分布电感引起的耦合感应，电磁场辐射感应，&lt;strong&gt;长线传输&lt;/strong&gt;造成的波反射；&lt;strong&gt;多点接地&lt;/strong&gt;造成的电位差引入的干扰；装置及设备中各种寄生振荡引入的干扰以及热噪声、闪变噪声、尖峰噪声等引入的干扰；甚至元器件产生的噪声。&lt;/p&gt;
&lt;h3 id=&#34;812-干扰的传播途径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#812-干扰的传播途径&#34;&gt;#&lt;/a&gt; 8.1.2 干扰的传播途径&lt;/h3&gt;
&lt;p&gt;干扰传播的途径主要有三种：静电耦合，磁场耦合，公共阻抗耦合。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTcwNjMwNzkwLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205170630790.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205170630790&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;连根并排导线之间会构成分布电容。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:/Users/LEGION/AppData/Roaming/Typora/typora-user-images/image-20211205170641266.png&amp;quot; alt=&amp;quot;image-20211205170641266&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;空间的磁场耦合是通过导体间的&lt;strong&gt;互感耦合&lt;/strong&gt;进来的。在任何载流导体周围空间都会产生磁场，而交变磁场则对其周围闭合电路产生感应电动势。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTcwNjQ4MDI1LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205170648025.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205170648025&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;公共阻抗耦合发生在两个电路的电路流经一个公共阻抗时，一个电路在该阻抗上的电压将会影响到另一个电路，从而产生干扰噪声的影响。&lt;/p&gt;
&lt;h2 id=&#34;82硬件抗干扰措施&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#82硬件抗干扰措施&#34;&gt;#&lt;/a&gt; 8.2 硬件抗干扰措施&lt;/h2&gt;
&lt;h3 id=&#34;引言-12&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-12&#34;&gt;#&lt;/a&gt; 引言&lt;/h3&gt;
&lt;p&gt;了解了干扰的来源与传播途径，我们就可以采取相应的抗干扰措施。在硬件抗干扰措施中，除了按照干扰的三种主要作用方式 ——&lt;strong&gt; 串模、共模及长线传输干扰&lt;/strong&gt;来分别考虑外，还要从&lt;strong&gt;布线、电源、接地&lt;/strong&gt;等方面考虑。&lt;/p&gt;
&lt;h3 id=&#34;821-串模干扰抑制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#821-串模干扰抑制&#34;&gt;#&lt;/a&gt; 8.2.1 串模干扰抑制&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205191022817.png&#34; alt=&#34;image-20211205191022817&#34; /&gt;&lt;/p&gt;
&lt;p&gt;串模干扰：叠加在被测信号上的干扰噪声，即干扰源串联在信号回路中。&lt;/p&gt;
&lt;p&gt;U&lt;sub&gt;s&lt;/sub&gt; 为信号源电压，U&lt;sub&gt;n&lt;/sub&gt; 为串模干扰电源，临近导线（干扰线）有交变电流 I&lt;sub&gt;a&lt;/sub&gt; 流过，由 I&lt;sub&gt;a&lt;/sub&gt; 产生的电磁干扰信号就会通过分布电容 C&lt;sub&gt;1&lt;/sub&gt; 和 C&lt;sub&gt;2&lt;/sub&gt; 的耦合，引至计算机控制系统的输入端。&lt;/p&gt;
&lt;p&gt;目前常采用双绞线与滤波器两种措施。&lt;/p&gt;
&lt;h4 id=&#34;1双绞线做信号引线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1双绞线做信号引线&#34;&gt;#&lt;/a&gt; 1. 双绞线做信号引线&lt;/h4&gt;
&lt;p&gt;双绞线抗干扰原因：外界电磁场会在双绞线相邻的小环路上形成相反方向的感应电势，从而互相抵消减弱干扰作用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205201728563.png&#34; alt=&#34;image-20211205201728563&#34; /&gt;&lt;/p&gt;
&lt;p&gt;应用场合：可用来&lt;strong&gt;传输模拟信号和数字信号&lt;/strong&gt;，用于点对点连接和多点连接应用场合，传输距离为几公里，数据传输速率可达 2Mbps。&lt;/p&gt;
&lt;p&gt;双绞线相邻的扭绞处之间为双绞线的节距，双绞线不同的节距，双绞线不同节距会对串模干扰起到不同的抑制效果：节距越小，干扰的衰减比越大，抑制干扰的屏蔽效果越好。&lt;/p&gt;
&lt;h4 id=&#34;2引入滤波电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2引入滤波电路&#34;&gt;#&lt;/a&gt; 2. 引入滤波电路&lt;/h4&gt;
&lt;p&gt;根据串模干扰频率与被测信号频率，可以选用低通、高通、带通等滤波器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;低通滤波器－适用干扰频率比被测信号频率高；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高通滤波器－干扰频率比被测信号频率低；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带通滤波器－干扰频率落在被测信号频率的两侧；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205202115604.png&#34; alt=&#34;image-20211205202115604&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;822-共模干扰抑制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#822-共模干扰抑制&#34;&gt;#&lt;/a&gt; 8.2.2 共模干扰抑制&lt;/h3&gt;
&lt;p&gt;共模干扰：计算机控制系统输入通道中信号放大器两个输入端上共有的干扰电压，可以是交流电压，其幅值达几伏甚至更高，这取决于现场产生干扰的环境条件和计算机等设备的接地情况。&lt;/p&gt;
&lt;p&gt;产生原因：不同 “地” 之间存在的电压，以及模拟信号系统对地漏阻抗。&lt;/p&gt;
&lt;p&gt;措施：变压器隔离、光电隔离、浮地屏蔽。&lt;/p&gt;
&lt;h4 id=&#34;1变压器隔离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1变压器隔离&#34;&gt;#&lt;/a&gt; 1. 变压器隔离&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205203634431.png&#34; alt=&#34;image-20211205203634431&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2光电隔离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2光电隔离&#34;&gt;#&lt;/a&gt; 2. 光电隔离&lt;/h4&gt;
&lt;p&gt;数字信号隔离&lt;/p&gt;
&lt;h4 id=&#34;image-20211205203922685&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#image-20211205203922685&#34;&gt;#&lt;/a&gt; &lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205203922685.png&#34; alt=&#34;image-20211205203922685&#34; /&gt;&lt;/h4&gt;
&lt;p&gt;模拟信号隔离&lt;/p&gt;
&lt;p&gt;利用光耦隔离器的&lt;strong&gt;线性放大区&lt;/strong&gt;，也可传送模拟信号而隔离电磁干扰，即在模拟信号通道中进行隔离。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjA0NjQ4ODQyLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205204648842.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205204648842&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模拟信号隔离
&lt;ul&gt;
&lt;li&gt;优点：使用少量的光耦，成本低&lt;/li&gt;
&lt;li&gt;缺点：光耦挑选得不合适，会影响系统的精度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数字信号隔离
&lt;ul&gt;
&lt;li&gt;优点：调试简单，不影响系统的精度&lt;/li&gt;
&lt;li&gt;缺点：适用较多光耦器件，成本高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;光耦价格越来越低廉，目前实际工程中主要使用光耦隔离器的数字信号隔离方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3浮地屏蔽&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3浮地屏蔽&#34;&gt;#&lt;/a&gt; 3. 浮地屏蔽&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205205504648.png&#34; alt=&#34;image-20211205205504648&#34; /&gt;&lt;/p&gt;
&lt;p&gt;浮地屏蔽：利用屏蔽层使输入信号的 “模拟地” 浮空，使共模输入阻抗大为提高，共模电压在输入回路中引起的共模电流大为减少，从而抑制了共模干扰的来源，使共模干扰降至很低。&lt;/p&gt;
&lt;h3 id=&#34;823-长线传输干扰抑制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#823-长线传输干扰抑制&#34;&gt;#&lt;/a&gt; 8.2.3 长线传输干扰抑制&lt;/h3&gt;
&lt;p&gt;信号在长线中传输除了会受到外界干扰和引起信号延迟外，还可能会产生波反射现象。&lt;/p&gt;
&lt;p&gt;当信号在长线中传输时，由于传输线的分布电容和分布电感的影响，信号会在传输线内部产生正向前进的电压波和电流波，称为入射波。&lt;/p&gt;
&lt;p&gt;如果传输线的终端阻抗与传输线的阻抗不匹配，入射波达到终端时会引起发射；同样，反射波达到传输线始端时，如果始端阻抗不匹配，又会引起新的反射。多次反射后，使信号波形严重地畸变。&lt;/p&gt;
&lt;h4 id=&#34;1波阻抗的测量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1波阻抗的测量&#34;&gt;#&lt;/a&gt; 1. 波阻抗的测量&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205210901330.png&#34; alt=&#34;image-20211205210901330&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2终端阻抗匹配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2终端阻抗匹配&#34;&gt;#&lt;/a&gt; 2. 终端阻抗匹配&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205211117730.png&#34; alt=&#34;image-20211205211117730&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;3始端阻抗匹配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3始端阻抗匹配&#34;&gt;#&lt;/a&gt; 3. 始端阻抗匹配&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjExNTU1NTE1LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205211555515.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205211555515&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;824-信号线的选择与敷设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#824-信号线的选择与敷设&#34;&gt;#&lt;/a&gt; 8.2.4 信号线的选择与敷设&lt;/h3&gt;
&lt;h4 id=&#34;1信号线的选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1信号线的选择&#34;&gt;#&lt;/a&gt; 1. 信号线的选择&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjExODUwOTE1LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205211850915.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205211850915&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;2信号线的敷设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2信号线的敷设&#34;&gt;#&lt;/a&gt; 2. 信号线的敷设&lt;/h4&gt;
&lt;p&gt;信号线的敷设要注意以下事项：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）模拟信号线与数字信号线不能合用同一根电缆，要绝对避免信号线与电源线合用同一根电缆。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）屏蔽信号线的屏蔽层要一端接地，同时要避免多点接地。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）信号线的敷设要尽量远离干扰源。如避免敷设在大容量变压器、电动机等电器设备的附近。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjEyMjE5NTc3LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205212219577.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205212219577&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）信号电缆与电源电缆必须分开，并尽量避免平行敷设。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205212318039.png&#34; alt=&#34;image-20211205212318039&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;825-电源系统的抗干扰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#825-电源系统的抗干扰&#34;&gt;#&lt;/a&gt; 8.2.5 电源系统的抗干扰&lt;/h3&gt;
&lt;p&gt;计算机控制系统一般是由交流电网供电，电网电压与频率的波动将直接影响到控制系统的可靠性与稳定性。电源的干扰是计算机控制系统的一个主要干扰。&lt;/p&gt;
&lt;h4 id=&#34;1交流电源系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1交流电源系统&#34;&gt;#&lt;/a&gt; 1. 交流电源系统&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205212706251.png&#34; alt=&#34;image-20211205212706251&#34; /&gt;&lt;/p&gt;
&lt;p&gt;措施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选用供电比较稳定的进线电源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用干扰抑制器消除尖峰干扰&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205213053797.png&#34; alt=&#34;image-20211205213053797&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用交流稳压器稳定电网电压&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205213151888.png&#34; alt=&#34;image-20211205213151888&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用不间断电源（UPS）保证不间断供电&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205213200645.png&#34; alt=&#34;image-20211205213200645&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;掉电保护电路&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205213354211.png&#34; alt=&#34;image-20211205213354211&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2直流电源系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2直流电源系统&#34;&gt;#&lt;/a&gt; 2. 直流电源系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;交变电源变压器的屏蔽&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205214208447.png&#34; alt=&#34;image-20211205214208447&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用直流开关电源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用 DC-DC 变换器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为每块电路板设立独立的直流电源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集成电路块的 VCC 加路旁电容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;826-接地系统的抗干扰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#826-接地系统的抗干扰&#34;&gt;#&lt;/a&gt; 8.2.6 接地系统的抗干扰&lt;/h3&gt;
&lt;p&gt;接实地是指与大地连接；接虚地指的是与电位基准点连接，当这个基准点与大地电气绝缘，则称为福地连接。&lt;/p&gt;
&lt;p&gt;工作接地、保护接地，本节讨论工作接地技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算机控制系统中的地线：&lt;/p&gt;
&lt;p&gt;数字地&lt;/p&gt;
&lt;p&gt;系统地&lt;/p&gt;
&lt;p&gt;交流地&lt;/p&gt;
&lt;p&gt;模拟地&lt;/p&gt;
&lt;p&gt;保护地&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1单点接地与多点接地&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1单点接地与多点接地&#34;&gt;#&lt;/a&gt; 1. 单点接地与多点接地&lt;/h4&gt;
&lt;p&gt;低频电路应单点接地，主要是避免形成产生干扰的地环路；&lt;/p&gt;
&lt;p&gt;高频电路应该就近多点接地，主要是为了避免 “长线传输” 引入干扰。&lt;/p&gt;
&lt;h4 id=&#34;2分别回流法单点接地&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2分别回流法单点接地&#34;&gt;#&lt;/a&gt; 2. 分别回流法单点接地&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjIwMDI5NDk2LnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205220029496.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205220029496&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;3输入系统的接地&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3输入系统的接地&#34;&gt;#&lt;/a&gt; 3. 输入系统的接地&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205215705221.png&#34; alt=&#34;image-20211205215705221&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;4印制电路板的地线分布&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4印制电路板的地线分布&#34;&gt;#&lt;/a&gt; 4. 印制电路板的地线分布&lt;/h4&gt;
&lt;p&gt;设计印制线路板应遵守下列原则，以免系统内部地线产生干扰。&lt;/p&gt;
&lt;p&gt;（1）TTL，CMOS 器件的地线要呈辐射状，不能形成环形。&lt;/p&gt;
&lt;p&gt;（2）印制线路板上的地线要根据通过的电流大小决定其宽 度，不要小于 3mm，在可能的情况下，&lt;strong&gt;地线越宽越好&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（3）旁路电容的地线不能长，应尽量缩短。&lt;/p&gt;
&lt;p&gt;（4）大电流的零电位地线应尽量宽，而且必须和小信号的地分开。&lt;/p&gt;
&lt;h4 id=&#34;5主机系统的接地&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5主机系统的接地&#34;&gt;#&lt;/a&gt; 5. 主机系统的接地&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;全机一点接地&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205220241006.png&#34; alt=&#34;image-20211205220241006&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机外壳接地，机芯浮地&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjIwMzQ5NDMzLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205220349433.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211205220349433&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多机系统接地&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205220433008.png&#34; alt=&#34;image-20211205220433008&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于远距离的计算机网络，多台计算机之间的数据通信，通过隔离的办法把地分开。例如，采用变压器隔离技术、光电隔离技术或无线通信技术。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;83软件抗干扰措施&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#83软件抗干扰措施&#34;&gt;#&lt;/a&gt; 8.3 软件抗干扰措施&lt;/h2&gt;
&lt;p&gt;在控制系统的输入输出通道中，采用数字滤波方法，即采用某种计算方法对通道的信号进行数字处理，以削弱或滤除干扰噪声。&lt;/p&gt;
&lt;p&gt;而对于那些可能穿过通道而进入 CPU 的干扰，可采取&lt;strong&gt;指令冗余、软件陷阱以及程序运行监视&lt;/strong&gt;等措施来使 CPU 恢复正常工作。&lt;/p&gt;
&lt;h3 id=&#34;831-指令冗余技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#831-指令冗余技术&#34;&gt;#&lt;/a&gt; 8.3.1 指令冗余技术&lt;/h3&gt;
&lt;p&gt;要解决的问题：程序跑飞&lt;/p&gt;
&lt;p&gt;解决方法：采用指令冗余技术&lt;/p&gt;
&lt;p&gt;原则：在对程序流向起决定作用的指令之前以及影响系统工作状态的重要指令之前都应插入两、三条 NOP 指令，还可以每隔一定数目的指令插入 NOP 指令，以保证跑飞的程序迅速纳入正确轨道。&lt;/p&gt;
&lt;p&gt;优点：指令冗余技术可以减少程序出现错误跳转的次数。&lt;/p&gt;
&lt;p&gt;指令冗余技术可以减少程序出现错误跳转的次数，但不能保证在失控期间不干坏事，更不能保证程序纳入正常轨道后就太平无事。&lt;/p&gt;
&lt;h3 id=&#34;832-软件陷阱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#832-软件陷阱&#34;&gt;#&lt;/a&gt; 8.3.2 软件陷阱&lt;/h3&gt;
&lt;p&gt;指令冗余使飞跑的程序安定下来是有条件的，首先跑飞的程序必须落到程序区，其次必须要执行到冗余指令。当跑飞的程序落到非程序区时，对此情况的措施就是设立软件陷阱。&lt;/p&gt;
&lt;p&gt;软件陷阱：在非程序区设置拦截措施，使程序进入陷阱，即通过一条引导指令，强行将跑飞的程序引向一个指定的地址。&lt;/p&gt;
&lt;p&gt;举例：若我们把这段程序的入口标号称为 ERROR 的话，软件陷阱即为一条 JMP ERROR 指令。软件陷阱是由 3 条指令构成：&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;figcaption data-lang=&#34;txt&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;NOP&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;NOP&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;JMP ERROR&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;84程序运行监视系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#84程序运行监视系统&#34;&gt;#&lt;/a&gt; 8.4 程序运行监视系统&lt;/h2&gt;
&lt;p&gt;程序跑飞到一个临时的死循环中，指令冗余和软件陷阱技术也无能为力，此时必须强制系统复位，摆脱死循环。&lt;/p&gt;
&lt;p&gt;由于操作者不可能一直监视系统，所以需要一个独立于 CPU 之外的监视系统，&lt;strong&gt;在程序陷入死循环时，能及时发现并自动复位系统，这就是看守大门作用的程序运行监视系统。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;841-watchingdog-timer工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#841-watchingdog-timer工作原理&#34;&gt;#&lt;/a&gt; 8.4.1 Watchingdog Timer 工作原理&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205225553822.png&#34; alt=&#34;image-20211205225553822&#34; /&gt;&lt;/p&gt;
&lt;p&gt;T1&amp;lt;T2&lt;/p&gt;
&lt;h3 id=&#34;842-watchingdog-timer实现方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#842-watchingdog-timer实现方法&#34;&gt;#&lt;/a&gt; 8.4.2 Watchingdog Timer 实现方法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205225559118.png&#34; alt=&#34;image-20211205225559118&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;考试要求-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-7&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;考察选填判，不考大题&lt;/p&gt;
&lt;h2 id=&#34;课后习题-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题-7&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h2&gt;
&lt;p&gt;1．简述干扰的来源与传播途径。&lt;/p&gt;
&lt;p&gt;2．串模干扰的成因是什么？如何抑制串模干扰？&lt;/p&gt;
&lt;p&gt;3．共模干扰的成因是什么？如何抑制共模干扰？&lt;/p&gt;
&lt;p&gt;4．结合图 8-11，分析说明利用光耦隔离器的开关特性也可以应用在模拟量输入或输出通道中。&lt;/p&gt;
&lt;p&gt;5．在计算机控制系统中，敷设信号线时应注意哪些问题？&lt;/p&gt;
&lt;p&gt;6．在计算机控制系统中，大致有哪几种地？最终如何接地？&lt;/p&gt;
&lt;p&gt;7．结合图 8-30，简述程序运行监视系统的工作原理。&lt;/p&gt;
&lt;h1 id=&#34;第9章-数字控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第9章-数字控制器&#34;&gt;#&lt;/a&gt; 第 9 章 数字控制器&lt;/h1&gt;
&lt;h2 id=&#34;引言-13&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言-13&#34;&gt;#&lt;/a&gt; 引言&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;自动化控制系统的核心是控制器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;控制器的任务是按照一定的控制规律，产生满足工艺要求的控制信号，以输出驱动执行器，达到自动控制的目的。&lt;/p&gt;
&lt;p&gt;在传统的模拟控制系统中，控制器的控制规律或控制作用是由仪表或电子装置的硬件电路完成的，而在计算机控制系统中，除了计算机装置以外，更主要的体现在软件算法上，即数字控制器的设计上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数字控制器的设计主要有连续化设计和直接离散化设计两种设计方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;复杂的过程控制系统，如串级控制、前馈 - 反馈控制和数字程序控制也可以通过计算机实现其控制算法。&lt;/p&gt;
&lt;h2 id=&#34;91-数字控制系统的数学描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#91-数字控制系统的数学描述&#34;&gt;#&lt;/a&gt; 9.1 数字控制系统的数学描述&lt;/h2&gt;
&lt;p&gt;Z 变换&lt;/p&gt;
&lt;p&gt;Z 逆变换&lt;/p&gt;
&lt;p&gt;差分方程求解&lt;/p&gt;
&lt;h2 id=&#34;92-数字控制器的连续化设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#92-数字控制器的连续化设计&#34;&gt;#&lt;/a&gt; 9.2 数字控制器的连续化设计&lt;/h2&gt;
&lt;h3 id=&#34;911-数字控制器的连续化设计步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#911-数字控制器的连续化设计步骤&#34;&gt;#&lt;/a&gt; 9.1.1 数字控制器的连续化设计步骤&lt;/h3&gt;
&lt;p&gt;设计思想：将整个系统看作模拟系统，设计模拟控制器后再进行控制器的离散化。这种设计方法又称为间接设计法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207233103506.png&#34; alt=&#34;image-20211207233103506&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设计步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设计假想的连续控制器 D (s)&lt;/p&gt;
&lt;p&gt;一种方法是事先确定控制器的结构，如后面将要重点介绍的 PID 算法等，然后通过其控制参数的整定完成设计。&lt;/p&gt;
&lt;p&gt;另一种设计方法是应用连续控制系统的设计方法如频率特性法、根轨迹法等，来设计出控制器的结构和参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 D (s) 离散化为 D (z)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;双线性变换法&lt;/p&gt;
&lt;p&gt;D (s) 稳定，D (z) 也稳定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;差分变化法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前向差分法&lt;/li&gt;
&lt;li&gt;后向差分法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可由数值微分转化成差分方程求得&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计由计算机实现的控制算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;校验&lt;/p&gt;
&lt;p&gt;需按&lt;strong&gt;闭环系统性能&lt;/strong&gt;进行校验，可采用&lt;strong&gt;数字仿真方法&lt;/strong&gt;验证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;912-pid控制规律&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#912-pid控制规律&#34;&gt;#&lt;/a&gt; 9.1.2 PID 控制规律&lt;/h3&gt;
&lt;p&gt;PID 控制即是对偏差信号按&lt;strong&gt;比例、积分、微分&lt;/strong&gt;的函数关系进行运算，其运算结果用以输出控制。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207234423591.png&#34; alt=&#34;image-20211207234423591&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;1比例控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1比例控制&#34;&gt;#&lt;/a&gt; 1. 比例控制&lt;/h4&gt;
&lt;p&gt;作用：使控制器的输出与输入偏差成比例关系。&lt;/p&gt;
&lt;p&gt;比例系数越大，控制作用越强，控制系统的动态特性越好；比例系数越小，控制作用越弱。&lt;/p&gt;
&lt;p&gt;优点：调节及时&lt;/p&gt;
&lt;p&gt;缺点：系统存在余差&lt;/p&gt;
&lt;p&gt;对于扰动较大、惯性较大的系统，若采用单纯的比例控制器，难于兼顾动态和静态特性，因此需要配合其他控制规律。&lt;/p&gt;
&lt;h4 id=&#34;2积分控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2积分控制&#34;&gt;#&lt;/a&gt; 2. 积分控制&lt;/h4&gt;
&lt;p&gt;作用：使控制器的输出与输入偏差的积分成比例关系。&lt;/p&gt;
&lt;p&gt;特点：控制器的输出不仅与输入的偏差的大小有关，还与偏差存在的时间相关。&lt;/p&gt;
&lt;p&gt;效果：消除余差。&lt;/p&gt;
&lt;p&gt;缺点：控制作用不能及时克服扰动的影响，致使被调参数的动态偏差大，稳定性下降，因此很少单独使用。&lt;/p&gt;
&lt;h4 id=&#34;3微分控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3微分控制&#34;&gt;#&lt;/a&gt; 3. 微分控制&lt;/h4&gt;
&lt;p&gt;作用：使控制器的输出与输入偏差的变化速度成比例关系。&lt;/p&gt;
&lt;p&gt;工业上实际采用的都是一种近似的实际微分作用，也称不完全微分作用。&lt;/p&gt;
&lt;p&gt;效果：提前给出较大的调节作用，从而加快系统的动作速度，减小了调节时间，具有超前控制作用。&lt;/p&gt;
&lt;p&gt;缺点：对于一个固定的偏差，不管其他数值多大，都不会产生微分作用，即不能消除余差；所以微分作用不宜单独使用。&lt;/p&gt;
&lt;h4 id=&#34;4比例积分微分控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4比例积分微分控制&#34;&gt;#&lt;/a&gt; 4. 比例积分微分控制&lt;/h4&gt;
&lt;p&gt;即：PID 控制，将比例、积分、微分作用综合起来。&lt;/p&gt;
&lt;p&gt;阶跃信号也是比例、积分、微分三者响应曲线的叠加。&lt;/p&gt;
&lt;p&gt;当偏差阶跃信号刚一出现，微分作用最大，使控制器&lt;/p&gt;
&lt;h2 id=&#34;93-数字控制器离散化设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#93-数字控制器离散化设计&#34;&gt;#&lt;/a&gt; 9.3 数字控制器离散化设计&lt;/h2&gt;
&lt;h2 id=&#34;94-数字串级控制器的设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#94-数字串级控制器的设计&#34;&gt;#&lt;/a&gt; 9.4 数字串级控制器的设计&lt;/h2&gt;
&lt;h2 id=&#34;95-数字程序控制器的设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#95-数字程序控制器的设计&#34;&gt;#&lt;/a&gt; 9.5 数字程序控制器的设计&lt;/h2&gt;
&lt;h2 id=&#34;考试要求-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-8&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;重点，但是不太好考大题，要求掌握各种 PID 控制是什么东西，每一种变形有什么特点（积分分离，非积分分离，抗积分饱和特点含义）&lt;/p&gt;
&lt;p&gt;9.1.4 考察差别、特点&lt;/p&gt;
&lt;p&gt;9.2 直接或间接设计，考察了解的概念&lt;/p&gt;
&lt;h1 id=&#34;第10章-控制网络技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第10章-控制网络技术&#34;&gt;#&lt;/a&gt; 第 10 章 控制网络技术&lt;/h1&gt;
&lt;h2 id=&#34;101-数据通信基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#101-数据通信基础&#34;&gt;#&lt;/a&gt; 10.1 数据通信基础&lt;/h2&gt;
&lt;p&gt;计算机网络就是利用通信线路和通信设备，把分布在不同地理位置上的具备独立功能的多台计算机、终端及其附属设备连接起来的一种网络。&lt;/p&gt;
&lt;p&gt;数据通信是计算机控制网络的基础。&lt;/p&gt;
&lt;h3 id=&#34;1011-数据通信系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1011-数据通信系统&#34;&gt;#&lt;/a&gt; 10.1.1 数据通信系统&lt;/h3&gt;
&lt;h4 id=&#34;1通信系统的构成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1通信系统的构成&#34;&gt;#&lt;/a&gt; 1. 通信系统的构成&lt;/h4&gt;
&lt;p&gt;数据通信：计算机与计算机之间的数据交换被称为数据通信。&lt;/p&gt;
&lt;p&gt;数据通信实质：以计算机为中心，通过某些通信线路与设备，对二进制编码的字母、数字、符号以及数字化的声音、图像信息进行的传输、交换和处理。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206132854645.png&#34; alt=&#34;image-20211206132854645&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组成：
&lt;ul&gt;
&lt;li&gt;报文：即需要传输的数据&lt;/li&gt;
&lt;li&gt;发送设备&lt;/li&gt;
&lt;li&gt;接收设备&lt;/li&gt;
&lt;li&gt;传输介质：发送设备与接收设备之间的物理通路。&lt;/li&gt;
&lt;li&gt;协议：控制数据通信的一系列规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据通信过程：
&lt;ul&gt;
&lt;li&gt;数据打包&lt;/li&gt;
&lt;li&gt;数据转换与编码&lt;/li&gt;
&lt;li&gt;数据传输&lt;/li&gt;
&lt;li&gt;数据转换与译码&lt;/li&gt;
&lt;li&gt;数据解包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2数据通信方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2数据通信方式&#34;&gt;#&lt;/a&gt; 2. 数据通信方式&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206133356691.png&#34; alt=&#34;image-20211206133356691&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数据通信的基本传输方式：并行通信和串行通信两种。&lt;/p&gt;
&lt;p&gt;并行通信：指所传输数据的各位同时发送或接收数据。&lt;/p&gt;
&lt;p&gt;串行通信：传送数据的各位按顺序一位一位地发送或接收。&lt;/p&gt;
&lt;p&gt;波特率：串行通信中的一个重要指标。定义为每秒钟传送二进制数码的位数，单位是位每秒，用 b/s 表示。&lt;/p&gt;
&lt;p&gt;在串行异步通信中，波特率为每秒钟传送的字符数与每个字符位数的乘积。&lt;/p&gt;
&lt;h4 id=&#34;3数据通信制式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3数据通信制式&#34;&gt;#&lt;/a&gt; 3. 数据通信制式&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206134123671.png&#34; alt=&#34;image-20211206134123671&#34; /&gt;&lt;/p&gt;
&lt;p&gt;按通信线路上信息传输方向与时间的关系，可分为 3 种通信制式：单工通信、半双工通信、全双工通信。&lt;/p&gt;
&lt;h3 id=&#34;1012-数据传输编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1012-数据传输编码&#34;&gt;#&lt;/a&gt; 10.1.2 数据传输编码&lt;/h3&gt;
&lt;p&gt;数据通信中需要传输数据信息，而信息必须转换为数字的或模拟的信号后才能通过通信线路传送，这种信息转换被称为传输编码。&lt;/p&gt;
&lt;h4 id=&#34;1数字信息的数字信号编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1数字信息的数字信号编码&#34;&gt;#&lt;/a&gt; 1. 数字信息的数字信号编码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常用的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单极性编码：单极性码用一种电平代表 “1”，用另一种电平代表 “0”，而且通常 “0” 对应的电平 0V。&lt;/p&gt;
&lt;p&gt;具有直流成分，且不含同步信息。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206135155573.png&#34; alt=&#34;image-20211206135155573&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双极性编码：如图 (b) 所示，它使用正、负两种电平，因此有效地减小了传输线上的直流分量，但不归零码仍然没有彻底解决信号同步问题。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206135352057.png&#34; alt=&#34;image-20211206135352057&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;归零编码方法&lt;/p&gt;
&lt;p&gt;如图 (c) 所示，它使用正、负、零三种电平，信号在数据位的中间发生跳变，位中间的跳变既作为同步时钟，也作为数据：归零码较好地解决了信号同步问题，&lt;strong&gt;但由于每一位数据都要产生两次跳变，因此占用更多的带宽。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;曼彻斯特码&lt;/p&gt;
&lt;p&gt;如图 (d) 所示，用数据位的中间产生跳变的方向表示数值。“负” 到 “正” 的跳变代表 “1”，“正” 到 “负” 的跳变代表 “0”。&lt;strong&gt;该跳变还被用作信号同步&lt;/strong&gt;，即编码数据中自带时钟信息，保证了发双方的绝对同步。&lt;strong&gt;以太网中就使用了曼彻斯特码。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206135732221.png&#34; alt=&#34;image-20211206135732221&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;差动曼彻斯特码&lt;/p&gt;
&lt;p&gt;如图 (e) 所示，它用数据位中间的跳变携带同步信息，&lt;strong&gt;由数据位起始处是否有跳变来传递数值&lt;/strong&gt;。有跳变表示 “0”，无跳变表示 “1”。&lt;strong&gt;令牌环网中就使用了差动曼彻斯特码。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图 (f)、(g) 分别表示接收端从编码数据中分离出的解码时钟与解码数据。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206140036363.png&#34; alt=&#34;image-20211206140036363&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2数字信息的模拟信息编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2数字信息的模拟信息编码&#34;&gt;#&lt;/a&gt; 2. 数字信息的模拟信息编码&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206140131919.png&#34; alt=&#34;image-20211206140131919&#34; /&gt;&lt;/p&gt;
&lt;p&gt;信号调制：采用数字信息的模拟信号转换技术将数字信号传输变为模拟信号传输。&lt;/p&gt;
&lt;p&gt;将数字信号调制为模拟信号有三种方式：&lt;strong&gt;调幅、调频与调相。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;3基带传输与频带传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3基带传输与频带传输&#34;&gt;#&lt;/a&gt; 3. 基带传输与频带传输&lt;/h4&gt;
&lt;p&gt;按传输线上信号的种类，数据通信可分为：基带传输与频带传输。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基带传输：是指直接用电脉冲信号代表数字信号 0 或 1 进行传输。基带，是指&lt;strong&gt;电信号所固有的频带&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;优缺点：不需要调制解调器，安装、维护投资小，但存在信息传送容量小，每条传输线只可传送一路信号且传送距离短的缺点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;频带传输：用基带信号对载波信号调制后进行传输。&lt;/p&gt;
&lt;p&gt;优缺点：利用载波传输信号可以减小线路干扰对传输信号的影响，实现远距离传输。用这种传输技术，可以在一条通信线路上，通过频分复用 (FDM) 将其划分为几个信道，从而支持多路信号的传输。频带传输的安装维护费用较基带传输时高，但是它具有较高的信息传递量，且可覆盖较大的范围。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1013-多路复用技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1013-多路复用技术&#34;&gt;#&lt;/a&gt; 10.1.3 多路复用技术&lt;/h3&gt;
&lt;p&gt;多路复用技术：把多路独立信号在一条信道上进行传输的技术，其作用相当于将单条传输信道划分为多个子信道，以实现网络中若干节点共享通信信道的目的，提高通信线路的利用率。&lt;/p&gt;
&lt;h4 id=&#34;1频分多路复用fdm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1频分多路复用fdm&#34;&gt;#&lt;/a&gt; 1. 频分多路复用（FDM）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206143631767.png&#34; alt=&#34;image-20211206143631767&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206145251161.png&#34; alt=&#34;image-20211206145251161&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2时分多路复用tdm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2时分多路复用tdm&#34;&gt;#&lt;/a&gt; 2. 时分多路复用（TDM）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206145336003.png&#34; alt=&#34;image-20211206145336003&#34; /&gt;&lt;/p&gt;
&lt;p&gt;时分多路复用技术：把信道的传输时间分隔成许多时间段，在一个时间段内，一路信号占用整个信道的带宽进行传输。&lt;/p&gt;
&lt;p&gt;信号传输按位、按符号、按组的方式进行。&lt;/p&gt;
&lt;p&gt;为了在接受端能够对复合信号进行正确地分离，接收端与发送端的时序必须严格同步，否则将造成信号之间的混淆。&lt;/p&gt;
&lt;h4 id=&#34;3两种复用技术比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3两种复用技术比较&#34;&gt;#&lt;/a&gt; 3. 两种复用技术比较&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TDM 设备比 FDM 设备易于实现，而随着大规模集成电路的发展，TDM 价格会有明显的下降。&lt;/li&gt;
&lt;li&gt;TDM 较 FDM 具有较高的传输速度。因为 TDM 可以充分利用信道的全部带宽。&lt;/li&gt;
&lt;li&gt;TDM 中，只需要一个 MODEM 就可以了；而在 FDM 中，每个通道都需要一个 MODEM。&lt;/li&gt;
&lt;li&gt;TDM 能混合不同速率和同步方式的终端，能适应新型数据通信网络。&lt;/li&gt;
&lt;li&gt;进行数据传输的差错控制和校正操作时，TDM 比 FDM 会产生较多的时间延迟。&lt;/li&gt;
&lt;li&gt;FDM 主要用于模拟通信系统，TDM 主要用于数字通信系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;成本低&lt;/li&gt;
&lt;li&gt;时间延迟较少（线路中使用的缓冲部件较少）&lt;/li&gt;
&lt;li&gt;透明性较好，从主机或通信处理机到终端是透明的，用户并未感到多路器的存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;采用多路器后，线路的带宽和传送速率未能充分利用。&lt;/li&gt;
&lt;li&gt;对主机 I/O 端口的要求并未减少。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1014-通信同步技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1014-通信同步技术&#34;&gt;#&lt;/a&gt; 10.1.4 通信同步技术&lt;/h3&gt;
&lt;h4 id=&#34;1通过控制线实现收发双方同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1通过控制线实现收发双方同步&#34;&gt;#&lt;/a&gt; 1. 通过控制线实现收发双方同步&lt;/h4&gt;
&lt;p&gt;并行同步通信方式：指在并行通信中，通过控制线实现收发双方同步。数据收发双方除了数据线相连外，还有若干控制信号线，用来传送发送与接收装置的状态。&lt;/p&gt;
&lt;p&gt;并行通信进行一次数据传送的过程如下：&lt;/p&gt;
&lt;p&gt;（1）发送装置在发送前，首先检查接收装置的状态。&lt;/p&gt;
&lt;p&gt;（2）若接收装置处于非就绪状态，返回（1）继续等待；若接收装置处于就绪状态，表示可以接收数据，发送装置将数据放到数据线上，并发出控制信号，告诉接收装置数据已准备好。&lt;/p&gt;
&lt;p&gt;（3）接收装置收到控制信号后，从数据线上将数据取走。取数据过程中，状态线置为非就绪状态，取数完成后，状态线重新处于就绪状态，等待下一次接收数据。&lt;/p&gt;
&lt;p&gt;（4）发送装置将控制信号撤回，准备发送下一次数据。&lt;/p&gt;
&lt;p&gt;串行通信中的同步方式又有两种：一种是启停同步方式，与其对应的传输方式称为异步通信方式；另一种是自同步方式，与其对应的传输方式为同步通信方式。&lt;/p&gt;
&lt;h4 id=&#34;2串行异步通信async&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2串行异步通信async&#34;&gt;#&lt;/a&gt; 2. 串行异步通信（ASYNC）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206151919372.png&#34; alt=&#34;image-20211206151919372&#34; /&gt;&lt;/p&gt;
&lt;p&gt;串行异步通信：一个字符接一个字符地按帧传送数据，上图为格式。&lt;/p&gt;
&lt;p&gt;一帧信息的组成：1 个起始位、5~8 个数据位，1 个奇偶校验位、1~2 个停止位。&lt;/p&gt;
&lt;p&gt;停止位到起始位的电平转换，即为同步信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进行异步通信时，收发双方必须有两项约定：
&lt;ul&gt;
&lt;li&gt;帧信息格式，即字符的编码格式、奇偶检验形式、起始位、停止位格式&lt;/li&gt;
&lt;li&gt;传送速率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;由于字符串的首尾分别附加了一个起始位和停止位，因此，传输效率较低，传送速率较慢。&lt;/li&gt;
&lt;li&gt;能完成异步通信的器件称为异步收发器（UART），Intel8250&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3串行同步通信sync&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3串行同步通信sync&#34;&gt;#&lt;/a&gt; 3. 串行同步通信（SYNC）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206152847116.png&#34; alt=&#34;image-20211206152847116&#34; /&gt;&lt;/p&gt;
&lt;p&gt;串行同步通信是一种连续传送数据块的方式，每次传送 n 个字节的数据块。用 1 个～2 个同步字符表示数据传输的开始接着是 n 个字节的数据块，字符之间不允许留有空隙，当没有字符可以发送时，则连续发送同步字符。&lt;/p&gt;
&lt;p&gt;为保证收发双方同步，收发双方必须使用相同的同步字符，而且往往采用可以生成解码时钟的编码方式。&lt;/p&gt;
&lt;p&gt;串行同步通信的传送速率高于串行异步通信，且传送的数据块越长，越显示其优越性。&lt;/p&gt;
&lt;p&gt;能完成同步通信的硬件称为同步收发器 USRT。&lt;/p&gt;
&lt;p&gt;既能完成同步通信，又能完成异步通信的硬件称为通用同步异步收发器 USART，如 Intel8251&lt;/p&gt;
&lt;h3 id=&#34;1015-image-20211206154013310&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1015-image-20211206154013310&#34;&gt;#&lt;/a&gt; 10.1.5 &lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206154013310.png&#34; alt=&#34;image-20211206154013310&#34; /&gt;&lt;/h3&gt;
&lt;p&gt;目前主要的传输介质：双绞线、同轴电缆、光纤&lt;/p&gt;
&lt;h2 id=&#34;102-通信网络技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#102-通信网络技术&#34;&gt;#&lt;/a&gt; 10.2 通信网络技术&lt;/h2&gt;
&lt;p&gt;计算机通信网络属于分布在一定区域中的局域网。&lt;/p&gt;
&lt;p&gt;决定局域网特性的要素有：传输介质、拓扑结构、介质访问控制方法&lt;/p&gt;
&lt;h3 id=&#34;1021网络拓扑技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1021网络拓扑技术&#34;&gt;#&lt;/a&gt; 10.2.1 网络拓扑技术&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206154351663.png&#34; alt=&#34;image-20211206154351663&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;1022-网络控制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1022-网络控制方法&#34;&gt;#&lt;/a&gt; 10.2.2 网络控制方法&lt;/h3&gt;
&lt;p&gt;1. 查询法&lt;/p&gt;
&lt;p&gt;2.CSMA/CD&lt;/p&gt;
&lt;p&gt;3. 令牌传送&lt;/p&gt;
&lt;p&gt;4. 存储转发式&lt;/p&gt;
&lt;h3 id=&#34;1023-差错控制技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1023-差错控制技术&#34;&gt;#&lt;/a&gt; 10.2.3 差错控制技术&lt;/h3&gt;
&lt;p&gt;差错控制技术包括检验错误与纠正错误。&lt;/p&gt;
&lt;h4 id=&#34;1检验错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1检验错误&#34;&gt;#&lt;/a&gt; 1．检验错误&lt;/h4&gt;
&lt;p&gt;常有技术：冗余技术。常用的校验方法有垂直冗余码校验或奇偶校验 (VRC)、纵向冗余码校验 (LRC)、循环冗余校验 (CRC) 以及校验和 (checksum) 等几种。&lt;/p&gt;
&lt;h4 id=&#34;2纠正错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2纠正错误&#34;&gt;#&lt;/a&gt; 2. 纠正错误&lt;/h4&gt;
&lt;p&gt;常用的纠错方式有三种：重发纠正错误、自动纠正错误、混合纠正错误&lt;/p&gt;
&lt;h2 id=&#34;103-网络体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#103-网络体系结构&#34;&gt;#&lt;/a&gt; 10.3 网络体系结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206161415441.png&#34; alt=&#34;image-20211206161415441&#34; /&gt;&lt;/p&gt;
&lt;p&gt;应用层、表示层、会话层、传输层、网络层、链路层、物理层&lt;/p&gt;
&lt;h2 id=&#34;104-串行通信总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#104-串行通信总线&#34;&gt;#&lt;/a&gt; 10.4 串行通信总线&lt;/h2&gt;
&lt;h3 id=&#34;1041-rs-232c通信总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1041-rs-232c通信总线&#34;&gt;#&lt;/a&gt; 10.4.1 RS-232C 通信总线&lt;/h3&gt;
&lt;p&gt;①&lt;strong&gt;RS-232C 总线&lt;/strong&gt;是由美国电子工业协会 EIA 于 1969 年修定的一种通信接口标准，专门用于数据终端设备 DTE 和数据通信设备 DCE 之间的串行通信。&lt;/p&gt;
&lt;p&gt;②&lt;strong&gt;数据终端设备 DTE&lt;/strong&gt;（Data Terminal Equipment）是数据的源点或归宿，通常是指输入、输出设备和传输控制器或者计算机等数据处理装置及其通信控制器。&lt;/p&gt;
&lt;p&gt;③&lt;strong&gt;数据通信设备 DCE&lt;/strong&gt; (Data Communication Equipment) 的任务是实现由源点到目的点的传输，通常是指自动呼叫应答设备、调制解调器以及其它一些中间装置的集合。目前 RS—232C 接口已成为计算机的标准配置，如串行口 COM1、COM2 均为 RS-232C 总线接口标准。&lt;/p&gt;
&lt;h4 id=&#34;1信号定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1信号定义&#34;&gt;#&lt;/a&gt; 1. 信号定义&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162016104.png&#34; alt=&#34;image-20211206162016104&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2电气特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2电气特性&#34;&gt;#&lt;/a&gt; 2. 电气特性&lt;/h4&gt;
&lt;p&gt;RS-232C 采用了较高的传输电平，且为双极性、公共地和负逻辑，即规定逻辑 “1” 状态电平为 - 15- -5V，逻辑 “0” 状态电平为 + 5- +15V，其中 - 5- +5V 用作信号状态的变迁区。&lt;/p&gt;
&lt;h4 id=&#34;3接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3接口电路&#34;&gt;#&lt;/a&gt; 3. 接口电路&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162103439.png&#34; alt=&#34;image-20211206162103439&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162110231.png&#34; alt=&#34;image-20211206162110231&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;4rs-232c的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4rs-232c的应用&#34;&gt;#&lt;/a&gt; 4.RS-232C 的应用&lt;/h4&gt;
&lt;p&gt;RS-232C 通信主要有以下几种连接方式：&lt;/p&gt;
&lt;p&gt;（1）PC 机与 PC 机之间使用 MODEM 连接&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162242155.png&#34; alt=&#34;image-20211206162242155&#34; /&gt;&lt;/p&gt;
&lt;p&gt;（2）PC 机与 PC 机之间直接连接&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162307081.png&#34; alt=&#34;image-20211206162307081&#34; /&gt;&lt;/p&gt;
&lt;p&gt;（3）PC 机与 PC 机之间三线连接法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162311218.png&#34; alt=&#34;image-20211206162311218&#34; /&gt;&lt;/p&gt;
&lt;p&gt;（4）PC 机与单片机之间的通信网络&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA2MTYyMzIzMzEwLnBuZw==&#34;&gt;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162323310.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211206162323310&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;1042-rs-422485通信总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1042-rs-422485通信总线&#34;&gt;#&lt;/a&gt; 10.4.2 RS-422/485 通信总线&lt;/h3&gt;
&lt;p&gt;RS-232C 缺点：传送速率不够快；传送距离不够远；&lt;/p&gt;
&lt;p&gt;解决方法：EIA 在 1977 年作了部分改进，制定了新标准 RS-449：&lt;/p&gt;
&lt;p&gt;特点：除了保留与 RS-232C 兼容外，还在提高传输速率、增加传输距离、改进电气特性等方面做了很多努力，增加了 RS—232C 没有的环测功能，明确规定了连接器，解决了机械接  口问题。&lt;/p&gt;
&lt;p&gt;延伸：在 RS-449 标准下，推出的子集有 RS-423A/RS-422A，以及 RS-422A 的变型 RS-485。&lt;/p&gt;
&lt;h4 id=&#34;1rs-423ars-422a&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1rs-423ars-422a&#34;&gt;#&lt;/a&gt; 1.RS-423A/RS-422A&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184307912.png&#34; alt=&#34;image-20211206184307912&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2rs-485&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2rs-485&#34;&gt;#&lt;/a&gt; 2.RS-485&lt;/h4&gt;
&lt;p&gt;传送方式：半双工、全双工&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184523187.png&#34; alt=&#34;image-20211206184523187&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接口电路：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184554326.png&#34; alt=&#34;image-20211206184554326&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RS-485 应用： AT89C52 单片机与 RS-485 接口电路&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184620147.png&#34; alt=&#34;image-20211206184620147&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通信网络&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184644438.png&#34; alt=&#34;image-20211206184644438&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;105-工业以太网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#105-工业以太网&#34;&gt;#&lt;/a&gt; 10.5 工业以太网&lt;/h2&gt;
&lt;p&gt;工业以太网是以太网（甚至互联网）系列技术延伸到工业应用环境的产物，&lt;strong&gt;既属于信息网络技术，也属于控制网络技术&lt;/strong&gt;，是一揽子解决方案的集合，是一系列技术的总称。&lt;/p&gt;
&lt;h3 id=&#34;1051-以太网及其优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1051-以太网及其优势&#34;&gt;#&lt;/a&gt; 10.5.1 以太网及其优势&lt;/h3&gt;
&lt;p&gt;以太网是 IEEE802.3 所支持的局域网标准，最早由 Xerox 公司创建，后经 DEC 和 Inter 的联合开发扩展，按照 ISO、OSI 的 7 层结构，以太网标准只定义了链路层和物理层，而作为一个完整的通信系统，它需要高层协议的支持。APARNET 在制定了 TCP/IP 高层通信协议之后，以太网便和 TCP/IP 紧密地捆绑在一起了。以后，由于国际互联网采用了以太网和 TCP/IP 协议，人们甚至把如超文本链接 HTTP 等与 TCP/IP 协议组放在一起，俗称为以太网技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;与现场总线相比，以太网具有以下的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;应用广泛&lt;/strong&gt; —— 几乎所有的编程语言都支持以太网的应用开发，如果采用以太网作为现场总线，可以保证有多种开发工具、开发环境可供选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;成本低廉&lt;/strong&gt; —— 目前以太网网卡的价格只有 PROFIBUS、FF 等现场总线网卡的 1/10，而且随着集成电路技术的发展，其价格还会进一步下降。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通信速率高&lt;/strong&gt; —— 目前以太网的通信速率为 10Mb/s，100Mb/s 的快速以太网已开始广泛应用，1000Mb/s 以太网技术也逐渐成熟，10Gb/s 以太网也正在研究。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;软硬件资源丰富&lt;/strong&gt; —— 由于多年的应用，积累了丰富的软件资源和设计经验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可持续发展潜力大&lt;/strong&gt; —— 企业的生存与发展很大程序上依赖于一个快速而有效的通信管理网络，信息技术与通信技术的发展将更加迅速，也更加成熟，这保证了以太网技术不断地持续向前发展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1052工业以太网的关键技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1052工业以太网的关键技术&#34;&gt;#&lt;/a&gt; 10.5.2 工业以太网的关键技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为了满足工业控制现场的特殊性，工业以太网需要解决的问题包括：
&lt;ul&gt;
&lt;li&gt;1 通信实时性&lt;/li&gt;
&lt;li&gt;2 网络生存性&lt;/li&gt;
&lt;li&gt;3 网络安全性&lt;/li&gt;
&lt;li&gt;4 总线供电&lt;/li&gt;
&lt;li&gt;5 互操作性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1053-基于以太网的控制网络系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1053-基于以太网的控制网络系统&#34;&gt;#&lt;/a&gt; 10.5.3 基于以太网的控制网络系统&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206185745375.png&#34; alt=&#34;image-20211206185745375&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息管理层&lt;/li&gt;
&lt;li&gt;过程监控层&lt;/li&gt;
&lt;li&gt;现场设备层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1054几种典型的实时以太网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1054几种典型的实时以太网&#34;&gt;#&lt;/a&gt; 10.5.4 几种典型的实时以太网&lt;/h3&gt;
&lt;p&gt;1）&lt;strong&gt;Modbus/TCP&lt;/strong&gt; ——MODICON 公司在 20 世纪 70 年代提出 ，用于 PLC 之间的通信的协议；&lt;/p&gt;
&lt;p&gt;2）&lt;strong&gt;Ethernet/IP&lt;/strong&gt; —— 由国际控制网络 CI 和开放设备网络供应商协会 ODVA 在工业以太网协会 IEA 的协助下联合开发 。&lt;/p&gt;
&lt;p&gt;3**）PROFInet** —— 是由西门子公司和 Profibus 用户协会开发的基于以太网的自动化标准 ；&lt;/p&gt;
&lt;p&gt;4）&lt;strong&gt;EPA&lt;/strong&gt; —— 是在国家科技部 “863” 计划的支持下，由浙江大学、浙大中控、中科院沈阳自动化所、清华大学、大连理工大学等单位联合组成的工作组制定的我国拥有自主知识产权的实时以太网标准，由现场设备级和过程监控级两级网络组成。&lt;/p&gt;
&lt;h2 id=&#34;考试要求-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-9&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;主要选择填空判断题&lt;/p&gt;
&lt;p&gt;波特率（以及比特率的概念）考计算题，起始位和停止位，数据位多少可能不一样&lt;/p&gt;
&lt;p&gt;选填，波特率&lt;/p&gt;
&lt;p&gt;奇偶校验与 CRC 循环冗余校验&lt;/p&gt;
&lt;h2 id=&#34;课后习题-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题-8&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h2&gt;
&lt;p&gt;1．数据通信的实质是什么？比较说明并行通信和串行通信的概念及其特点。&lt;/p&gt;
&lt;p&gt;2．画图说明串行通信的三种制式。&lt;/p&gt;
&lt;p&gt;3．串行异步通信和同步通信如何实现收、发双方的同步，两者有何区别？&lt;/p&gt;
&lt;p&gt;4．CSMA/CD 和令牌传送在原理和控制策略上有什么不同？&lt;/p&gt;
&lt;p&gt;5．频分多路与时分多路是如何实现多路复用的？试比较两种方式的特点。&lt;/p&gt;
&lt;p&gt;6．设要发送的基本信息位为 11010111，附加 16 位 CRC 校验信息位，生成多项式为，求发送代码多项式。&lt;/p&gt;
&lt;p&gt;7．OSI 参考模型的各曾分别是什么？完成什么功能？&lt;/p&gt;
&lt;p&gt;8．对比说明 RS-232C 总线标准与 TTL 逻辑电平的电气特性，它们之间如何进行接口？&lt;/p&gt;
&lt;p&gt;9．RS-232C 总线在实际应用中有几种接线方式？都应用在何种场合？&lt;/p&gt;
&lt;p&gt;10．结合图 10-16 与图 10-20，分析说明 PC 机与多个单片机构成的 RS-232C 通信网络。&lt;/p&gt;
&lt;p&gt;11．结合图 10-24 与图 10-25，分析说明 PC 机与多个单片机构成的 RS-485 通信网络。&lt;/p&gt;
&lt;p&gt;12．借助于以太网的控制系统有什么优点？&lt;/p&gt;
&lt;p&gt;13．工业以太网的关键技术是什么？&lt;/p&gt;
&lt;p&gt;14．新型控制网络系统可分为哪三个层次？简述每层的功能作用。&lt;/p&gt;
&lt;h1 id=&#34;第-11-14-章-略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第-11-14-章-略&#34;&gt;#&lt;/a&gt; 第 11 - 14 章 略&lt;/h1&gt;
&lt;h1 id=&#34;z变换重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#z变换重点&#34;&gt;#&lt;/a&gt; Z 变换（重点）&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207204744628.png&#34; alt=&#34;image-20211207204744628&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207204804926.png&#34; alt=&#34;image-20211207204804926&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207204821726.png&#34; alt=&#34;image-20211207204821726&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207204837920.png&#34; alt=&#34;image-20211207204837920&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;考试要求-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考试要求-10&#34;&gt;#&lt;/a&gt; 考试要求&lt;/h2&gt;
&lt;p&gt;傅里叶和拉式变换不需要考，Z 变换考一到两个大题&lt;/p&gt;
&lt;p&gt;Z 变换的定义&lt;/p&gt;
&lt;p&gt;求某个函数的 Z 变换&lt;/p&gt;
&lt;p&gt;定义式定义求法、根据性质（线性定理、初值和终值定理也要掌握，后两者求解方程、正变换时域位移性质掌握、频域不需要掌握）求解，考察较为基础&lt;/p&gt;
&lt;p&gt;指数函数的变换&lt;/p&gt;
&lt;p&gt;逆变换掌握分解为两个式子的和，然后再求解&lt;/p&gt;
&lt;p&gt;求差分方程，某一时刻和他前后的点组成方程求解 / 用通式：Z 变换求解的原理，用到在时域里的位移，利用时域位移求解&lt;/p&gt;
&lt;p&gt;10.2 定义、逆变换的求解方式&lt;/p&gt;
&lt;p&gt;例题 10-22&lt;/p&gt;
&lt;p&gt;10.4 后后面涉及 Z 变换具体应用，只需要掌握前面的部分&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206212753219.png&#34; alt=&#34;image-20211206212753219&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206212810972.png&#34; alt=&#34;image-20211206212810972&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206212818845.png&#34; alt=&#34;image-20211206212818845&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/29/computer-science/course_1/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%98%BE%E7%A4%BA%E5%99%A8%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</guid>
            <title>显示器及其接口技术</title>
            <link>http://zhanglin233.github.io/2021/11/29/computer-science/course_1/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%98%BE%E7%A4%BA%E5%99%A8%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</link>
            <category>智能控制</category>
            <pubDate>Mon, 29 Nov 2021 19:05:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;常用的显示器件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的显示器件&#34;&gt;#&lt;/a&gt; 常用的显示器件&lt;/h1&gt;
&lt;h2 id=&#34;显示记录仪&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示记录仪&#34;&gt;#&lt;/a&gt; 显示记录仪&lt;/h2&gt;
&lt;p&gt;是以模拟方式连续显示和记录过程参数的动态变化，但其价格都很贵，在目前的计算机控制系统中已很少采用。&lt;/p&gt;
&lt;h2 id=&#34;led数码管&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led数码管&#34;&gt;#&lt;/a&gt; LED 数码管&lt;/h2&gt;
&lt;p&gt;具有结构简单、体积小、功耗低、配置灵活、显示清晰、可靠     性高等优点，已被微型计算机控制系统及智能化仪表广泛采用。&lt;/p&gt;
&lt;h3 id=&#34;led显示器的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led显示器的工作原理&#34;&gt;#&lt;/a&gt; LED 显示器的工作原理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;LED&lt;/strong&gt;(&lt;strong&gt;Light Emitting Diode&lt;/strong&gt;) 是利用 PN 结把电能 转换成光能的固体发光器件，根据制造材料的不同可以发 出红、黄、绿、白等不同色彩的可见光来。LED 的伏安特性类似普通二极管，正向压降约为 2 伏左右，工作电流 一般在 10 -20 mA。单段的圆形或方形 LED 常用来显示设备的运行状态，8 段 ED 可以显示各种数字和字符。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129150846.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;8 段 LED 显示器的结构与工作原理如上图所示，它是由个发光二极管组成，各段依次记为 a,b,c,d,e,f,g,dp, 其中 dp 表示小数点（不带小数点的称为 7 位 LED）。8 段 LED 显示器有共阴极和共阳极两种结构。共阴极 LED 的所有发光管的阴极并接成公共端 COM，而共阳极的所有发光管的阳极并接成公共端 COM。当共阴极 LED 的 COM 端接地，某个发光二极管的阳极加上高电平时，则该管有电流流过而点亮发光；当共阳极 LED 的 COM 端接高电平，某个发光二极管的阴极加上低电平时时，则该管有电流流过而点亮发光；&lt;/p&gt;
&lt;p&gt;CPU 的数据线与 LED 各段引脚相连，控制输出的数据，点亮 8 段 LED 不同段的组合，显示等 0~9、A~F 十六进制数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129151805.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当引脚 dp~a 与 CPU 数据位 D&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 一一对应相连时，共阴极 8 段 LED 显示器的段选码如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129153620.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以显示字符 “3” 的段选码为例，“3” 的段选码为 16 进制的 4AH, 也就是二进制的 01001111，所以 CPU 输出的数据位 D&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为 01001111，则显示器的 dp,f,e 端接地，g,d,c,d,a 接高电平，COM 端接地时，显示器就显示出数字 &amp;quot;3&amp;quot;。&lt;/p&gt;
&lt;p&gt;数码管共阳极的段选码恰好与共阴极的段选码相反，如共阳极数码管 “3” 的段选码（10110000）是共阴极数码管 “3” 的段选码（01001111）的反码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上图只是基于段引脚 dp~a 与数据位 D&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 对应相连，如果连线改变，则段选码也随之改变。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;led显示器的显示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led显示器的显示方式&#34;&gt;#&lt;/a&gt; LED 显示器的显示方式&lt;/h3&gt;
&lt;p&gt;在计算机控制系统中，常利用 n 个 LED 显示器构成 n 位显示。通常把点亮 LED 某一段的控制称为段选，而把点亮 LED 某一位的控制称为位选或片选。根据 LED 显示器的段选线、位选线与控制端口的连接方式不同，LED 显示器有静态显示与动态显示两种方式，下面以 4 个共阴极 LED 的组合为例进行说明。&lt;/p&gt;
&lt;h4 id=&#34;静态显示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态显示方式&#34;&gt;#&lt;/a&gt; 静态显示方式&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129154903.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4 个 LED 显示器的所有 COM 连在一起并接地（无位选），每个 LED 的段选线 dp~a 都各自与一个 8 位并行 I/O 口相连（段选独立）。&lt;/p&gt;
&lt;p&gt;因此 CPu 通过 I/O 口（具有锁存功能）对某个 LED 输出一次段选码之后，该 LED 就能一直保持显示结果直到下次送入新的段选码为止。&lt;/p&gt;
&lt;p&gt;这种静态显示的效果是每一位独立显示，同一时间内每一位都能稳定地显示各自不同的字符。其缺点是电路中占用 I/O 口资源多，如 4 个 LED 显示器需要有 4 个 8 位并行口芯片，线路复杂，硬件成本高；又因为同时显示，功耗大；优点是占用 CPU 时间少，显示稳定可靠。适用于大规模的实时控制系统。&lt;/p&gt;
&lt;h4 id=&#34;动态显示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态显示方式&#34;&gt;#&lt;/a&gt; 动态显示方式&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129163955.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4 个 LED 显示器各自的各段选线对应并接在一起，由一个 8 位 I/O 口（1）进行统一段选控制，而各自的 COM 端则由另外一个 I/O 口进行位选控制（共阴极 LED 送低电平，共阳极 LED 送高电平）。因此，要显示不同的字符，只能由 CPu 通过两个 I/O 口依次轮流输出段选码和位选码，循环扫描 LED, 使其显示分时。缺点是电路中占用 I/O 口资源多；优点是占用 CPU 机时少，显示稳定可靠 。&lt;/p&gt;
&lt;h3 id=&#34;led显示器的接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led显示器的接口电路&#34;&gt;#&lt;/a&gt; LED 显示器的接口电路&lt;/h3&gt;
&lt;h4 id=&#34;静态显示接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态显示接口电路&#34;&gt;#&lt;/a&gt; 静态显示接口电路&lt;/h4&gt;
&lt;h4 id=&#34;动态显示接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态显示接口电路&#34;&gt;#&lt;/a&gt; 动态显示接口电路&lt;/h4&gt;
&lt;h2 id=&#34;lcd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lcd&#34;&gt;#&lt;/a&gt; LCD&lt;/h2&gt;
&lt;p&gt;以其功耗极低的特点，占据了从电子表到计算器，从袖珍仪表到便携式微型计算机等应用场合。&lt;/p&gt;
&lt;h2 id=&#34;crt终端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crt终端&#34;&gt;#&lt;/a&gt; CRT 终端&lt;/h2&gt;
&lt;p&gt;CRT 终端以其图文并茂的直观生动画面，可以显示生产过程中的各种画面及报表，如生产流程图、显示报警图、趋势曲线图、     路查询图等，在很多微型计算机控制系统中，特别在 DDC，SCC 以及 DCS 控制系统中，大都采用 CRT 操作台进行监视和控制。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/28/computer-science/course_1/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E9%94%AE%E7%9B%98%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</guid>
            <title>键盘及其接口技术</title>
            <link>http://zhanglin233.github.io/2021/11/28/computer-science/course_1/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E9%94%AE%E7%9B%98%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</link>
            <category>智能控制</category>
            <pubDate>Sun, 28 Nov 2021 02:24:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;键盘输入电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#键盘输入电路&#34;&gt;#&lt;/a&gt; 键盘输入电路&lt;/h1&gt;
&lt;p&gt;计算机控制系统中的键盘通常采用触点式按键，触点式按键是利用机械触点的闭合或断开来输入信息&lt;/p&gt;
&lt;h2 id=&#34;键盘的抖动干扰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#键盘的抖动干扰&#34;&gt;#&lt;/a&gt; 键盘的抖动干扰&lt;/h2&gt;
&lt;p&gt;由于机械触点的弹性振动，按键在按下时不会马上稳定地接通，在谈起时也不能一下子完全断开，因而在按键闭合和断开的瞬间均会出现一连串的抖动，这种抖动称为按键的抖动干扰，其产生的波形如图所示&lt;br /&gt;
&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128020838.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当按键按下时会产生前沿抖动，当按键弹起时会产生后沿抖动。这是所有机械触点式按键在状态输出时的共性问题，抖动的时间长短取决于按键的机械特性与操作状态，一般为 10 ms~100 ms, 这是键处理设计时要考虑的一个重要参数。&lt;/p&gt;
&lt;h2 id=&#34;抖动干扰的消除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抖动干扰的消除&#34;&gt;#&lt;/a&gt; 抖动干扰的消除&lt;/h2&gt;
&lt;p&gt;按键的抖动会造成按一次产生的开关状态被 CPU 误读几次。为了使 CPU 能正确地读取按键状态，必须在按键闭合或断开时，消除产生的前沿或后沿抖动，去抖动的方法有硬件方法与软件方法。&lt;/p&gt;
&lt;h3 id=&#34;硬件方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件方法&#34;&gt;#&lt;/a&gt; 硬件方法&lt;/h3&gt;
&lt;p&gt;​	硬件方法是设计一个滤波延时电路或单稳态电路等硬件电路来避开按键的抖动时间。滤波延时消抖电路如图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128021627.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;设置在按键 s 与 CPU 数据线 Di 之间。按键 S 未按下时，电容两端电压为 0，即非门输入 Vi 为 0，输出 V0 为 1。当 S 按下时，由于 C 两端电压不能突变，充电电压 Vi 在充电时间内未达到非门的开启电压，输出 V0 将不会改变，直到充电电压 Vi 大于门的开启电压，其输出 Vi 才变为 0，这段充电延迟时间取决于 R1、R2 和 C 值得大小，电路设计时只需要使之大于等于 100 ms 即可避开按键抖动的影响。同理，按键 S 断开时，即使出现抖动，由于 C 的放电延迟过程，也会消除按键抖动的影响。&lt;/p&gt;
&lt;p&gt;下图中 V1 是未施加滤波电路含有前沿抖动、后沿抖动的波形，V2 是施加滤波电路后消除抖动的波形。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128022924.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;软件方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件方法&#34;&gt;#&lt;/a&gt; 软件方法&lt;/h3&gt;
&lt;p&gt;​	软件方法是指编制一段时间大于 100 ms 的延时程序，在第一次检测到有键按下时，执行这段延时子程序使键的前沿抖动消失后再检测该键状态，如果该键仍保持闭合状态电平，则确认为该键已经按下，否则无键按下，从而消除了抖动的影响。同理，在检测到按键释放后，页同样要延迟一段时间，以消除后沿抖动，然后转入对该按键的处理。&lt;/p&gt;
&lt;h1 id=&#34;非编码矩阵式键盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非编码矩阵式键盘&#34;&gt;#&lt;/a&gt; 非编码矩阵式键盘&lt;/h1&gt;
&lt;p&gt;​	当按键数量较多时，为了少占用 CPU 的 I/O 口线，通常将键排列成矩阵式结构。矩阵式结构也是非编码键盘中的一种形式。&lt;/p&gt;
&lt;h2 id=&#34;矩阵式键盘的结构构成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵式键盘的结构构成&#34;&gt;#&lt;/a&gt; 矩阵式键盘的结构构成&lt;/h2&gt;
&lt;p&gt;​	矩阵式键盘又叫行列式键盘，是用 I/O 口线组成的行、列矩阵结构，在每根行线与列线的交叉处，二线不直接相通而是通过一个按键跨接接通。采用这种矩阵结构只需要 M 根行输出线和 N 根列输入线，就可连接 MxN 个按键，再通过键盘处理程序便可识别键值。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128024347.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128024421.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	在键盘中无任何键按下时，所有的行线和列线被断开且相互独立，输入线 Y 0~Y 7 列都为高电平，当有一键按下时，则该键所在的行线与列线接通，因此，该列线的电平取决于该键所在的行线。基于此，产生了 “行扫描法” 与 “线反转法” 两种识别方法.&lt;/p&gt;
&lt;p&gt;​	行扫描法又称逐行零扫描法，即逐行输出行扫描信号 “0”，使各行依次为低电平，然后分别读入列数据检测，检查此（低电平）行中是否有键按下。如果读得某列线为低电平，则表示此（低电平）行线与此列线的交叉处有键按下，再对该键进行编码计算出键值，然后转入该建的功能子程序入口地址；如果没有任何一根列线为低电平，则说明此（低电平）行没有键按下。接着进行下一行的 “0” 行扫描与列读入，直到 8 行全部查完，若无键按下则返回。&lt;/p&gt;
&lt;p&gt;​	有时为了快速判断键盘中是否有键按下，也可先将全部行线同时置为低电平，然后检测列线的电平状态，若所有列线均为高电平，则说明键盘中无键按下，立即返回；若要有一列的电平为低，则表示键盘中有键按下，然后再如上那样逐行扫描。&lt;/p&gt;
&lt;h2 id=&#34;矩阵式键盘的程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵式键盘的程序设计&#34;&gt;#&lt;/a&gt; 矩阵式键盘的程序设计&lt;/h2&gt;
&lt;p&gt;​	在计算机控制系统中，键盘扫描只是 CPU 工作的一部分。因此在设计键盘扫描程序时，必须保证键盘操作的实时性，又不能占用 CPU 太多的时间，还要充分考虑到抖动干扰的消除，一般可根据情况选用编程扫描、定时扫描或中断扫描中的一种方式。&lt;/p&gt;
&lt;h3 id=&#34;扫描程序的编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扫描程序的编写&#34;&gt;#&lt;/a&gt; 扫描程序的编写&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128212635.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-basH&#34;&gt;key:  # 行值寄存器CL和列值寄存器DL清零
      MOV AL, 0
      MOV CL, AL
      MOV DL, AL
      # 使所有行线为低电平
      MOV AL, 0FFH
      OUT PORT1, AL
      # 读列均值
      IN AL, PORTQ
      # 检查是否有键按下
      CMP AL, 0FFH
      # 无键按下转返回
      JZ DONE
      # 有键按下调延时100 ms子程序
      CALL DELAY
      # 重复上述扫描
      MOV AL, 0FFH
      OUT PORT1, AL
      IN AL, 0FFH
      CMP AL, 0FFH
      # 无键按下转返回
      JZ DONE
      # 行数08送AH
      MOV AH, 08
      # 行扫描初值（即X0线）送BL
      MOV BL, 01H
      
key1: # 输出使某行为低电平
	  MOV AL, BL
	  OUT PORT1, AL  
	  # 读入列值
	  IN AL, PORT1   
	  # 判断此行是否有键按下
	  CMP AL, 0FFH
	  # 有键按下转KEY2
	  JNZ KEY2
	  # 无键按下，行值寄存器加08
	  MOV AL, CL
	  ADD AL, 08H
	  DAA
	  MOV CL, AL
	  # 求下一行为低电平的输出代码
	  RCL	BL, 1
	  DEC AH
	  JNZ KEY1
		
DONE: IRET
KEY2: INC DL
	  RCR AL, 1
	  JC KEY2
	  MOV AL, CL
	  ADD AL, DL
	  DAA
	  MOV [BUFF], AL
	  JMP KEYADR
	  END KEY
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;编码键盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码键盘&#34;&gt;#&lt;/a&gt; 编码键盘&lt;/h1&gt;
&lt;p&gt;​	上面所述的非编码都是通过软件方法来实现键盘扫描、键值处理和消除抖动干扰的。&lt;/p&gt;
&lt;p&gt;​	显然，这将占用较多的 CPU 时间。在一个较大的控制系统中，不允许 CPU 主要用来执行键盘程序，这将严重影响系统的实时控制。下面以二进制编码键盘为例，介绍一种用硬件方法来识别和解决抖动干扰的键盘编码器及编码键盘接口电路。&lt;/p&gt;
&lt;h2 id=&#34;二进制编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二进制编码&#34;&gt;#&lt;/a&gt; 二进制编码&lt;/h2&gt;
&lt;p&gt;​	具有优先级的二进制 8 位编码器 CD4532B 的真值表如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128235658.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	表示芯片优先级的输入允许端 E&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 为 0 时，无论编码器的信号输入 I&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为何状态，编码器输出全为 0，芯片处于屏蔽状态，同时 E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为 0，也屏蔽下一级芯片；当输入允许端 E&amp;lt;sub&amp;gt;i&amp;lt;/sub &amp;gt; 为 1 时，且编码器的 I&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;~I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 全为 0 时，编译输出也为 0，但输出允许端 E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 为，表明此编码器输入端无键按下，却允许优先级低的相邻编码器处于编码状态。这两种情形下的工作状态端 GS 均为 “0”。&lt;/p&gt;
&lt;p&gt;​	该芯片的 8 个输入端中，I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 的优先级最高，I&amp;lt;sub&amp;gt;7&amp;lt;/sub &amp;gt; 优先级最低。当有多个按键按下时，优先级高的被选中，同时自动屏蔽优先级低的各输入端和下一级芯片（使 E0 端为 0）。比如处于正常编码状态即 Ei 为 1，当 I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 端为 1 时，其余各输入端无论为 1 或 0，编码输出端均为二进制 000，同时 GS 端为 1，E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 端为 0，而当 I&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 端为 0，I&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 端为 1 时，编码输出则为二进制 001；以此类推・・・・・・，输入端的键值号与二进制编码输出一一对应。&lt;/p&gt;
&lt;h2 id=&#34;编码键盘接口电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码键盘接口电路&#34;&gt;#&lt;/a&gt; 编码键盘接口电路&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129000949.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	如图是一种采用两片 CD4532B 构成的 16 个按键的二进制编码接口电路。其中，由于 U&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 的 E&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 作为 U2 的 Ui, 所以按键 S0 的优先级最高，S&amp;lt;sub&amp;gt;15&amp;lt;/sub &amp;gt; 的优先级最低。U&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 和 U&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 的输出 O&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;~O&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 经或门 A&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~A&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 输出，已形成低 3 位编码 D&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;。而最高位 D&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 则有 U&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 的 GS 产生。当按键 S&amp;lt;sub&amp;gt;8&amp;lt;/sub&amp;gt;~S&amp;lt;sub&amp;gt;3&amp;lt;/sub &amp;gt; 中有一个闭合时，其输出为 1。从而 S&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;~S&amp;lt;sub&amp;gt;15&amp;lt;/sub &amp;gt; 任意一个键被按下，由编码位 D&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;~D&amp;lt;sub&amp;gt;0&amp;lt;/sub &amp;gt; 均可消除相应的 4 位二进制码。&lt;/p&gt;
&lt;p&gt;​	为了消除按键按下时产生的抖动干扰，该接口电路还设置了由与非门 B&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、B&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;、电阻 R&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、R&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;、电容 C&amp;lt;sub&amp;gt;2&amp;lt;/sub &amp;gt; 组成的单稳电路和由或门 A&amp;lt;sub&amp;gt;4&amp;lt;/sub&amp;gt;、电阻 R&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;、电容 C&amp;lt;sub&amp;gt;1&amp;lt;/sub &amp;gt; 组成的延时电路，电路中 E、F、G 、H 和 I 这五点的波形如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129003055.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-18-pixiv2/</guid>
            <title>爬取p站(pixiv)的图片（二）</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-18-pixiv2/</link>
            <category>Python 爬虫</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;成功爬取pixiv上的图片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成功爬取pixiv上的图片&#34;&gt;#&lt;/a&gt; 成功爬取 pixiv 上的图片&lt;/h3&gt;
&lt;p&gt;在经过了三天的奋战之后，我终于成功的爬取到了 pixiv 上的图片，看着文件夹里的众多好看的图片的感觉真不错，以后再也不缺壁纸和头像了（hiahiahia）。接下来言归正传，分享一下我是如何爬取到这些图片的。&lt;/p&gt;
&lt;h3 id=&#34;爬取pixiv上的图片的具体步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爬取pixiv上的图片的具体步骤&#34;&gt;#&lt;/a&gt; 爬取 pixiv 上的图片的具体步骤&lt;/h3&gt;
&lt;h4 id=&#34;获取不同照片的id&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取不同照片的id&#34;&gt;#&lt;/a&gt; 获取不同照片的 id&lt;/h4&gt;
&lt;p&gt;我在我的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3poYW5nbGluLnNwYWNlLzIwMjAvMTEvamVreWxsLw==&#34;&gt;爬取 pixiv 的第一篇博客&lt;/span&gt;中描述了我的初次尝试的爬取思路，虽然思路并没有问题，但是最终因为网站反扒的原因，我并没有成功的将图片爬取下来，本来我是打算等我再看点如何反 “反爬” 的教程之后再动手，但是昨天晚上回去的时候我随机点了几张图片观察它们的详细信息时，才发现他的域名是通过改变图片的 id 值来链接不同的照片，大体都是相同的 (我还是太年轻了，经验不够), 如 https://pixivic.com/illusts/64952228?VNK=f1808200, 其中的 &#39;64952228&#39; 就是图片的 id 值，当我们将它换成其他照片的 id 值就可以访问其他的照片，而我昨天通过访问&#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9waXguaXB2NC5ob3N0L2lsbHVzdHJhdGlvbnM/aWxsdXN0VHlwZT1pbGx1c3QmYW1wO3NlYXJjaFR5cGU9b3JpZ2luYWwmYW1wO21heFNhbml0eUxldmVsPTQmYW1wO3BhZ2U9NSZhbXA7a2V5d29yZD0lRTYlQTElOUMlRTMlODElQUUlRTglOEElQjEmYW1wO3BhZ2VTaXplPTMw&#34;&gt;https://pix.ipv4.host/illustrations?illustType=illust&amp;amp;searchType=original&amp;amp;maxSanityLevel=4&amp;amp;page=5&amp;amp;keyword = 桜の花 &amp;amp; pageSize=30&lt;/span&gt;&#39; 信息得到了一大串网址，虽然我们不能通过这些网址直接访问到相应的图片，但是我们可以发现这些网址之中也包含了相应的图片的 id 信息，所以如果我们能够将其中的 id 信息提取出来，并套到上面的那个网址中，这样我们就能通过代码批量的访问这些图片的地址并进而进行后面的操作。  (如图所示，只要输入类似图中的网址，我们就可以访问到不同的图片)&lt;br /&gt;
![](/images/20-11-18_pixiv5.png)&lt;/p&gt;
&lt;p&gt;我们将得到的一大串不能直接访问的网址保存到本地，得到如图所示的结果&lt;br /&gt;
！[](/images/20-11-18_pixiv1.png) 要提取・其中的 id 信息最好用的当然是用正则表达式了。&lt;br /&gt;
![](/images/20-11-18_pixiv2.png)(其中 i 为当前访问的是第几页的内容，后面讲)，这样我们就的到了所有图片的 id 信息，这个时候我们只需要将 id 信息填写到基本 url 中就可以组成能够直接访问到图片的链接。&lt;br /&gt;
![](/images/20-11-18_pixiv3.png)(其中 idtag 为 id + 页数，所以提取的时候只需要取前 8 位就行 (id 观察后能发现都是 8 位))，这个时候就完成了我们的第一步。&lt;/p&gt;
&lt;h4 id=&#34;尝试访问图片链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试访问图片链接&#34;&gt;#&lt;/a&gt; 尝试访问图片链接&lt;/h4&gt;
&lt;p&gt;正常来说我们获得了可以通过点击便访问到的链接，接下来就是通过代码访问这些链接、获取他们的 html 信息、并提取到其中能够直接下载的图片的链接，&lt;/p&gt;
&lt;p&gt;![](/images/20-11-18_pixiv6.png)&lt;/p&gt;
&lt;p&gt;你是不是也是这么想的呢，如果是的话，恭喜你也错了 (hhh), 我们运行一下这部分代码，便会发现它报错了，然后我用 selenium 模仿搜索了一下，便发现无论输入的是什么网址，打开的都是这个网站的首页，所以我们为了访问到图片的地址，应该伪装成我们是登陆状态，但是我在 xhr 翻啊翻，只找到了一个&#39;set-cookie&#39; 信息，并没有找到 cookie 信息，而且当我将 set-cookie 信息加入到 headers 之中后，还是无法访问到图片 (就离谱)，这个时候我实在是没办法了，只能先用 selenium 登录进这个网站之后再进行后续的操作，操作流程为找到登录按钮的标签 -&amp;gt; 点击登录按钮 -&amp;gt; 填写账号、密码和验证码，之后在访问图片的链接。接下来的事情就更离谱了 (我是真不知道一个非赢利的图片网站为什么在反爬上下这么大功夫)，我们用 selenium 打开 pixiv 首页，&lt;/p&gt;
&lt;p&gt;![](/images/20-11-18_pixiv11.png)&lt;/p&gt;
&lt;p&gt;直接打开的界面为：&lt;br /&gt;
![](/images/20-11-19_pixiv5.png)&lt;/p&gt;
&lt;p&gt;如果这时我们直接用代码寻找登录按钮时找不到的。&lt;br /&gt;
我们必须手动叉掉广告和二维码后，代码才能找到登录按钮，而且几秒钟之内不点掉的话，你就叉不掉了 (????, 我是懵逼了)。&lt;br /&gt;
找到之后，我们就将开始输入的账号和密码自动填入，至于验证码自动识别，我还不是很熟，暂且偷下懒，反正输验证码也不要多久。&lt;br /&gt;
![](/images/20-11-18_pixiv7.png)&lt;/p&gt;
&lt;h4 id=&#34;下载图片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载图片&#34;&gt;#&lt;/a&gt; 下载图片&lt;/h4&gt;
&lt;p&gt;成功登陆之后，那事情就简单了，获取网页的 html 信息并提取出图片可下载的地址：&lt;/p&gt;
&lt;p&gt;![](/images/20-11-18_pixiv9.png)&lt;/p&gt;
&lt;p&gt;保存图片到本地：&lt;/p&gt;
&lt;p&gt;![](/images/20-11-18_pixiv10.png)&lt;/p&gt;
&lt;p&gt;接下来打开文件夹就可以找到照片了&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;20-11-19的补充代码的部分细节改进&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#20-11-19的补充代码的部分细节改进&#34;&gt;#&lt;/a&gt; 20-11-19 的补充（代码的部分细节改进）&lt;/h3&gt;
&lt;h4 id=&#34;页数的选取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页数的选取&#34;&gt;#&lt;/a&gt; 页数的选取&lt;/h4&gt;
&lt;p&gt;![](/images/20-11-19_pixiv3.png)&lt;br /&gt;
 可以选取下载的初始与终止页，不用每次从第一页下载，但是这种我感觉还是不太好，我是打算在本地再建立一个新文件，自动记录下载过的主题、页数和 id，以后再弄。&lt;/p&gt;
&lt;h4 id=&#34;id的提取与挑选&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#id的提取与挑选&#34;&gt;#&lt;/a&gt; id 的提取与挑选&lt;/h4&gt;
&lt;p&gt;原来选取出来的 id 值既包括了作品的 id 值，还包括了部分作者的 id，这次改进之后只剩下了作品的 id。但是这样还是存在另一个问题：&lt;/p&gt;
&lt;p&gt;![](/images/20-11-19_pixiv1.png)&lt;/p&gt;
&lt;p&gt;我们可以考到这样提取出来的有些是重复的，如果我们每一个 id 的图片都要检查一下是否已经存在了就会浪费很多时间，所以我就又改进了一下，在组成网址前去掉重复值，最终代码为：&lt;/p&gt;
&lt;p&gt;![](/images/20-11-19_pixiv4.png)&lt;/p&gt;
&lt;h4 id=&#34;关键字判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键字判断&#34;&gt;#&lt;/a&gt; 关键字判断&lt;/h4&gt;
&lt;p&gt;当输入的关键字找不到相关图片时，提醒用户换个关键字查找并中断程序&lt;/p&gt;
&lt;p&gt;![](/images/20-11-19_pixiv2.png)&lt;/p&gt;
&lt;h3 id=&#34;完结撒花&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完结撒花&#34;&gt;#&lt;/a&gt; 完结撒花&lt;/h3&gt;
&lt;p&gt;花了四天的时间终于将这个爬虫程序及博客写好了  (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3poYW5nbGluMjMzL2NvZGUvYmxvYi9tYXN0ZXIvLnZzY29kZS9weXRob24vJUU3JTg4JUFDJUU1JThGJTk2cGl4aXYlRTUlOUIlQkUlRTclODklODcvJUU3JTg4JUFDJUU1JThGJTk2JUU1JTlCJUJFJUU3JTg5JTg3LnB5&#34;&gt;代码地址&lt;/span&gt;)&lt;br /&gt;
，真是痛并快乐着，这几天既学到了一些新知识，又复习了一些快忘掉的知识，收获还是很大滴，不枉我这几天没日没夜的改代码、敲博客弄得人都不好了，坐太久了现在脖子都稍微有点痛，这一两天就先休息一下想想下个任务写什么。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-17-pixiv1/</guid>
            <title>爬取p站(pixiv)的图片（一）</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-17-pixiv1/</link>
            <category>Python 爬虫</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;pixiv(&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucGl4aXYubmV0Lw==&#34;&gt;地址 1&lt;/span&gt;，翻不了墙的可以通过&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9waXhpdmljLmNvbS8=&#34;&gt;地址 2&lt;/span&gt; 访问) 上面有很多非常好看的图片，我也经常在上面寻找一些好看的图片，但自己一个一个下载又太慢了，然后刚好自己学的爬虫忘的差不多了，所以就想写个爬虫自动爬取 pixiv 上的图片，顺带复习一下以前学的知识。&lt;/p&gt;
&lt;h3 id=&#34;一些图片这谁扛得住呀太好看了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一些图片这谁扛得住呀太好看了&#34;&gt;#&lt;/a&gt; 一些图片 (这谁扛得住呀，太好看了)&lt;/h3&gt;
&lt;p&gt;![](/images/3.jpg)&lt;br /&gt;
![](/images/2.jpg)&lt;br /&gt;
![](/images/4.jpg)&lt;/p&gt;
&lt;h3 id=&#34;第一次尝试失败&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一次尝试失败&#34;&gt;#&lt;/a&gt; 第一次尝试失败&lt;/h3&gt;
&lt;p&gt;因为我的梯子是白嫖的，直接从原网站下载的话可能速度会过慢，所以我选择从国内地址上下载。&lt;br /&gt;
打开网站先输入自己喜欢的类型，我找的是樱花类型。打开了网页之后便开始分析网页结构，为后面的编写代码做准备。打开开发者工具 (F12) 后便可以看到整个网页的 html 代码，&lt;br /&gt;
![](/images/11-17-pixiv.png) 使用工具栏中的小箭头随便点击一张图片便可在结构中定位到该图片的位置，&lt;br /&gt;
![](/images/11-17-pixiv2.png) 我们仔细观察之后就可以发现所有的图片都是位于 class=&#39;cell-container&#39; 的 div 盒子中，而图片则是位于这个 div 标签下的 img 标签中，而每张图片的链接都储存在 img 标签的，所以理论上接下来我们只需找到每一个 img 标签并取得所有图片的链接就可以批量下载图片。但是这个网页跟一般的网页不同，一般的的网页可以根据改变页数而选择不同的图片，而这个网页采取的是动态刷新的方式来刷新图片，随着滚动条的滚动图片不断发生改变，而整个网页并不会刷新，网址并不会改变，这就给给我们的工作带来了一定的麻烦。&lt;br /&gt;
这个时候为了能够正常的获取我们所需要的数目的照片，我们就需要继续分析网页。在开发者工具中找到 “网络”（&#39;networks&#39;）, 我们可以观察到随着我们往下滑动页面，网络中的数据也是不断改变的。本来我是打算先找到 post 请求，然后就可以找到真正的请求网址，结果他竟然没有 post 请求！！！networks 中直接给出了返回的照片信息，但是我不知道如何收集开发者工具中的 img 信息，所以只能换个方法。&lt;br /&gt;
随着我们不断地滑动，networks 中的内容不断改变，通过观察可以观察到每滑动几下，刷新的数据中除了 jpg 信息，还有 2 个&#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9waXguaXB2NC5ob3N0L2lsbHVzdHJhdGlvbnM/aWxsdXN0VHlwZT1pbGx1c3QmYW1wO3NlYXJjaFR5cGU9b3JpZ2luYWwmYW1wO21heFNhbml0eUxldmVsPTQmYW1wO3BhZ2U9NSZhbXA7a2V5d29yZD0lRTYlQTElOUMlRTMlODElQUUlRTglOEElQjEmYW1wO3BhZ2VTaXplPTMw&#34;&gt;https://pix.ipv4.host/illustrations?illustType=illust&amp;amp;searchType=original&amp;amp;maxSanityLevel=4&amp;amp;page=5&amp;amp;keyword = 桜の花 &amp;amp; pageSize=30&lt;/span&gt;&#39; 信息，一个是 get 请求，一个是 options 请求 (虽然我不知道这个请求有什么用)。&lt;br /&gt;
![](/images/20-11-17_pixiv3.png) 我们选中其中一个可以发现一个请求 url, 我通过代码爬取了一下这个网址的源代码 (直接点击这个网址是无用的，我是通过在代码添加请求头访问)，发现其中包含了很多的照片的网址，然后再观察一下这个网址的组成，可以大胆猜测我们只要改变网址中 &#39;page&#39; 的属性值就可以访问到不同的图片组，然后我用代码爬了一下不同的 page 值的网页发现返回值确实不同，就在我以为我要成功的时候，现实又严重的打击了我的自信心。我试着用代码访问获得的众多的图片网址中的一个时，返回了失败的信息，估计是爬虫做的伪装的还不够，还是被认出来了。但是我暂时并不知道如何改进，所以这种方式我就暂时放弃了。&lt;br /&gt;
接下来继续观察网页返回的信息，可以发现在参数栏中也包含了 page 信息&lt;br /&gt;
！[](/images/20-11-17_pixiv4.png), 所以我就打算将这些信息打包成 data 信息并作为参数传入请求中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import requests
from lxml import etree

# 网址
url = &#39;https://pixivic.com/keywords?tag=樱花&amp;amp;illustType=illust&amp;amp;VNK=3fa7b1f4&#39;

# 反爬
header = &amp;#123;
    &#39;accept&#39;:
    &#39;application/json, text/plain, */*&#39;,
    &#39;accept-encoding&#39;:
    &#39;gzip, deflate, br&#39;,
    &#39;accept-language&#39;:
    &#39;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#39;,
    &#39;authorization&#39;:
    &#39;eyJhbGciOiJIUzUxMiJ9.eyJwZXJtaXNzaW9uTGV2ZWwiOjIsInJlZnJlc2hDb3VudCI6MSwiaXNCYW4iOjEsInVzZXJJZCI6NTk3NTIyLCJpYXQiOjE2MDU1MzA4ODEsImV4cCI6MTYwNTcwMzY4MX0.yPa-vDYWgMtp6Mer_Ycgyf4r6i6ZQoHFZJGi1v9CjYH7Q7T9Kz_Coa5PwbtZC0j-AvhRFEWaa5D5jxD8WujxBA&#39;,
    &#39;dnt&#39;:
    &#39;1&#39;,
    &#39;origin&#39;:
    &#39;https://pixivic.com&#39;,
    &#39;referer&#39;:
    &#39;https://pixivic.com/&#39;,
    &#39;sec-fetch-dest&#39;:
    &#39;empty&#39;,
    &#39;sec-fetch-mode&#39;:
    &#39;cors&#39;,
    &#39;sec-fetch-site&#39;:
    &#39;cross-site&#39;,
    &#39;cookie&#39;:
    &#39;__cfduid=d9b53ec0583ae0dc116fee426d77c30891605603315; expires=Thu, 17-Dec-20 08:55:15 GMT; path=/; domain=.cheerfun.dev; HttpOnly; SameSite=Lax&#39;,
    &#39;user-agent&#39;:
    &#39;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36 Edg/86.0.622.69&#39;
&amp;#125;
# 提交的数据
dat = &amp;#123;
    &#39;illustType&#39;: &#39;illust&#39;,
    &#39;searchType&#39;: &#39;original&#39;,
    &#39;maxSanityLevel&#39;: &#39;4&#39;,
    &#39;page&#39;: &#39;2&#39;,
    &#39;keyword&#39;: &#39;樱花&#39;,
    &#39;pageSize&#39;: &#39;30&#39;,
&amp;#125;

r = requests.get(url, data= dat,headers=header, timeout=30)
print(r.status_code)
r.raise_for_status()  # 如果状态不是200，则引发HTTPERROE异常
text = r.content.decode(encoding=&#39;utf-8&#39;, errors=&#39;ignore&#39;)
print(text)
html = etree.HTML(text)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行完整代码后，我们可以看到成功返回了信息，&lt;br /&gt;
![](/images/20-11-17_pixiv5.png), 但是这些都是没用的，一个有用的东西都没有！！！明显这是又被认出来是爬虫了，这次人家还客气点没有直接拒绝请求访问，只是给了假的页面而已。&lt;/p&gt;
&lt;p&gt;所以在折腾了将近一天的时间后还是没有成功的爬取下来图片，只能再去看一些相关的网课来学学怎么更好的伪装骗过系统，太难受了💔。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/nginx/2021-11-20-Nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
            <title>Nginx的反向代理与负载均衡</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/nginx/2021-11-20-Nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
            <category>Nginx</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;nginx的反向代理与负载均衡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx的反向代理与负载均衡&#34;&gt;#&lt;/a&gt; Nginx 的反向代理与负载均衡&lt;/h1&gt;
&lt;h2 id=&#34;反向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向代理&#34;&gt;#&lt;/a&gt; 反向代理&lt;/h2&gt;
&lt;h3 id=&#34;什么是反向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是反向代理&#34;&gt;#&lt;/a&gt; 什么是反向代理&lt;/h3&gt;
&lt;p&gt;反向代理（Reverse Proxy）方式是指以代理服务器来接受 Internet 上的连接请求，然 后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202450.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;反向代理的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向代理的作用&#34;&gt;#&lt;/a&gt; 反向代理的作用：&lt;/h4&gt;
&lt;p&gt;（1）保证内网的安全，阻止 web 攻击，大型网站，通常将反向代理作为公网访问地址，Web 服务器是内网&lt;/p&gt;
&lt;p&gt;（2）负载均衡，通过反向代理服务器来优化网站的负载&lt;/p&gt;
&lt;h4 id=&#34;反向代理和正向代理的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向代理和正向代理的区别&#34;&gt;#&lt;/a&gt; 反向代理和正向代理的区别&lt;/h4&gt;
&lt;p&gt;首先我们先理解正向代理，正向代理类似一个跳板机，代理访问外部资源。比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202139.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正向代理的用途：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）访问原来无法访问的资源，如 google&lt;/p&gt;
&lt;p&gt;​    	（2） 可以做缓存，加速访问资源&lt;/p&gt;
&lt;p&gt;（3）对客户端访问授权，上网进行认证&lt;/p&gt;
&lt;p&gt;（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正向代理即是客户端代理，代理客户端，服务端不知道实际发起请求的客户端.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt; 反向代理即是服务端代理，代理服务端，客户端不知道实际提供服务的服务端&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202656.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;正向代理中，proxy 和 client 同属一个 LAN，对 server 透明；&lt;br /&gt;
反向代理中，proxy 和 server 同属一个 LAN，对 client 透明。&lt;br /&gt;
实际上 proxy 在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。&lt;/p&gt;
&lt;p&gt;正向代理：买票的黄牛&lt;/p&gt;
&lt;p&gt;反向代理：租房的代理&lt;/p&gt;
&lt;h3 id=&#34;配置反向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置反向代理&#34;&gt;#&lt;/a&gt; 配置反向代理&lt;/h3&gt;
&lt;p&gt;将 travel 案例部署到 tomcat 中（ROOT 目录），上传到服务器。 （2）启动 TOMCAT，输入网址 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMTc3LjEyOTo4MDgw&#34;&gt;http://192.168.177.129:8080&lt;/span&gt; 可以看到网站首页&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;upstream tomcat-travel&amp;#123; 
  server 192.168.177.129:8080;  # 修改为你自己的虚拟机的ip地址
 &amp;#125; 
 server &amp;#123; 
   listen 80; # 监听的端口
   server_name www.hmtravel.com; # 域名或 ip 
 location / &amp;#123; # 访问路径配置
   # root index;# 案例的部署路径 默认index
   proxy_pass http://tomcat-travel;   // 与上方tomcat-travel对应
   index index.html index.htm; # 默认首页
 &amp;#125; 
&amp;#125; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新启动 Nginx  然后用浏览器测试：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5obXRyYXZlbC5jb20=&#34;&gt;http://www.hmtravel.com&lt;/span&gt; （此域名须配置域名）&lt;/p&gt;
&lt;h2 id=&#34;负载均衡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#负载均衡&#34;&gt;#&lt;/a&gt; 负载均衡&lt;/h2&gt;
&lt;h3 id=&#34;什么是负载均衡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是负载均衡&#34;&gt;#&lt;/a&gt; 什么是负载均衡&lt;/h3&gt;
&lt;p&gt;负载均衡 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备 和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。  负载均衡，英文名称为 Load Balance，其意思就是分摊到多个操作单元上进行执行， 例如 Web 服务器、FTP 服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完 成工作任务。&lt;/p&gt;
&lt;h3 id=&#34;负载均衡准备工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#负载均衡准备工作&#34;&gt;#&lt;/a&gt; 负载均衡准备工作&lt;/h3&gt;
&lt;p&gt;将相同的工程复制三份或不同的工程部署到服务器上，分别修改他们的端口使端口各不相同，如 80，81，82。分别启动这三个服务。 为了能够区分是访问哪个服务器的网站，可以在首页标题加上标记以便区分&lt;/p&gt;
&lt;h3 id=&#34;修改nginx配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改nginx配置文件&#34;&gt;#&lt;/a&gt; 修改 Nginx 配置文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;upstream tomcat-travel &amp;#123; 
	server 192.168.177.129:8080; # 项目的部署地址
	server 192.168.177.129:8081  weight=2; # 不同的权重可以使不同的服务器被访问到的概率不同，权重越高概率越大
	server 192.168.177.129:8082; 
 &amp;#125; 
 server &amp;#123; 
 	listen 80; # 监听的端口
 	server_name www.hmtravel.com; # 绑定的域名或 ip 
	location / &amp;#123; # 访问路径配置
 		# root index;# 根目录
 		proxy_pass http://tomcat-travel; 
 		index index.html index.htm; # 默认首页
 	&amp;#125; 
	error_page 500 502 503 504 /50x.html; # 错误页面
 	location = /50x.html &amp;#123; 
 		root html; 
 	&amp;#125; 
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动 Nginx 观察结果便可&lt;/p&gt;
&lt;p&gt;参考文章：[1] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdGFvc3Rhcnl1L3AvMTA1NDcxMzIuaHRtbA==&#34;&gt;反向代理和正向代理区别 - 泛夜泰克 - 博客园 (cnblogs.com)&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;​					[2] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXF2NHkxbzc5dD9wPTUzOQ==&#34;&gt;黑马程序员 JavaWeb 全套基础教程，java web 从入门到项目实战（IDEA 版 javaweb）文档资料_哔哩哔哩_bilibili&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-7-10-java%E4%B9%8Bjunit%E6%B5%8B%E8%AF%95/</guid>
            <title>java之junit测试</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-7-10-java%E4%B9%8Bjunit%E6%B5%8B%E8%AF%95/</link>
            <category>java SpringBoot</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;junit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#junit&#34;&gt;#&lt;/a&gt; junit&lt;/h1&gt;
&lt;h2 id=&#34;什么是junit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是junit&#34;&gt;#&lt;/a&gt; 什么是 junit&lt;/h2&gt;
&lt;p&gt;JUnit 是一个 Java 语言的单元测试框架。它由 Kent Beck 和 Erich Gamma 建立，逐渐成为源于 Kent Beck 的 sUnit 的 xUnit 家族中最为成功的一个。 JUnit 有它自己的 JUnit 扩展生态圈。多数 Java 的开发环境都已经集成了 JUnit 作为单元测试的工具。&lt;/p&gt;
&lt;p&gt;也就是说 junit 就是别人写好的单元测试框架，使用此框架你可以大大缩短你的测试时间和准确度（笔者现在还记得大一刚来的的时候，c 语言写的小程序，每次都是重启测试，那种编译 - 输入 -- 停止 - 编译的苦日子，很痛苦，今天用 junit 这个单元测试框架好多了）。&lt;/p&gt;
&lt;h3 id=&#34;单元测试是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元测试是什么&#34;&gt;#&lt;/a&gt; 单元测试是什么&lt;/h3&gt;
&lt;p&gt;百度百科的解释是这样的：单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。例如，你可能把一个很大的值放入一个有序 list 中去，然后确认该值出现在 list 的尾部。或者，你可能会从字符串中删除匹配某种模式的字符，然后确认字符串确实不再包含这些字符了。&lt;/p&gt;
&lt;p&gt;简单的说，单元测试就是对你程序中最小的功能模块进行测试，在 c 语言里可能是一个函数，java 中可能是一个方法或者类。目的就是为了提高代码的质量。&lt;/p&gt;
&lt;p&gt;### 为什么要引入单元测试&lt;br /&gt;
平常写代码的时候经常需要检验某些方法功能是否正常，正常情况下需要创立完整的类来运行检验该方法，这样难免效率低下，引入 junit 之后就不用构建一个完整的程序便可以对某一方法进行检验。&lt;/p&gt;
&lt;h2 id=&#34;idea中junit的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#idea中junit的使用&#34;&gt;#&lt;/a&gt; IDEA 中 junit 的使用&lt;/h2&gt;
&lt;h3 id=&#34;创建包名及代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建包名及代码&#34;&gt;#&lt;/a&gt; 创建包名及代码&lt;/h3&gt;
&lt;p&gt;包名规范&lt;/p&gt;
&lt;p&gt;单元测试的代码都放在 test 包下，和源码不在同一个包下&lt;br /&gt;
！[](/images/2021_7_10_junit/1.png)&lt;br /&gt;
 如图所示，DaoTest 类单独放在 test 包下。&lt;br /&gt;
测试的类方法都以 test 开头，后面接要测试的类或者方法的名字&lt;/p&gt;
&lt;h4 id=&#34;junit使用方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#junit使用方法&#34;&gt;#&lt;/a&gt; junit 使用方法&lt;/h4&gt;
&lt;p&gt;以下图代码为例&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dao&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;UserDao&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;domain&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DaoTest&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;testLogin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt; loginUser &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        loginUser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setUsername&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;superBaby&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        loginUser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setPassword&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;123&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;UserDao&lt;/span&gt; dao &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;UserDao&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt; user &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dao&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;loginUser&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在要测试的方法前键入 @test，这是会发现 test 为红色提示。&lt;br /&gt;
![](/images/2021_7_10_junit/2.png)&lt;br /&gt;
 这是我们只需按住 Ctrl+shift+Alt+s 打开项目结构，找到库并在右边找到 + 号按钮新建一个 java 库，并在 idea 的安装目录中的 lib 文件夹找到 junit-4.12.jar 文件并导入即可。&lt;br /&gt;
![](/images/2021_7_10_junit/6.png)&lt;br /&gt;
![](/images/2021_7_10_junit/3.png)&lt;br /&gt;
 接下来，便需要将 junit.jar 文件导入到模块中。&lt;br /&gt;
![](/images/2021_7_10_junit/4.png)&lt;br /&gt;
 选中 junit4.12jar 文件并点击右上方的 + 号并添加到模块依赖中。&lt;br /&gt;
![](/images/2021_7_10_junit/5.png)&lt;br /&gt;
 接下来便返回项目中，导入 org.junit.test 包后，可以看到 @Test 变为了正常的颜色，接下来点击方法前面的绿色三角形便可以对方法进行测验了。&lt;br /&gt;
![](/images/2021_7_10_junit/7.png)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%85%8D%E7%BD%AE%E9%AB%98%E7%BA%A7/</guid>
            <title>SpringBoot运维实用篇之配置高级</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%85%8D%E7%BD%AE%E9%AB%98%E7%BA%A7/</link>
            <category>java SpringBoot</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;springboot运维实用篇之配置高级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot运维实用篇之配置高级&#34;&gt;#&lt;/a&gt; springboot 运维实用篇之配置高级&lt;/h1&gt;
&lt;h2 id=&#34;临时属性配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#临时属性配置&#34;&gt;#&lt;/a&gt; 临时属性配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;带属性数启动 SpringBoot, 使用替换配置文件中的属性&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;java &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;jar 工程名&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;jar &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;server&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;port&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119220801.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过编程形式带参数启动 SpringBoot 程序，为程序添加运行参数&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; arg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	arg&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;--server.port=8080&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SSMPApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不携带参数启动 SpringBoot 程序&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SSMPApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;携带多个属性启动 SpringBoot, 属性之间使用空格分隔&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;临时属性必须是当前 boot 工程支持的属性，否则设置无效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性加载优先级&lt;/p&gt;
&lt;p&gt;[](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvZmVhdHVyZXMuaHRtbCNmZWF0dXJlcy5leHRlcm5hbC1jb25maWc=&#34;&gt;Core Features (spring.io)&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119214529.png&#34; alt=&#34;/&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置文件分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置文件分类&#34;&gt;#&lt;/a&gt; 配置文件分类&lt;/h2&gt;
&lt;h3 id=&#34;springboot中4级配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot中4级配置文件&#34;&gt;#&lt;/a&gt; SpringBoot 中 4 级配置文件&lt;/h3&gt;
&lt;p&gt;1 级： file ：config/application.yml 【最高】 （file：与 jar 包位于同一目录下）&lt;/p&gt;
&lt;p&gt;2 级： file ：application.yml&lt;/p&gt;
&lt;p&gt;3 级：classpath：config/application.yml&lt;/p&gt;
&lt;p&gt;4 级：classpath：application.yml 【最低】&lt;/p&gt;
&lt;h3 id=&#34;作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1 级与 2 级留做系统打包后设置通用属性，1 级常用于运维经理进行线上整体项目部署方案调控&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3 级与 4 级用于系统开发阶段设置通用属性，3 级常用于项目经理进行整体项目属性调控&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 yml 与 properties 在不同层级中共存会是什么效果？ 例：类路径 application.properties 属性是否覆盖文件系统 config 目录中 application.yml 属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目类路径配置文件：服务于开发人员本机开发与测试&lt;/li&gt;
&lt;li&gt;项目类路径 config 目录中配置文件：服务于项目经理整体调控&lt;/li&gt;
&lt;li&gt;工程路径配置文件：服务于运维人员配置涉密线上环境&lt;/li&gt;
&lt;li&gt;工程路径 config 目录中配置文件：服务于运维经理整体调控&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多层级配置文件间的属性采用叠加并覆盖的形式作用于程序&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自定义配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义配置文件&#34;&gt;#&lt;/a&gt; 自定义配置文件&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/</guid>
            <title>springboot运维实用篇之打包与运行</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/</link>
            <category>java SpringBoot</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;打包与运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打包与运行&#34;&gt;#&lt;/a&gt; 打包与运行&lt;/h1&gt;
&lt;p&gt;SpringBoot 项目可以基于 java 环境下独立运行 jar 文件下独立运行 jar 文件启动服务&lt;/p&gt;
&lt;h2 id=&#34;程序打包与运行windows版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序打包与运行windows版&#34;&gt;#&lt;/a&gt; 程序打包与运行（Windows 版）&lt;/h2&gt;
&lt;h3 id=&#34;springboot项目快速启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot项目快速启动&#34;&gt;#&lt;/a&gt; SpringBoot 项目快速启动&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对 SpringBoot 项目打包 (执行 Maven 构建指令 package)&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mvn &lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行项目 (执行启动指令)&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;java &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;jar 打包后的项目名称&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;jar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;注意事项：jar 支持命令行启动需要依赖 maven 插件支持，请确认打包时是否具有 SpringBoot 对应的 maven 插件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;plugins&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;plugins&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;可执行jar包目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可执行jar包目录结构&#34;&gt;#&lt;/a&gt; 可执行 jar 包目录结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119212734.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;jar包描述文件manifestmf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jar包描述文件manifestmf&#34;&gt;#&lt;/a&gt; jar 包描述文件 (MANIFEST.MF)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;普通工程&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Manifest-Version&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Implementation-Title&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; spring_01_01_quickStart&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Implementation-Version&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;.&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;-SNAPSHOT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Build-Jdk-Spec&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Created-By&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Maven Jar Plugin &lt;span class=&#34;token number&#34;&gt;3.2&lt;/span&gt;.&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 Spring-Boot-maven-plugin 打包的工程&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Manifest-Version&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Spring-Boot-Classpath-Index&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; BOOT-INF/classpath.idx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Implementation-Title&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; spring_01_01_quickStart&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Implementation-Version&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;.&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;-SNAPSHOT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Spring-Boot-Layers-Index&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; BOOT-INF/layers.idx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Start-Class&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; com.example.Spring0101QuickStartApplication&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Spring-Boot-Classes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; BOOT-INF/classes/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Spring-Boot-Lib&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; BOOT-INF/lib/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Build-Jdk-Spec&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Spring-Boot-Version&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.5&lt;/span&gt;.&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Created-By&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Maven Jar Plugin &lt;span class=&#34;token number&#34;&gt;3.2&lt;/span&gt;.&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Main-Class&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; org.springframework.boot.loader.JarLauncher&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命令行启动常见问题及解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令行启动常见问题及解决方案&#34;&gt;#&lt;/a&gt; 命令行启动常见问题及解决方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows 端口被占用&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 查询端口&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;netstat -ano&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 查询指定端口&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;netstat -ano |findstr &lt;span class=&#34;token string&#34;&gt;&#34;端口号&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 根据进程PID查询进程名称&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tasklist |findstr &lt;span class=&#34;token string&#34;&gt;&#34;进程PID号&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 根据PID杀死任务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;taskkill /F /PID &lt;span class=&#34;token string&#34;&gt;&#34;进程PID号&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 根据进程名称杀死任务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;taskkill -f -t -im &lt;span class=&#34;token string&#34;&gt;&#34;进程名称&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序打包与运行linux版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序打包与运行linux版&#34;&gt;#&lt;/a&gt; 程序打包与运行 (Linux 版)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;上传安装包&lt;/li&gt;
&lt;li&gt;执行 jar 命令：java -jar 工程名.jar&lt;/li&gt;
&lt;li&gt;Windows 与 Linux 下执行 Boot 打包程序流程相同，仅需确保运行环境有效即可&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8A%80%E6%9C%AF/</guid>
            <title>springboot基础篇之整合第三方技术</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8A%80%E6%9C%AF/</link>
            <category>java springboot</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;spring基础之整合第三方技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring基础之整合第三方技术&#34;&gt;#&lt;/a&gt; Spring 基础之整合第三方技术&lt;/h1&gt;
&lt;h2 id=&#34;整合junit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整合junit&#34;&gt;#&lt;/a&gt; 整合 Junit&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;导入测试对应的 starter&lt;/li&gt;
&lt;li&gt;测试类使用 @SpringBoot 修饰&lt;/li&gt;
&lt;li&gt;使用自动装配的形式添加要测试的对象&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 名称: @SpringBootTest&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 类型：测试类注解&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 位置：测试类上方&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 作用：设置 Junit 加载的 SpringBoot 启动类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//classes: 设置 SpringBoot 的启动类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;classes&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SpringBootJunitApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SpringBootJunitApplicationTest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;如果测试类在 SpringBoot 启动类的包或子包中，可以忽略启动类的设置，也就是忽略 classes 的设定&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;整合mybatis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整合mybatis&#34;&gt;#&lt;/a&gt; 整合 MyBatis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;核心配置：数据库连接相关信息&lt;/li&gt;
&lt;li&gt;映射配置：SQL 映射 (XML / 注解)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建新模块，选择 Spring 初始化，并配置模块相关基础信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择当前模块需要使用的技术集（MyBatis、MySQL）(勾选 MyBatis 技术，也就是导入 MyBatis 对应的 starter)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119171012.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置数据源参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 数据库连接相关信息转换成配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;datasource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;# 驱动类过时，提醒更换为 com.mysql.cj.jdbc.Driver&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;driver-class-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; com.mysql.cj.jdbc.Driver&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; jdbc&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//localhost&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;3306/ssm_db&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;SpringBoot 版本低于 2.4.3 (不含)，Mysql 驱动版本大于 8.0 时，需要在 url 连接串中配置时区 或在 MySQL 数据库端配置时区解决此问题&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;jdbc:mysql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; //localhost&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;3306/ssm_db&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;serverTimezone=UTC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;定义数据层接口与映射配&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 数据库 SQL 映射需要添加 @Mapper 被容器识别&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Mapper&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;UserDao&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;select * from user&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getAll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;测试类中注入 dao 接口，测试功能&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootTest&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Springboot08MybatisApplicationTests&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Autowired&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BookDao&lt;/span&gt; bookDao&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;testGetById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Book&lt;/span&gt; book &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bookDao&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;book&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;整合mybatis-plus&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整合mybatis-plus&#34;&gt;#&lt;/a&gt; 整合 MyBatis-Plus&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MyBatis-Plus 与 MyBatis 区别
&lt;ul&gt;
&lt;li&gt;导入坐标不同&lt;/li&gt;
&lt;li&gt;数据层实现简化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;手动添加 SpringBoot 整合 MyBatis-Plus 的坐标，可以通过 mvnrepository 获取&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;com.baomidou&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;mybatis-plus-boot-starter&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 由于 SpringBoot 中未收录 MyBatis-Plus 的坐标版本，需要指定对应的 Version--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;3.4.3&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义数据层接口与映射配置，继承 BaseMapper&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Mapper&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;UserDao&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BaseMapper&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他同 SpringBoot 整合 MyBatis&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;整合druid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整合druid&#34;&gt;#&lt;/a&gt; 整合 Druid&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;指定数据源类型&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;datasource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;driver-class-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; com.mysql.cj.jdbc.Driver&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; jdbc&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//localhost&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;3306/ssm_db&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;serverTimezone=UTC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; com.alibaba.druid.pool.DruidDataSourc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导入 Druid 对应的 starter&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;com.alibaba&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;druid-spring-boot-starter&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1.2.6&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;变更 Druid 的配置方式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;datasource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;druid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;driver-class-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; com.mysql.cj.jdbc.Driver&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; jdbc&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//localhost&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;3306/ssm_db&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;serverTimezone=UTC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;整合第三方技术通用方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整合第三方技术通用方式&#34;&gt;#&lt;/a&gt; 整合第三方技术通用方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;导入对应的 starter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据提供的配置格式，配置非默认值对应的配置项&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</guid>
            <title>springboot基础篇之基础配置</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</link>
            <category>java SpringBoot</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;springboot基础篇之基础配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot基础篇之基础配置&#34;&gt;#&lt;/a&gt; springboot 基础篇之基础配置&lt;/h1&gt;
&lt;h2 id=&#34;属性配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性配置&#34;&gt;#&lt;/a&gt; 属性配置&lt;/h2&gt;
&lt;h3 id=&#34;复制工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复制工程&#34;&gt;#&lt;/a&gt; 复制工程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原则
&lt;ul&gt;
&lt;li&gt;保留工程基础结构&lt;/li&gt;
&lt;li&gt;抹掉原始工程结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;在工作空间中复制对应工程，并修改工程名称&lt;/li&gt;
&lt;li&gt;删除与 Idea 有关的配置，仅保留 src 目录与 pom.xml 文件&lt;/li&gt;
&lt;li&gt;修改 pom.xml 文件中的 artifachId 与新工程 / 模块名相同&lt;/li&gt;
&lt;li&gt;删除 name 标签（可选）&lt;/li&gt;
&lt;li&gt;保留备份工程后期使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;修改配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改配置&#34;&gt;#&lt;/a&gt; 修改配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改服务器端口&lt;/p&gt;
&lt;p&gt;SpringBoot 默认配置文件为 application.properties，通过键值对配置相应属性。修改服务器端口：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token attr-name&#34;&gt;server.port&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token attr-value&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;关闭运行日志图标&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token attr-name&#34;&gt;spring.main.banner-mode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;off&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;设置日志相关&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token attr-name&#34;&gt;logging.level.root&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token attr-value&#34;&gt;debug&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[SpringBoot 内置属性查询](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvYXBwbGljYXRpb24tcHJvcGVydGllcy5odG1sI2FwcGxpY2F0aW9uLXByb3BlcnRpZXM=&#34;&gt;Common Application Properties (spring.io)&lt;/span&gt;), 官方文档中参考第一项：Application properties&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书写 Spring Boot 配置采用关键字 + 提示形式书写，SpringBoot 中只有导入了对应 Starter 后，才后提供对应配置属性提示&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置文件分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置文件分类&#34;&gt;#&lt;/a&gt; 配置文件分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SpringBoot 提供了多种属性配置方式，分别为 application.properties、application.yaml、application.yml, SpringBoot 默认的配置方式为 application.properties, 但以 properties 文件结构不够清晰简洁，因此常用 yml 配置文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token attr-name&#34;&gt;server.port&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token attr-value&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;application.yml (：后必须留有空格)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token key atrule&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;application.yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token key atrule&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpringBoot 允许三种配置文件共存，配置文件加载顺序：.properties &amp;gt; yml &amp;gt; yaml&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同配置文件中相同配置按照优先级相互覆盖，不同配置文件中不同配置全部保留&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动提示功能消失方案解决（首先确保引入了对应的 starter）-- 指定 SpringBoot 配置文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Idea 中打开 Setting-&amp;gt;Pro 金额词条 Structure-&amp;gt;Facets&lt;/li&gt;
&lt;li&gt;选中相应项目 / 工程&lt;/li&gt;
&lt;li&gt;Customize Spring Boot&lt;/li&gt;
&lt;li&gt;选择配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yaml文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yaml文件&#34;&gt;#&lt;/a&gt; yaml 文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;YAML (YAML Ain&#39;t Markup Language) 一种数据序列化格式&lt;/li&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;容易阅读&lt;/li&gt;
&lt;li&gt;容易与脚本语言交互&lt;/li&gt;
&lt;li&gt;以数据为核心&lt;/li&gt;
&lt;li&gt;重数据轻格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;YAML 文件拓展名
&lt;ul&gt;
&lt;li&gt;.yml (主流)&lt;/li&gt;
&lt;li&gt;.yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;yaml 语法规则
&lt;ul&gt;
&lt;li&gt;大小写敏感&lt;/li&gt;
&lt;li&gt;属性层级关系使用多行描述，每行结尾使用冒号结束&lt;/li&gt;
&lt;li&gt;使用缩进表示层级关系，同层级左侧对齐，只允许使用空格，不允许使用 tab 键&lt;/li&gt;
&lt;li&gt;属性名与属性值之间使用冒号 + 空格作为分隔&lt;/li&gt;
&lt;li&gt;# 表示注释&lt;/li&gt;
&lt;li&gt;核心规则：数据前面要使用冒号与空格隔开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 字面值表示方式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;TRUE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token null important&#34;&gt;~&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; HelloWorld&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;string2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;HelloWorld&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 字符串可以直接而书写也可以使用引号包裹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token datetime number&#34;&gt;2018-02-17&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;# 日期必须使用 yyyy-MM-dd 格式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;datatime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token datetime number&#34;&gt;2018-02-17T15:02:31+08:00&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;#日期和时间之间使用 T 连接，最后使用 + 代表时区&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 数组表示方法：在属性名下方使用 - 作为数据开始符号，每行书写一个数据，减号与数据间使用空格分隔&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; Java&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; 前端&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; 大数据&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;             &lt;span class=&#34;token comment&#34;&gt;# 对象数组格式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; tom&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; Jerry&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对象数组缩略格式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;users2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;tom &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;yaml数据读取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yaml数据读取&#34;&gt;#&lt;/a&gt; yaml 数据读取&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单个数据读取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 @Value 配合 SpeEL 读取单个数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果数据存在多层级，依次书写多层级名称即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;classtest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token annotation punctuation&#34;&gt;@value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;$&amp;#123;lesson&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; lessonName&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;$&amp;#123;serve.port&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; port&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性中如果存在转义字符，需要使用双引号包裹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lesson&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Spring\boot\lesson&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;封装全部数据到 Environment 对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;classtest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    # 使用&lt;span class=&#34;token class-name&#34;&gt;Autowired&lt;/span&gt;自动装配到&lt;span class=&#34;token class-name&#34;&gt;Environment&lt;/span&gt;对象中&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token annotation punctuation&#34;&gt;@Autowired&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Environment&lt;/span&gt; env&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;lesson&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;users&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自定义对象封装指定数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Component&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;prefix &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;users&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; users&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 @ConfigurationProperties 注解绑定配置信息到封装类中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;封装类需要定义为 Spring 管理的 Bean, 否则无法进行属性注入&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-17-springboot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bspringboot/</guid>
            <title>springboot基础篇之快速上手springboot</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-17-springboot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bspringboot/</link>
            <category>java SpringBoot</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;快速上手springboot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速上手springboot&#34;&gt;#&lt;/a&gt; 快速上手 Springboot&lt;/h1&gt;
&lt;h2 id=&#34;springboot简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot简介&#34;&gt;#&lt;/a&gt; SpringBoot 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SpringBoot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化 Spring 应用的初始搭建以及开发过程 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring 程序缺点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;依赖设置繁琐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;配置繁琐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;SpringBoot 程序优点&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;起步依赖（简化依赖配置）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;自动配置（简化常用工程相关配置）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;辅助功能（内置服务器，……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring 程序与 SpringBoot 程序对比&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200144.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建springboot工程的四种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建springboot工程的四种方式&#34;&gt;#&lt;/a&gt; 创建 SpringBoot 工程的四种方式&lt;/h2&gt;
&lt;h3 id=&#34;基于idea创建springboot工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于idea创建springboot工程&#34;&gt;#&lt;/a&gt; 基于 Idea 创建 SpringBoot 工程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建新模块，选择 Spring Initializr，并配置模块相关基础信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200639.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;选择当前模块需要使用的技术集&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200722.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;开发控制器类&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119174712.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;运行自动生成的 Application 类&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119174735.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看到项目所运行的服务器为 Tomcat 及服务器运行的端口号为 8080.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;小结&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开发 SpringBoot 程序可以根据向导进行联网快速制作（基于 idea 开发 SpringBoot 程序需要确保联网且能够加载到程序框架结构）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpringBoot 程序需要基于 JDK8 进行制作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpringBoot 程序中需要使用何种功能通过勾选选择技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行 SpringBoot 程序通过运行 Application 程序入口进行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;于官网创建springboot工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#于官网创建springboot工程&#34;&gt;#&lt;/a&gt; 于官网创建 SpringBoot 工程&lt;/h3&gt;
&lt;p&gt;基于 SpringBoot 官网创建项目，地址 :&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8=&#34;&gt;https://start.spring.io&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117201433.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;所填属性与通过 Idea 创建工程相同&lt;/p&gt;
&lt;h3 id=&#34;基于阿里云创建springboot工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于阿里云创建springboot工程&#34;&gt;#&lt;/a&gt; 基于阿里云创建 SpringBoot 工程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117201551.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基于阿里云创建 springboot 项目只需在第三步中取消勾选默认的 start 来源，改为勾选 Custom 用户自定义，并填入阿里云网址&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N0YXJ0LmFsaXl1bi5jb20=&#34;&gt; http://start.aliyun.com&lt;/span&gt; 即可，其它操作与基于 Idea 创建 SpringBoot 工程相同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意事项&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;阿里云提供的坐标版本较低，如果需要使用高版本，进入工程后手工切换 SpringBoot 版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阿里云提供的工程模板与 Spring 官网提供的工程模板略有不通&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;手工创建maven工程修改为springboot工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手工创建maven工程修改为springboot工程&#34;&gt;#&lt;/a&gt; 手工创建 Maven 工程修改为 SpringBoot 工程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建普通 Maven 工程&lt;/li&gt;
&lt;li&gt;继承 spring-boot-starter-parent&lt;/li&gt;
&lt;li&gt;添加依赖 spring-boot-starter-web&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;project&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;xmlns&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://maven.apache.org/POM/4.0.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;xmlns:&lt;/span&gt;xsi&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://www.w3.org/2001/XMLSchema-instance&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token attr-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;xsi:&lt;/span&gt;schemaLocation&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;modelVersion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;4.0.0&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;modelVersion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;2.5.6&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;relativePath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- lookup parent from repository --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;com.example&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring_01_01_quickStart&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;project&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;制作引导类 Application&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;example&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;autoconfigure&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SpringBootApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Spring0101QuickStartApplication&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Spring0101QuickStartApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;隐藏指定文件文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏指定文件文件夹&#34;&gt;#&lt;/a&gt; 隐藏指定文件 / 文件夹&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Setting → File Types → Ignored Files and Folders&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入要隐藏的文件名，支持 * 号通配符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回车确认添加&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;入门案例解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#入门案例解析&#34;&gt;#&lt;/a&gt; 入门案例解析&lt;/h2&gt;
&lt;h3 id=&#34;parent&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#parent&#34;&gt;#&lt;/a&gt; parent&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发 SpringBoot 程序要继承 spring-boot-starter-parent&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;xml version&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1.0&#34;&lt;/span&gt; encoding&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;UTF-8&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;project xmlns&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://maven.apache.org/POM/4.0.0&#34;&lt;/span&gt; xmlns&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;xsi&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         xsi&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;schemaLocation&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;modelVersion&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;modelVersion&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;parent&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;groupId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;starter&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;parent&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;artifactId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.5&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.6&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;version&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;relativePath&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt; lookup parent from repository &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;parent&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;example&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;groupId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring_01_01_quickStart&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;artifactId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;SNAPSHOT&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;version&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependencies&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;groupId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;starter&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;web&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;artifactId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;dependency&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;dependencies&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;project&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-starter-parent 中定义了若干个依赖管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承 parent 模块可以避免多个依赖使用相同技术时出现依赖版本冲突&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承 parent 的形式也可以采用引入依赖的形式实现效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117203328.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;starter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#starter&#34;&gt;#&lt;/a&gt; starter&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;groupId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;starter&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;web&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;artifactId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;dependency&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;starter 中包含了许多依赖&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117203725.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将鼠标放在 starter 上按住 Ctrl + 鼠标左击即可查看详细信息。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;starter&lt;/p&gt;
&lt;p&gt;SpringBoot 中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parent&lt;/p&gt;
&lt;p&gt;所有 SpringBoot 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的 spring-boot-starter-parent 各版本间存在着诸多坐标版本不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实际开发&lt;/p&gt;
&lt;p&gt;使用任意坐标时，仅书写 GAV 中的 G (groupId) 和 A (artifactId)，V (version) 由 SpringBoot 提供，除非 SpringBoot 未提供对应版本 V，如发生坐标错误 (starter 中未包含当前依赖)，再指定 Version（要小心版本冲突)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;引导类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引导类&#34;&gt;#&lt;/a&gt; 引导类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动方式&lt;/p&gt;
&lt;p&gt;SpringBoot 的引导类是 Boot 工程的执行入口，运行 main 方法就可以启动项目&lt;/p&gt;
&lt;p&gt;SpringBoot 工程运行后初始化 Spring 容器，扫描引导类所在包加载 bean&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Spring0101QuickStartApplication&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ConfigurableApplicationContext&lt;/span&gt; ctx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Spring0101QuickStartApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        bookController bean &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getBean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bookController&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;=====&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;bean&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117210124.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;tomcat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tomcat&#34;&gt;#&lt;/a&gt; Tomcat&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;内嵌 Tomcat 服务器是 SpringBoot 辅助功能之一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内嵌 Tomcat 工作原理是将 Tomcat 服务器作为对象运行，并 将该对象交给 Spring 容器管理&lt;/p&gt;
&lt;p&gt;查看 spring-boot-starter-web 依赖详细信息可以看到其中包括了 Tomcat&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117212854.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变更内嵌服务器思想是去除现有服务器，添加全新的服务器&lt;/p&gt;
&lt;p&gt;想要变更服务器只需修改 pom.xml 文件中的相关信息即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;groupId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;starter&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;web&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;artifactId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;            web起步依赖环境中，排除&lt;span class=&#34;token class-name&#34;&gt;Tomcat&lt;/span&gt;起步依赖&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;exclusions&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;exclusion&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;groupId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;starter&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;tomcat&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;artifactId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;exclusion&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;exclusions&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;dependency&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;        添加jetty起步依赖，版本由&lt;span class=&#34;token class-name&#34;&gt;SpringBoot&lt;/span&gt;的starter控制&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;groupId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;boot&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;starter&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;jetty&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;artifactId&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;dependency&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;重新启动程序后，发现服务器相关信息以变为 jetty&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117213752.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内置服务器&lt;/p&gt;
&lt;p&gt;tomcat (默认)   apache 出品，粉丝多，应用面广，负载了若干较重的组件&lt;/p&gt;
&lt;p&gt;jetty     			 更轻量级，负载性能远不及 tomcat&lt;/p&gt;
&lt;p&gt;undertow  	  undertow，负载性能勉强跑赢 tomcat&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-15-Filter&amp;Listener/</guid>
            <title>JavaWEB之sl&amp;jstl</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-15-Filter&amp;Listener/</link>
            <category>Java JavaWEB</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;今日内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#今日内容&#34;&gt;#&lt;/a&gt; 今日内容&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. Filter：过滤器
2. Listner: 监听器
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;filter-过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filter-过滤器&#34;&gt;#&lt;/a&gt; Filter: 过滤器&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;1. 概念：
    * 生活中的过滤器： 净水器，土匪
    * web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能
    * 过滤器的作用：
        * 一般用于完成通用的操作。如：登陆验证、统一编码处理，敏感字符过滤

2. 快速入门
    1. 步骤：
        1. 定义一个类，实现接口Filter
        2. 复写方法
        3. 设置拦截路径
            1. web.xml
            2. 注解
    2. 代码：
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;WebFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 过滤器块石 == 快速入门&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//@WebFilter (&#34;/*&#34;)  // 访问所有资源都会执行该过滤器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FilterDemo1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Filter&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FilterConfig&lt;/span&gt; filterConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletRequest&lt;/span&gt; servletRequest&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletResponse&lt;/span&gt; servletResponse&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FilterChain&lt;/span&gt; filterChain&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;过滤器FilterDemo1被执行了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 放行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        filterChain&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;servletRequest&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;servletResponse&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;3. 过滤器细节：
    1. web.xml的配置
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;filter-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;demo1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;filter-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;filter-class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;cn.itcast.web.filter.FilterDemo1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;filter-class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;filter-mapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;filter-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;demo1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;filter-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 拦截路径 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;url-pattern&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;/*&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;url-pattern&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;filter-mapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;    2. 过滤器执行过程
        1. 执行过滤器
        2. 执行放行后的资源
        3. 回来执行过滤器放行代码下边的代码
    3. 过滤器的生命周期方法
        1. init: 在服务器启动后，会创建Filter对象，然后调用init方法，只执行一次。
        2. doFilter: 每一次请求被拦截资源时会执行。可以执行多次。
        3. destroy: 在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。
    4. 过滤器配置详解
        * 拦截路径设置：
            * 具体资源路径： /index.jsp  只有访问index.jsp资源时，过滤器才会被执行。
            * 拦截目录： /user/*  访问user目录下的所有资源都会执行过滤器
            * 后缀名拦截 *.jsp 访问所有后缀名为jsp的资源时会执行过滤器
            * 拦截所有资源：/*  访问所有资源时，都会执行过滤器。
        * 拦截方式配置：资源被访问的方式
            * 注解配置：
                * 设置dispatchTypes属性
                    1. REQUEST：默认值。浏览器直接请求资源
                    2. FORWARD：转发请求资源
                    3. INCLUDE: 包含访问资源
                    4. ERROR：错误跳转资源
                    5. ASYNC：异步访问资源

            * web.xml
                * 设置&amp;lt;dispatcher&amp;gt;&amp;lt;/dispatcher&amp;gt;标签即可

    5. 过滤器链（配置多个过滤器）
        * 执行顺序：如果有两个过滤器：过滤器1和过滤器2
            1. 过滤器1
            2. 过滤器2
            3. 资源执行
            4. 过滤器2
            5. 过滤器1
        * 过滤器先后顺序问题
            1. 注解配置：按照类名的字符串比较规则比较，较小的限制性
                * 如AFilter和BFilter,AFilter就先执行
            2. web.xml配置：&amp;lt;filter-mapping&amp;gt;谁定义在上边谁先执行。

4. 案例：
    1. 案例1_登陆验证
        * 需求：
            1. 访问day_17_case案例的资源。验证其是否登录
            2. 如果登陆了，则直接放行。
            3. 如果没有登录，则跳转到登陆页面，提示：“您好，您尚未登陆”。

    2. 案例2_敏感词汇过滤：
        * 分析：
            1. 对request对象进行增强。增强获取参数相关方法
            2. 放行。传递代理对象
                * 概念:
                    1. 真实对象：被代理的对象
                    2. 代理对象：
                    3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的
                * 实现方式：
                    1. 静态代理：有一个类文件 描述代理模式。
                    2. 动态模式：在内存中形成代理类
                        * 实现步骤：
                            1. 代理对象和真实对象实现相同的接口
                            2. 代理对象 = Proxy.newProxyInstance();
                            3. 使用代理对象调用方法
                            4. 增强方法
                        * 增强方式:
                            1. 增强参数列表
                            2. 增强返回值类型
                            3. 增强方法体执行逻辑
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;WebFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FileReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InvocationHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 敏感词汇过滤器&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@WebFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/*&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SensitiveWordsFilter&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Filter&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletRequest&lt;/span&gt; req&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletResponse&lt;/span&gt; resp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FilterChain&lt;/span&gt; chain&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//1. 创建代理对象，增强 getParameter 方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ServletRequest&lt;/span&gt; proxy_req &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;req&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getClassLoader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; req&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInterfaces&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InvocationHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; proxy&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Method&lt;/span&gt; method&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 增强 getParameter 方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 判断是否是 getParameter 方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;getParameter&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 增强返回值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 获取返回值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; method&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;req&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replaceAll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;***&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;  value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 判断方法名是否是 getParameterMap&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 判断方法名是否是 getParameterValue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; method&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;req&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//2. 放行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        chain&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;proxy_req&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; resp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 敏感词汇集合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FilterConfig&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;//1. 获取文件真实路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;ServletContext&lt;/span&gt; servletContext &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getServletContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; realPath &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; servletContext&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRealPath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/WEB-INF/classes/敏感词汇.txt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;//2. 读取文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt; br &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;realPath&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;//3. 将文件的每一行数据添加到 list 中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; br&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            br&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;listener-监听器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#listener-监听器&#34;&gt;#&lt;/a&gt; Listener: 监听器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;* 监听器：web的三大组件之一。
    * 事件监听机制
        * 事件： 一件事情
        * 事件源：事件发生的地方
        * 监听器： 一个对象
        * 注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码
* ServletContextListener: 监听ServletContext对象的创建和销毁
    * 方法：
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;contextDestroyed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletContextEvent&lt;/span&gt; sce&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//ServletContext 对象被销毁之前会调用该方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;contextInitialized&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletContextEvent&lt;/span&gt; sce&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//ServletContext 对象创建后会调用该方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;    * 步骤：
        1. 定义一个类，实现ServletContextListener接口
        2. 复写方法
        3. 配置
            1. web.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;listener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     		&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;listener-class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              cn.itcast.web.listener.ContextLoaderListener&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;listener-class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;listener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;            2. 注解
                * @WebListener
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-sl&amp;jstl/</guid>
            <title>javaweb之sl&amp;jstl</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-sl&amp;jstl/</link>
            <category>Java JavaWEB</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;今日内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#今日内容&#34;&gt;#&lt;/a&gt; 今日内容&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;1. JSP:
    1. 指令
    2. 注释
    3. 内置对象
2. MVC开发模式
3. EL表达式
4. JSTL标签
5. 三层架构
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;jsp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsp&#34;&gt;#&lt;/a&gt; JSP:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 指令
    * 作用：用于配置JSP页面，导入资源文件
    * 格式：&amp;lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2...%&amp;gt;
    * 分类：
        1. page：配置JSP页面的
            * contentType:等同于response.setContentType()
                1. 设置响应体的mime类型及字符级
                2. 设置当前JSP页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）
            * import: 导包
            * errorPage: 当前页面发生异常后，会自动跳转到指定的错误页面
            * isErrorPage；标识当前页面是否是错误页面
                * true:是，可以使用内置对象exception
                * false: 否。默认值。不可以使用内置对象exception
        2. include:页面包含的。导入页面的资源文件
            * &amp;lt;%@include file=&amp;quot;top.jsp&amp;quot;%&amp;gt;
        3. taglib:导入资源
          * &amp;lt;%@ taglib prefix=&amp;quot;c&amp;quot; uri=&amp;quot;http://java.sun.com/jsp/jstl/core&amp;quot;%&amp;gt;
              * prefix：前缀，自定义的
2. 注释
    1. html注释
        &amp;lt;!----&amp;gt;只能注释html代码片段
    2. jsp注释：推荐使用
    &amp;lt;%----%&amp;gt;可以注释所有
3. 内置对象
    * 在jsp页面中不需要创建，直接使用的对象
    * 一共有9个：
              变量名                      真实类型
          * pageContext                  PageContext
          * request                      HttpServletRequest
          * session                      HttpSession
          * application                  ServletContext
          * page                         OPbject
          * response                     HttpServletResponse
          * out                          JspWriter
          * config                       ServletConfig
          * exception                    Throwable
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;开发模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发模式&#34;&gt;#&lt;/a&gt; 开发模式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. jsp演变历史
    1. 早期只有servlet,只能使用response输出标签数据，非常麻烦
    2. 后来又有JSP,简化了Servlet的开发，如果过度使用了jsp，在jsp中既写大量的java代码，又写html表，造成难于维护，难以分工协作
    3. 再后来，java的web开发，借鉴MVC开发模式，使得程序的设计更加合理
2. MVC
    1. M:Model,模型。JavaBean
        * 完成具体的业务操作，如：查询数据库，封装对象
    2. V: View，视图。JSP
    3. C: Controller,控制器。Servlet
        * 获取用户的输入
        * 调用模型
        * 将数据交给视图展示
    * 优缺点：
        1. 优点：
            1. 耦合性低，方便维护，利于分工协作
            2. 重用性高
        2. 缺点
            1. 使得项目架构变得复杂，对开发人员要求高
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;el表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#el表达式&#34;&gt;#&lt;/a&gt; EL 表达式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 概念：Expression Language  表达式语言
2. 作用： 替换和简化jsp页面中java语言代码的编写
3. 语法：$&amp;#123;表达式&amp;#125;
4. 注意：
    * jsp默认支持el表达式。如果要忽略el表达式
        1. 设置jsp中page指令中:isElIgnored = &amp;quot;true&amp;quot; 忽略当前jsp页面中所有的el表达式
        2. \$&amp;#123;表达式&amp;#125;： 忽略当前这个el表达式
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-Cookie&amp;Session/</guid>
            <title>javaweb之Cookie&amp;Session</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-Cookie&amp;Session/</link>
            <category>Java JavaWEB</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;今日内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#今日内容&#34;&gt;#&lt;/a&gt; 今日内容&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;会话技术
&lt;ol&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;li&gt;Session&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JSP: 入门学习&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;会话技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#会话技术&#34;&gt;#&lt;/a&gt; 会话技术&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;会话：一次会话中包含多次请求和响应
&lt;ul&gt;
&lt;li&gt;一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能：在一次会话的范围内的多次请求间共享数据&lt;/li&gt;
&lt;li&gt;方式：
&lt;ol&gt;
&lt;li&gt;客户端会话技术: Cookie&lt;/li&gt;
&lt;li&gt;服务器端会话技术：Session&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; Cookie:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念：客户端会话技术，将数据保存到客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速入门：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用步骤：
&lt;ol&gt;
&lt;li&gt;创建 Cookie 对象，绑定数据
&lt;ul&gt;
&lt;li&gt;new Cookie(String name,String value)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;发送 Cookie 对象，绑定数据
&lt;ul&gt;
&lt;li&gt;response.addCookie(Cookie cookie)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;获取 Cookie, 拿到数据
&lt;ul&gt;
&lt;li&gt;Cookie[] cookies = request.getCookies();&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于响应头 set-cookie 和请求头 cookie 实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cookie 的细节&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一次可不可以发送多个 cookie?
&lt;ul&gt;
&lt;li&gt;可以&lt;/li&gt;
&lt;li&gt;可以创建多个 COokie 对象，使用 response 调用多次方法发送 cookie 即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cookie 在 cookie 中保持多长时间？
&lt;ul&gt;
&lt;li&gt;默认情况下，当浏览器关闭后，cookie 数据被销毁&lt;/li&gt;
&lt;li&gt;持久化储存&lt;/li&gt;
&lt;li&gt;setMaxAge(int seconds)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;正数：将 Cookie 数据写到硬盘中，持久化储存。并指定 cookie 存活时间，时间到后，cookie 文件自动失效。&lt;/li&gt;
&lt;li&gt;负数，默认值&lt;br /&gt;
 3. 删除 cookie 值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;cookie 能不能存中文？
&lt;ul&gt;
&lt;li&gt;tomcat 8 之前 cookie 不能直接存中文
&lt;ul&gt;
&lt;li&gt;需要将中文数据转码 --- 一般采用 URL 编码（% E3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 tomcat 8 之后，cookie 支持中文数据，特殊字符还是不支持，如空格，建议还是使用 URL 编码转储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cookie 共享问题：
&lt;ol&gt;
&lt;li&gt;假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享？&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下 cookie 不能共享&lt;/li&gt;
&lt;li&gt;setPath (String path): 设置 cookie 的获取范围。默认情况下，设置当前虚拟目录&lt;/li&gt;
&lt;li&gt;如果要共享，则可以将 path 设置为 &amp;quot;/&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;不同的 tomcat 服务器间 cookie 共享问题？
&lt;ul&gt;
&lt;li&gt;setDomain (String path): 如果设置一级域名相同，那么多个服务器之间 cookie 可以共享&lt;/li&gt;
&lt;li&gt;setDomain (&amp;quot;.baidu.com&amp;quot;), 那么 tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;5. Cookie的特点和使用
  1. cookie储存数据在客户端浏览器
  2. 浏览器对于单个cookie的=大小有限制（4kb)以及对同一个域名下的总cokie数量也有限制（20个）
  * 作用
    1. cookie一般用于存储少量的不太敏感的数据
    2. 在不登录的情况下，完成服务器对客户端的身份识别

6. 案例：记住上一次访问时间
  1. 需求：
    1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问
    2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串。
  2. 分析：
    1. 可以采用cokie来完成
    2. 在服务器中的servlet判断是否有一个明为lastTime的cookie
      1. 有：不是第一次访问
        1. 响应数据：1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20
			    2. 写回Cookie：lastTime=2018年6月10日11:50:01
		    2. 没有：是第一次访问
			    1. 响应数据：您好，欢迎您首次访问
			    2. 写回Cookie：lastTime=2018年6月10日11:50:01

    3. 代码实现：
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;WebServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@WebServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/cookieTest&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CookieTest&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doPost&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 设置响应的消息体的数据格式及编码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setContentType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;text/html;charset=utf-8&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 没有 cookie 为 lastTime&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//1. 获取所有 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; cookies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getCookies&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 遍历 cookie 数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cookies&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Cookie&lt;/span&gt; c&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;cookies&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 获取 cookie 的名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//                String value = c.getValue();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;//4. 判断名称是不是 lastTime&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;lastTime&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 有该 cookie，不是第一次访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 设置 cookie 的 value&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 获取当前时间，重新设置 cookie，重新发送 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt; date &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt; sdf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;yyyy年MM月dd日HH:mm:ss&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; str_date &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str_date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 设置 cookie 存活时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setMaxAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 设置为 1 个月&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addCookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 重新发送 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 响应数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 获取 cookie 的 value 时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getWriter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;h1&gt;欢迎回来，您上次访问时间为：&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;/h1&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cookies&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;flag&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 没有，第一次访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt; date &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt; sdf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;yyyy年MM月dd日HH:mm:ss&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; str_date &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Cookie&lt;/span&gt; cookie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;lastTime&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;str_date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 设置 cookie 存活时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            cookie&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setMaxAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 设置为 1 个月&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addCookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cookie&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 重新发送 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getWriter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;h1&gt;您好，欢迎首次访问&amp;lt;/h1&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;doPost&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;jsp-入门学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsp-入门学习&#34;&gt;#&lt;/a&gt; JSP: 入门学习&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;概念：&lt;br /&gt;
* Java serve Pages: java 服务器端页面
&lt;ul&gt;
&lt;li&gt;了可以理解为：一个特殊的页面，其中既可以指定定义 html 标签，又可以定义 java 代码&lt;/li&gt;
&lt;li&gt;用于简化书写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原理：&lt;br /&gt;
* jsp 本质上就是一个 Servlet&lt;/li&gt;
&lt;li&gt;jsp 的脚本：JSP 定义 java 代码的格式：&lt;br /&gt;
1. &amp;lt;% 代码 %&amp;gt;：定义 java 的代码，在 service 方法中可以定义什么，该脚本中就可以定义什么。&lt;br /&gt;
2. &amp;lt;%! 代码 %&amp;gt; 定义的 java 代码，在 jsp 转化后的 java 类的成员位置。&lt;br /&gt;
3. &amp;lt;%= 代码 %&amp;gt;：定义的 java 代码，会输出到页面上。输出语句可以定义什么，该脚本中就可以定义什么&lt;/li&gt;
&lt;li&gt;JSP 的内置对象：&lt;br /&gt;
* 在 jsp 对象中不需要获取和创建，可以直接使用的对象&lt;br /&gt;
 * JSP 中一共有 9 个内置对象&lt;br /&gt;
 * 先学 3 个：
&lt;ul&gt;
&lt;li&gt;request&lt;/li&gt;
&lt;li&gt;response&lt;/li&gt;
&lt;li&gt;out：字符输出流对象。可以将数据输出到页面上。和 response.getWriter () 类似
&lt;ul&gt;
&lt;li&gt;response.getWriter () 和 out.write () 的区别
&lt;ul&gt;
&lt;li&gt;在 tomcat 服务器真正给客户端做出响应前，会先找到 response 缓冲区数据，再找 out 缓冲区。&lt;/li&gt;
&lt;li&gt;response.getWriter () 数据输出永远在 out.write () 之前，与代码位置没有关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;session-主菜&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session-主菜&#34;&gt;#&lt;/a&gt; Session: 主菜&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession&lt;/li&gt;
&lt;li&gt;快速入门：&lt;br /&gt;
1. 获取 HttpSession 对象：&lt;br /&gt;
HttpSession session = request.getSession();&lt;br /&gt;
2. 使用 HttpSession 对象：&lt;br /&gt;
Object getAttribute(String name);&lt;br /&gt;
void setAttribute(String name,Object value);&lt;br /&gt;
void removeAttribute(String name)&lt;br /&gt;
 3. 原理
&lt;ul&gt;
&lt;li&gt;Session 的实现是依赖于 Cookie 的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;4. 细节：
  1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？
    * 默认情况下，不是
    * 如果需要相同，则可以创建COokie，键为JESSIONID,设置最大存活时间，让cookie持久化保存。
      Cookie c = new Cookie(&amp;quot;JESSIONID&amp;quot;,session.getID());
      c.setMaxAge(60*60);
      response.addCookie(c);
  2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？
    * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作：
      * session的钝化：
        * 在服务器正常关闭之前，将session对象系列硬化到硬盘上，
      * session的活化：
        * 在服务器启动后，将session文件转化为内存中的session对象即可。
  3. session什么时候被销毁
    1. 服务器关闭
    2. session对象调用invalidate()。
    3. session默认失效时间30分钟
      选择性配置修改
      &amp;lt;session-config&amp;gt;
        &amp;lt;session-timeout&amp;gt;30&amp;lt;/session-timeout&amp;gt;
      &amp;lt;/session-config&amp;gt;
5. session的特点
  1. session用于存储一次会话的多次请求的数据，存在服务器端
  2. session可以存储任意数据类型，任意大小的数据

  * session与Cookie的区别：
    1. session存储数据在服务器端，Cookie在客户端
    2. session没有数据大小限制。，cookie有
    3. session数据安全，Cookie相对于不安全
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-11-Servlet&amp;HTTP&amp;Resuest/</guid>
            <title>JavaWEB之Servlet&amp;HTTP&amp;Request</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-11-Servlet&amp;HTTP&amp;Resuest/</link>
            <category>Java JavaWEB</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;servlet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servlet&#34;&gt;#&lt;/a&gt; Servlet&lt;/h1&gt;
&lt;h2 id=&#34;1概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1概念&#34;&gt;#&lt;/a&gt; 1. 概念&lt;/h2&gt;
&lt;p&gt;Servlet（Server Applet）是 Java Servlet 的简称，称为小服务程序或服务连接器。&lt;/p&gt;
&lt;p&gt;狭义的 Servlet 是指 Java 语言实现的一个接口，&lt;br /&gt;
广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。&lt;/p&gt;
&lt;h2 id=&#34;2步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2步骤&#34;&gt;#&lt;/a&gt; 2. 步骤&lt;/h2&gt;
&lt;h2 id=&#34;3执行原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3执行原理&#34;&gt;#&lt;/a&gt; 3. 执行原理&lt;/h2&gt;
&lt;p&gt;当服务器接收到浏览器客户的请求之后，会解析请求的 URL 路径，获取访问的 servlet 的资源路径，找到项目，查找 web.xml 文件，是否有对应的标签体内容，如果有，则找到对应的标签内的全类名，tomcat 会将字节码文件加载进内存，并且创建其对象，调用其方法。&lt;/p&gt;
&lt;h2 id=&#34;4生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4生命周期&#34;&gt;#&lt;/a&gt; 4. 生命周期&lt;/h2&gt;
&lt;h3 id=&#34;被创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#被创建&#34;&gt;#&lt;/a&gt; 被创建：&lt;/h3&gt;
&lt;p&gt;执行 servlet 的 init () 方法 ， 只执行一次，说明 servlet 在内存中是单例的（多用户同时访问，可能存在线程安全问题，尽量不要在 servlet 中定义成员变量，即使定义了成员变量，也不要对其修改值），默认情况下，第一次被访问时被创建（可配置 servlet 的创建时期：值为负整数，第一次被访问时创建 / 值为 0 或者为正整数，则在服务器启动时创建&lt;/p&gt;
&lt;h3 id=&#34;提供服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提供服务&#34;&gt;#&lt;/a&gt; 提供服务：&lt;/h3&gt;
&lt;p&gt;执行 service（）方法，每次访问 servlet 时，service（）方法都会被调用一次。&lt;/p&gt;
&lt;h3 id=&#34;被销毁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#被销毁&#34;&gt;#&lt;/a&gt; 被销毁：&lt;/h3&gt;
&lt;p&gt;destory（）方法在 servlet 被销毁之前只执行一次，用于释放资源。服务器关闭时，servlet 被销毁。只有服服务器正常关闭时，才会执行 destory () 方法。&lt;/p&gt;
&lt;h2 id=&#34;5servlet30注解配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5servlet30注解配置&#34;&gt;#&lt;/a&gt; 5.Servlet3.0 注解配置&lt;/h2&gt;
&lt;h3 id=&#34;什么是servlet30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是servlet30&#34;&gt;#&lt;/a&gt; 什么是 Servlet3.0&lt;/h3&gt;
&lt;p&gt;Servlet3.0 是 Java EE6 规范的一部分，Servlet3.0 提供了注解 (annotation)，使得不再需要在 web.xml 文件中进行 Servlet 的部署描述，简化开发流程。&lt;/p&gt;
&lt;h3 id=&#34;开发servlet30程序的所需要的环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发servlet30程序的所需要的环境&#34;&gt;#&lt;/a&gt; 开发 Servlet3.0 程序的所需要的环境&lt;/h3&gt;
&lt;p&gt;开发 Servlet3.0 的程序需要一定的环境支持。MyEclipse10 和 Tomcat7 都提供了对 Java EE6 规范的支持。Tomcat 需要 Tomcat7 才支持 Java EE6，Tomcat7 需要使用 JDK1.6 以上的版本。&lt;br /&gt;
详细内容 (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGRwLWdhY2wvcC80MjIyOTAyLmh0bWw=&#34;&gt;https://www.cnblogs.com/xdp-gacl/p/4222902.html&lt;/span&gt;)&lt;/p&gt;
&lt;h2 id=&#34;6servlet的体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6servlet的体系结构&#34;&gt;#&lt;/a&gt; 6.Servlet 的体系结构&lt;/h2&gt;
&lt;p&gt;Servlet -- 接口&lt;br /&gt;
 |&lt;br /&gt;
GenericServlet -- 抽象类&lt;br /&gt;
 |&lt;br /&gt;
HttpServlet -- 抽象类&lt;/p&gt;
&lt;h3 id=&#34;genericservlet将servlet接口中其他的方法做了默认空实现只将service方法作为抽象将来定义servlet类时可以继承genericservlet实现service方法即可&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#genericservlet将servlet接口中其他的方法做了默认空实现只将service方法作为抽象将来定义servlet类时可以继承genericservlet实现service方法即可&#34;&gt;#&lt;/a&gt; GenericServlet：将 Servlet 接口中其他的方法做了默认空实现，只将 service () 方法作为抽象，将来定义 Servlet 类时，可以继承 GenericServlet，实现 service () 方法即可&lt;/h3&gt;
&lt;h3 id=&#34;httpservlet对http协议的一种封装简化操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#httpservlet对http协议的一种封装简化操作&#34;&gt;#&lt;/a&gt; HttpServlet：对 http 协议的一种封装，简化操作&lt;/h3&gt;
&lt;h4 id=&#34;定义类继承httpservlet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义类继承httpservlet&#34;&gt;#&lt;/a&gt; 定义类继承 HttpServlet&lt;/h4&gt;
&lt;h4 id=&#34;复写dogetdopost方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复写dogetdopost方法&#34;&gt;#&lt;/a&gt; 复写 doGet/doPost 方法&lt;/h4&gt;
&lt;h1 id=&#34;http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http&#34;&gt;#&lt;/a&gt; HTTP&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;Hyper Text Transfer Protocol 超文本传输协议&lt;/p&gt;
&lt;h3 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于 TCP/IP 的高级协议&lt;/li&gt;
&lt;li&gt;默认端口号：80&lt;/li&gt;
&lt;li&gt;基于请求 / 响应模型的：一次请求对应一次响应&lt;/li&gt;
&lt;li&gt;无状态的：每次请求之间相互独立，不能交互数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本&#34;&gt;#&lt;/a&gt; 版本&lt;/h3&gt;
&lt;p&gt;1.0 版本：每一次连接都会建立新的连接&lt;br /&gt;
 1.1 版本：复用链接&lt;/p&gt;
&lt;h2 id=&#34;请求消息数据格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求消息数据格式&#34;&gt;#&lt;/a&gt; 请求消息数据格式&lt;/h2&gt;
&lt;h3 id=&#34;1请求行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1请求行&#34;&gt;#&lt;/a&gt; 1. 请求行&lt;/h3&gt;
&lt;p&gt;请求方式  请求 url      请求协议 / 版本&lt;br /&gt;
 GET      /login.html  HTTP/1.1&lt;/p&gt;
&lt;h4 id=&#34;http协议有7种请求方式常用的有2种&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http协议有7种请求方式常用的有2种&#34;&gt;#&lt;/a&gt; HTTP 协议有 7 种请求方式，常用的有 2 种&lt;/h4&gt;
&lt;h5 id=&#34;get&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get&#34;&gt;#&lt;/a&gt; GET:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;请求参数在请求行中，在 url 后&lt;/li&gt;
&lt;li&gt;请求的 url 长度有限制&lt;/li&gt;
&lt;li&gt;不太安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#post&#34;&gt;#&lt;/a&gt; POST：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;请求参数在请求体中&lt;/li&gt;
&lt;li&gt;请求的 url 长度没有限制&lt;/li&gt;
&lt;li&gt;相对安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2请求头-客户端告诉服务器一些信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2请求头-客户端告诉服务器一些信息&#34;&gt;#&lt;/a&gt; 2. 请求头：客户端告诉服务器一些信息&lt;/h3&gt;
&lt;p&gt;请求头名称：请求头值&lt;/p&gt;
&lt;h4 id=&#34;常见的请求头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的请求头&#34;&gt;#&lt;/a&gt; 常见的请求头&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;user-agent: 浏览器告诉服务器，我访问你使用的浏览器版本信息。可以在服务器端获取该头的信息，解决浏览器的兼容性问题&lt;/li&gt;
&lt;li&gt;Referer: ：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdC9sb2dpbi5odG1s&#34;&gt;http://localhost/login.html&lt;/span&gt;&lt;br /&gt;
 告诉服务器，我 (当前请求) 从哪里来？&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;WebServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token annotation punctuation&#34;&gt;@WebServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/requestDemo3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RequestDemo3&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doPost&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token comment&#34;&gt;// 获取请求头数据：user-agent&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; agent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user-agent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token comment&#34;&gt;// 判断 agent 的浏览器版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;agent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Chrome&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token comment&#34;&gt;// 谷歌&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;谷歌.....&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;agent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Firefox&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;火狐来了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用：&lt;/h5&gt;
&lt;h6 id=&#34;防盗链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防盗链&#34;&gt;#&lt;/a&gt; 防盗链：&lt;/h6&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;WebServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token annotation punctuation&#34;&gt;@WebServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/requestDemo4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RequestDemo4&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doPost&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token comment&#34;&gt;// 演示获取请求头数据:reference&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; refer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;referer&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;refer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token comment&#34;&gt;// 防盗链&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;refer&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;refer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/day14_servlet_http_request_war_exploded&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//                System.out.println (&#34;播放电影&#34;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getWriter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;播放电影&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token comment&#34;&gt;// 盗链&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//                System.out.println (&#34;想看电影吗&#34;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setContentType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;text/html;charset=utf-8&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getWriter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;想看电影吗&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;统计工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统计工作&#34;&gt;#&lt;/a&gt; 统计工作：&lt;/h6&gt;
&lt;h3 id=&#34;3请求空行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3请求空行&#34;&gt;#&lt;/a&gt; 3. 请求空行&lt;/h3&gt;
&lt;p&gt;空行，就是用于分割 POST 请求头和请求体的&lt;/p&gt;
&lt;h3 id=&#34;4请求体正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4请求体正文&#34;&gt;#&lt;/a&gt; 4. 请求体 (正文)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;封装 POST 请求消息的请求参数&lt;/li&gt;
&lt;li&gt;字符串格式：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;POST /login.html HTTP/1.1
Host: localhost
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101
Firefox/60.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Referer: http://localhost/login.html
Connection: keep-alive
Upgrade-Insecure-Requests: 1
username=zhangsan
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;request&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#request&#34;&gt;#&lt;/a&gt; Request&lt;/h1&gt;
&lt;h2 id=&#34;1request对象和response对象的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1request对象和response对象的原理&#34;&gt;#&lt;/a&gt; 1.request 对象和 response 对象的原理&lt;/h2&gt;
&lt;h3 id=&#34;1request和response对象是由服务器创建的我们来使用它&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1request和response对象是由服务器创建的我们来使用它&#34;&gt;#&lt;/a&gt; 1.request 和 response 对象是由服务器创建的，我们来使用它。&lt;/h3&gt;
&lt;h3 id=&#34;2request对象是来获取请求消息response对象是来设置响应信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2request对象是来获取请求消息response对象是来设置响应信息&#34;&gt;#&lt;/a&gt; 2.request 对象是来获取请求消息，response 对象是来设置响应信息&lt;/h3&gt;
&lt;h2 id=&#34;2request对象继承体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2request对象继承体系结构&#34;&gt;#&lt;/a&gt; 2.request 对象继承体系结构&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ServletRequest -- 接口
	| 继承
HttpServletRequest -- 接口
	| 实现
org.apache.catalina.connector.RequestFacade 类(tomcat)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3request功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3request功能&#34;&gt;#&lt;/a&gt; 3.request 功能&lt;/h2&gt;
&lt;h3 id=&#34;1获取请求消息数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1获取请求消息数据&#34;&gt;#&lt;/a&gt; 1 获取请求消息数据&lt;/h3&gt;
&lt;h4 id=&#34;1获取请求行数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1获取请求行数据&#34;&gt;#&lt;/a&gt; 1. 获取请求行数据&lt;/h4&gt;
&lt;h5 id=&#34;get-day14demo1namezhangsan-http11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get-day14demo1namezhangsan-http11&#34;&gt;#&lt;/a&gt; GET /day14/demo1?name=zhangsan HTTP/1.1&lt;/h5&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获取请求方式 ：GET&lt;br /&gt;
String getMethod()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取虚拟目录：/day14&lt;/p&gt;
&lt;p&gt;String getContextPath()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 Servlet 路径: /demo1&lt;br /&gt;
String getServletPath()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 get 方式请求参数：name=zhangsan&lt;br /&gt;
String getQueryString()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取请求 URI：/day14/demo1&lt;br /&gt;
String getRequestURI(): /day14/demo1&lt;br /&gt;
StringBuffer getRequestURL() :&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==&#34;&gt;http://localhost/day14/demo1&lt;/span&gt;&lt;br /&gt;
URL: 统一资源定位符 ： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==&#34;&gt;http://localhost/day14/demo1&lt;/span&gt; 中华人民共和国&lt;br /&gt;
 URI：统一资源标识符 : /day14/demo1 共和国&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取协议及版本：HTTP/1.1&lt;br /&gt;
String getProtocol()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取客户机的 IP 地址：&lt;br /&gt;
String getRemoteAddr()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         * GET&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         * /day14_servlet_http_request_war_exploded&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         * /requestDemo1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         * null&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         * /day14_servlet_http_request_war_exploded/requestDemo1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         * HTTP/1.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         * 0:0:0:0:0:0:0:1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//1. 获取请求方式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; method &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//2. 获取虚拟路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; contextPath &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getContextPath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;contextPath&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//3. 获取 servlet 路径：/demo1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; servletPath &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getServletPath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;servletPath&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//4. 获取 get 方式请求参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; queryString &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getQueryString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;queryString&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//5. 获取请求 URI&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; requestURI &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRequestURI&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;requestURI&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//6. 获取协议及版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; protocol &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProtocol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;protocol&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//7. 获取客户机的 ip 地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; remoteAddr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRemoteAddr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;remoteAddr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;2获取请求头数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2获取请求头数据&#34;&gt;#&lt;/a&gt; 2. 获取请求头数据&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;方法：
* String getHeader(String name):通过请求头的名称获取请求头的值
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enumeration&amp;lt;String&amp;gt; getHeaderNames (): 获取所有的请求头名称&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 演示获取请求头数据:reference&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; refer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;referer&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;refer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 演示获取请求头数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//1. 获取所有请求头名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Enumeration&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; headerNames &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getHeaderNames&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;headerNames&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasMoreElements&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; headerNames&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;------&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;3获取请求体数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3获取请求体数据&#34;&gt;#&lt;/a&gt; 3. 获取请求体数据:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;请求体：只有 POST 请求方式才有请求体，在请求体中封装了 POST 请求的请求参数&lt;/li&gt;
&lt;li&gt;步骤：
&lt;ol&gt;
&lt;li&gt;获取流对象
&lt;ul&gt;
&lt;li&gt;BufferedReader getReader ()：获取字符输入流，只能操作字符数据&lt;/li&gt;
&lt;li&gt;ServletInputStream getInputStream ()：获取字节输入流，可以操作所有类型数据案例：用户登录&lt;/li&gt;
&lt;li&gt;在文件上传知识点后讲解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再从流对象中拿数据&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其它功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其它功能&#34;&gt;#&lt;/a&gt; 其它功能&lt;/h2&gt;
&lt;h3 id=&#34;1-获取请求参数通用方式不论get还是post请求方式都可以使用下列方法来获取请求参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-获取请求参数通用方式不论get还是post请求方式都可以使用下列方法来获取请求参数&#34;&gt;#&lt;/a&gt; 1. 获取请求参数通用方式：不论 get 还是 post 请求方式都可以使用下列方法来获取请求参数&lt;/h3&gt;
&lt;h4 id=&#34;1-string-getparameterstring-name根据参数名称获取参数值-usernamezspassword123&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-string-getparameterstring-name根据参数名称获取参数值-usernamezspassword123&#34;&gt;#&lt;/a&gt; 1. String getParameter (String name): 根据参数名称获取参数值 username=zs&amp;amp;password=123&lt;/h4&gt;
&lt;h4 id=&#34;2-string-getparametervaluesstring-name根据参数名称获取参数值的数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-string-getparametervaluesstring-name根据参数名称获取参数值的数组&#34;&gt;#&lt;/a&gt; 2. String [] getParameterValues (String name): 根据参数名称获取参数值的数组&lt;/h4&gt;
&lt;p&gt;hobby=xx&amp;amp;hobby=game&lt;/p&gt;
&lt;h4 id=&#34;3-enumerationstring-getparameternames获取所有请求的参数名称&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-enumerationstring-getparameternames获取所有请求的参数名称&#34;&gt;#&lt;/a&gt; 3. Enumeration&amp;lt;String&amp;gt; getParameterNames (): 获取所有请求的参数名称&lt;/h4&gt;
&lt;h4 id=&#34;4-mapstringstring-getparametermap获取所有参数的map集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-mapstringstring-getparametermap获取所有参数的map集合&#34;&gt;#&lt;/a&gt; 4. Map&amp;lt;String,String []&amp;gt; getParameterMap (): 获取所有参数的 map 集合&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;中文乱码问题：&lt;/li&gt;
&lt;li&gt;get 方式：tomcat 8 已经将 get 方式乱码问题解决了&lt;/li&gt;
&lt;li&gt;post 方式：会乱码&lt;/li&gt;
&lt;li&gt;解决：在获取参数前，设置 request 的编码 request.setCharacterEncoding (&amp;quot;utf-8&amp;quot;);&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itcast&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;WebServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;javax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;servlet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;http&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Enumeration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@WebServlet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/requestDemo6&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RequestDemo6&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doPost&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 获取参数通用方式：不论是 get 方式还是 Post 方式都可以使用下列方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//post 获取请求参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//post 请求中文乱码问题&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//1. 设置流的编码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setCharacterEncoding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;utf-8&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 根据参数名获取参数值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;username&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        System.out.println(&#34;post&#34;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        System.out.println(username);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 根据参数名获取参数值的数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; hobbies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameterValues&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hobby&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        for (String hobby:hobbies&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//             ) &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//            System.out.println(hobby);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Enumeration&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; parameterNames &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameterNames&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        while(parameterNames.hasMoreElements())&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//            String name = parameterNames.nextElement();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//            System.out.println(name);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//            String value = request.getParameter(name);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//            System.out.println(value);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//            System.out.println(&#34;------------------------------&#34;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 获取所有参数 map 集合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; parameterMap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameterMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 遍历&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; keySets &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; parameterMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keySet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;keySets&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;             &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; values &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; parameterMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;values&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                 &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;---------------------&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//get 获取请求参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        String username = request.getParameter(&#34;username&#34;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        System.out.println(&#34;get&#34;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        System.out.println(username);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;doPost&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2-请求转发一种在服务器内部的资源跳转方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-请求转发一种在服务器内部的资源跳转方式&#34;&gt;#&lt;/a&gt; 2. 请求转发：一种在服务器内部的资源跳转方式&lt;/h3&gt;
&lt;h4 id=&#34;1-步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-步骤&#34;&gt;#&lt;/a&gt; 1. 步骤：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过 request 对象获取请求转发器对象：RequestDispatcher&lt;br /&gt;
getRequestDispatcher(String path)&lt;/li&gt;
&lt;li&gt;使用 RequestDispatcher 对象来进行转发：forward (ServletRequest request,&lt;br /&gt;
ServletResponse response)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/requestDemo8&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;2特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2特点&#34;&gt;#&lt;/a&gt; 2. 特点：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;浏览器地址栏路径不发生变化&lt;/li&gt;
&lt;li&gt;只能转发到当前服务器内部资源中。&lt;/li&gt;
&lt;li&gt;转发是一次请求&lt;br /&gt;
 ###3. 共享数据：&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;域对象：一个有作用范围的对象，可以在范围内共享数据&lt;/li&gt;
&lt;li&gt;request 域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法&#34;&gt;#&lt;/a&gt; 方法：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;void setAttribute (String name,Object obj): 存储数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object getAttitude (String name): 通过键获取值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void removeAttribute (String name): 通过键移除键值对&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 ServletContext：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ServletContext getServletContext()&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;msg&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; msg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;msg&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaSE/2021-7-8-java%E6%A0%B8%E5%BF%83%E5%8D%B7%E4%B8%80%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/</guid>
            <title>java核心卷一第四章对象与类</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaSE/2021-7-8-java%E6%A0%B8%E5%BF%83%E5%8D%B7%E4%B8%80%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/</link>
            <category>Java JavaSE</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;##4.3&lt;br /&gt;
###4.3.1 Employee 类 （后续未说明都以 Employee 类为例）&lt;br /&gt;
文件名必须与 public 类的名字相匹配。在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类。&lt;br /&gt;
###4.3.2&lt;br /&gt;
 关键字 public 意味着任何类的任何方法都可以调用这些方法（共有四种访问级别，将在后续内容介绍）。&lt;br /&gt;
关键字 private 确保只有 Employ 类自身的方法能够访问这些实例字段，而其它类的方法不能够读写这些字段。&lt;/p&gt;
&lt;p&gt;###4.3.4 从构造器开始&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;构造器与类同名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造器可以有 0 个、1 个、或多个参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造器没有返回值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造器总是伴随着 new 操作一起调用&lt;br /&gt;
注意事项：请注意，不要在构造器中，定义与实例字段同名的局部变量。例如，下面的构造器将不会设置 salary。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Employee&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//ERROR&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; salary &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//ERROR&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个构造器声明了局部变量 name 和 salary。这些变量只能在构造器内部访问。这下变量会遮蔽（shadow）&lt;br /&gt;
同名的实例字段。有些程序员偶尔会不假思索地写出这类代码，这种错误很难检查出来，&lt;br /&gt;
必须注意在所有的方法中都不要使用与实例字段同名的变量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###4.3.5 用 var 声明局部变量&lt;br /&gt;
在 java10 中，如果可以从变量的初始值推导出他们的类型，那么可以用 var 关键字声明局部变量，而无需指定类型。&lt;br /&gt;
例如，可以不这样声明：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Employee&lt;/span&gt; harry &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Employee&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Harry hacker&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;50000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1989&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;只需要以下代码：
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; harry &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Employee&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Harry hacker&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;50000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1989&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;倘若无需了解任何Java API就能下从等好右边明显看出类型，在这种情况下我们都将使用var表示法。
不过我们不会对数字类型使用var,如int,long或者是double,使你不用当心0、0L和0.0之间的区别。
对Java API有了更多使用经验之后，你可能会希望更多地使用var关键字。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意 var 关键字只能用于方法中的局部变量。参数和字段的类型必须声明。&lt;/p&gt;
&lt;p&gt;###3.3.6 使用 null 引用&lt;br /&gt;
如果对 null 值使用了一个方法，会产生一个 NullPointerEcception 异常。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;LocalDate&lt;/span&gt; birthday &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; birthday&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//NullPointerException&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;这是一个很严重的错误，类似于“索引越界”异常。
如果你的程序没有捕获异常，程序就会终止。
对此有两种解决方法。“宽容型”方法是把null参数转化为一个适当的null值：
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;unknow&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 java9 中，Objects 类对此提供了一个便利方法：&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%BB%84%E4%BB%B6/</guid>
            <title>React的组件</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%BB%84%E4%BB%B6/</link>
            <category>前端 React</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;react的组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react的组件&#34;&gt;#&lt;/a&gt; React 的组件&lt;/h1&gt;
&lt;h2 id=&#34;组件的声明方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件的声明方式&#34;&gt;#&lt;/a&gt; 组件的声明方式&lt;/h2&gt;
&lt;p&gt;在 React 中创建组件的方式有 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES5 写法：React.createClass ()(老版本用法，不建议使用)&lt;/li&gt;
&lt;li&gt;ES6 写法：React.Component;&lt;/li&gt;
&lt;li&gt;无状态的函数式写法，又称为纯组件 SFC&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;es5写法reactcreateclass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es5写法reactcreateclass&#34;&gt;#&lt;/a&gt; ES5 写法：React.createClass ()&lt;/h3&gt;
&lt;p&gt;React.createClass () 方法创建一个组件类，它接受一个对象为参数，对象中必须声明一个 render () 方法，render () 方法将返回一个组件实例。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; input &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; React&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 定义传入 props 中的各种属性类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    propTypes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        initialValue&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;React&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;PropTypes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;string&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 组件默认的 props 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    defaultProps&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        initialValue&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 设置 initial state&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;getInitialState&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            text&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;initialValue&lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;placeholder&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;handleChange&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            text&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            	Type something&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;input onChange&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;handleChange&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;createClass () 本质上是一个工厂函数，传递给它的是一个・Object。通过 propTypes 对象和 getDefaultProps () 方法来设置 props 类型和获取 props。createClass（）方法会正确绑定 this 到 React 类的实例上。&lt;/p&gt;
&lt;h3 id=&#34;es6写法reactcomponent&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6写法reactcomponent&#34;&gt;#&lt;/a&gt; ES6 写法：React.Component&lt;/h3&gt;
&lt;p&gt;React.Component 是以 ES6 的形式来创建组件的这是 React 目前极为推荐的创建有效动态组件的方式。&lt;/p&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Input&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Reqact&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pprops&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 设置 initial state&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			 text&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;initialValue &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;placeholder&#39;&lt;/span&gt;       &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// ES6 中的函数必须手动绑定&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;handleChange &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;handleChange&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;handleChange&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            text&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            	Type something&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;input onChange&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;handleChange&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;React.Component 创建的组件，函数成员不会自动绑定 this，需要开发者手动绑定，否则 this 无法获取当前组件的实例对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其它绑定方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过箭头函数来绑定 this 示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用 arrow function 绑定&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div onClick&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;handleClick&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;在方法中直接用 bind (this) 来绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div onClick&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;handleClick&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;无状态组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无状态组件&#34;&gt;#&lt;/a&gt; 无状态组件&lt;/h3&gt;
&lt;p&gt;如果一个组件不需要管理 state，只是单纯展示，那么就可以定义成无状态组件。这种方式声明的组件可读性好，大大减少了代码量。无状态函数式组件可以搭配箭头函数来写，更简洁，它没有 React 的生命周期和内部 state。&lt;/p&gt;
&lt;p&gt;无状态函数式组件示例：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;HelloComponent&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;Hello &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ReactDom&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;HelloComponent name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;marlon&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;mountNode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;无状态函数式组件在需要生命周期时，可以搭配高阶组件 (HOC) 来实现。无状态组件组为高阶组建的参数，高阶组件内存存放需要的生命周期和状态，其它只负责展示的组件都使用无状态式的组件来写：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; React &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;react&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;composedComponent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;extends&lt;/span&gt; React&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Component &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;componentDidmount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ComponentDidmount&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ComposedComponent &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;组件的主要成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件的主要成员&#34;&gt;#&lt;/a&gt; 组件的主要成员&lt;/h2&gt;
&lt;p&gt;在 react 中，数据流是单方向流动的，从父节点向子节点传递（自上而下）。子组件可以通过属性 props 接收来自父组件的状态，然后在人的人（）方法中渲染到页面。每个组件同时又拥有了属于自己内部的状态 state，当父组件的某个属性发生变化时，React 会将此改变了的状态向下递归遍历组件树，然后触发相应的子组件重新渲染（re-render）。&lt;/p&gt;
&lt;p&gt;如果把组件视为一个函数，那么 props 就是从外部传入的参数，而 state 可以视为函数内部的参数，最后函数返回虚拟 DOM。&lt;/p&gt;
&lt;h3 id=&#34;状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态&#34;&gt;#&lt;/a&gt; 状态&lt;/h3&gt;
&lt;p&gt;​		每个 React 组件都有自己的状态，相比于 props，state 只存在于组件自身内部，用来影响仕途的展示。可以使用 React 内置的 setState（）方法修改 state, 每当使用 setState () 时，React 会将需要更新的 state 合并后放入状态序列，触发调和过程（Reconciliation）, 而不是立即更新 state, 然后根据新的装阿泰结构重新渲染 UI 界面，最后 React 会根据差异对界面进行最小化进行重新渲染。&lt;/p&gt;
&lt;p&gt;​		React 通过 this.state 访问状态，调用 this.setState () 方法来修改状态。&lt;/p&gt;
&lt;h3 id=&#34;属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性&#34;&gt;#&lt;/a&gt; 属性&lt;/h3&gt;
&lt;p&gt;​		state 是组件内部的状态，那么组件之间如何通信呢？这就是 props 的职责所在了。通俗来说，props 就是连接各个组件信息互通的桥梁。React 本身是单向数据流，所以在 props 中数据的流向非常直观，并且 props 是不可改变的。props 的值只能从默认属性和父组件中传递过来，如果尝试修改 props，React 将会爆出类型错误的提示。&lt;/p&gt;
&lt;h2 id=&#34;组件之间的通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件之间的通信&#34;&gt;#&lt;/a&gt; 组件之间的通信&lt;/h2&gt;
&lt;h2 id=&#34;组件的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件的生命周期&#34;&gt;#&lt;/a&gt; 组件的生命周期&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%89%B9%E5%BE%81/</guid>
            <title></title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%89%B9%E5%BE%81/</link>
            <category>前端 React</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;React 具有三大突出特点：组件化、虚拟 DOM 和单向数据流。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;组件化&lt;/p&gt;
&lt;p&gt;React 书写的一切用户界面都是基于组件的。组件具有良好的封装性，可以重复使用，减少大量重复、多余的代码，并且方便迭代维护。&lt;/p&gt;
&lt;p&gt;简单的组件示例：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; react&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; Component &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; render &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; Class MyComponent &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;React&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            	Hello&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;I&lt;/span&gt; am &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;自定义组件后，在其他需要使用这个组件的地方就可以像使用 HTML 标签一样使用：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; React&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; component &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; render &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; MyComponent &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./myComponent&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;extends&lt;/span&gt; React&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Component&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;MyComponent name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;             &lt;span class=&#34;token comment&#34;&gt;//name 是自定义组件的属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟 DOM&lt;/p&gt;
&lt;p&gt;先了解一下什么是 DOM, 什么又是虚拟 DOM。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单向数据流&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/front-end/2021-9-15-ES6%E7%89%B9%E6%80%A7/</guid>
            <title>ES6特性</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/front-end/2021-9-15-ES6%E7%89%B9%E6%80%A7/</link>
            <category>前端</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;es6特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6特性&#34;&gt;#&lt;/a&gt; ES6 特性&lt;/h1&gt;
&lt;h2 id=&#34;1变量声明let和const&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1变量声明let和const&#34;&gt;#&lt;/a&gt; 1. 变量声明 let 和 const&lt;/h2&gt;
&lt;p&gt;​	    ES6 之前，通常用 var 关键字来声明变量。无论在何处声明，都会被视为在所在函数作用域最顶部（变量提升）。相比于使用 var 来声明变量，使用 let 和 const 声明变量带来了以下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以解决 ES5 使用 var 初始化变量会出现的变量提升问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以解决使用闭包时出错的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES5 只有全局作用域和函数作用域，没有块级作用域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以解决实用计数的 for 循环变量时会导致泄露为全局变量的问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;let 命令表示被声明的变量值在作用域内生效。比如：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token comment&#34;&gt;// 报错 ReferenceError&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;对于 let 来说，不存在变量提升&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在一般的代码逻辑中，变量应该是定义后才会使用，但 var 的变量提升却可以先使用再定义。而 let 声明的变量再使用前必须声明后才能使用，不然就报错。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cosnole&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 报错 ReferenceError&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;let 不允许重复声明，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 报错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 报错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在代码块内，使用 let 声明变量前，该变量都是不可用的（不可访问、不可赋值等）。在语法上。这被称为 “暂时性死区”（Temporal Dead Zone,TDZ）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 暂时性死区就是只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取。只有等到声明的那一行代码出现，才可以获取和使用该变量。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//TDZ 开始，不可访问，不可赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// ReferenceError&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// ReferenceError&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; temp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//TDZ 结束&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 输出 undefined, 可访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 可赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出 1，访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 ES5 中，变量提升可能还会导致内层变量覆盖外层变量，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;let 还引入了块级作用于的概念，传统 ES5 中不存在块级作用域。假如没有块级作用域，还有可能碰到这种问题：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// Uncaught ReferenceError: i is not defined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;块级作用域可以使内层作用域跟外层同名的变量名，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;const 用于声明只读的变量，一旦声明就不能改变。和 let 一样，const 存在块级作用域，不存在变量提升，存在暂时性死区和不可重复声明。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-解构赋值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-解构赋值&#34;&gt;#&lt;/a&gt; 2. 解构赋值&lt;/h2&gt;
&lt;p&gt;​	按照一定模式从数组或对象中提取值，对变量进行赋值，叫做解构赋值。（Destructuring）&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;注意：&lt;/strong&gt;  解构赋值的对象是数组或对象，作用是赋值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于对象的解构赋值示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; cat &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sex&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;male&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    age&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sex&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cat&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sex&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//  Tom,male,3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​		传统写法：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; cat &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sex&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;male&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    age&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cat&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; sex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cat&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cat&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;对象结构也可以指定默认值：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b  &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解构失败时，变量的值为 undefined：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;b&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a   &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;数组的解构赋值：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b  &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c  &lt;span class=&#34;token comment&#34;&gt;// 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;y  &lt;span class=&#34;token comment&#34;&gt;// 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;g&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;e  &lt;span class=&#34;token comment&#34;&gt;// &#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;f  &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;g  &lt;span class=&#34;token comment&#34;&gt;// []&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果结构失败将会赋值为 undefined，如果等号右边是不可遍历结构也会报错。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 报错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;数组解构赋值同样也允许默认值：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a  &lt;span class=&#34;token comment&#34;&gt;// [1,2,3]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hi&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x  &lt;span class=&#34;token comment&#34;&gt;// x=&#34;a&#34;, y=&#34;hi&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;3拓展运算符spread&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3拓展运算符spread&#34;&gt;#&lt;/a&gt; 3. 拓展运算符 (spread) ...&lt;/h2&gt;
&lt;p&gt;​	拓展运算符 (spread) 是三个点（...）。可以将他比作 rest 参数的逆运算，将一个数组转为用逗号分隔开的参数序列。下面来看看它有哪些作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;合并数组。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 ES5 中要合并两个数组：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;ES6 使用拓展运算符：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//  [1,2,3,4]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;与解构赋值结合：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;拓展运算符可以和解构赋值相结合用于生成新数组&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;arr2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1   &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2   &lt;span class=&#34;token comment&#34;&gt;// [2,3,4]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;函数调用（替代 apply () 方法）。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// ES5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cosnt num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//ES6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上述代码使用拓展运算符将一个数组变为参数序列。当然，拓展运算符也可以和普通函数参数相结合使用，非常灵活，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;c&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cosnt num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;拓展运算符中的表达式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-avascript&#34;&gt;[...(true?[1,2]:[3]),&#39;a&#39;];          // [1,2,&#39;a&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4箭头函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4箭头函数&#34;&gt;#&lt;/a&gt; 4. 箭头函数&lt;/h2&gt;
&lt;p&gt;ES6 对与函数的拓展中增加了箭头函数 =&amp;gt;, 用于对函数的定义。&lt;/p&gt;
&lt;p&gt;箭头函数语法很简单，先定义自变量，然后是箭头和函数主体。箭头函数相当于匿名函数并简化了函数定义。&lt;/p&gt;
&lt;p&gt;不引入参数的箭头函数示例：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// 圆括号代表参数部分&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 等同于 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;引入参数的箭头函数示例：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 单个参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 可以不给参数 value 加小括号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 等同于&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 多个参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 等同于&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;花括号内的函数主体部分写法基本等同于传统函数写法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 如果箭头函数内要返回自定义对象，需要用小括号把对象括起来。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;getInfo&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    title&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Awesome React&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 等同于&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;getInfo&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        title&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Awesome React&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​	箭头函数与传统的 JavaScript 函数主要区别有以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;箭头函数内置 this 不可改变；&lt;/li&gt;
&lt;li&gt;箭头函数不能使用 new 关键字来实例化对象&lt;/li&gt;
&lt;li&gt;箭头函数没有 arguments 对象，无法通过 arguments 对象访问传入的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;箭头函数看似匿名函数的简写，但与匿名函数有明显区别，箭头函数内部的 this 是词法作用域，由上下文确定。如果使用了箭头函数，就不能对 this 进行修改，所以用 call () 或 apply () 调用箭头函数时都无法对 this 进行绑定，传入的第一个参数会被忽略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 词法作用域是定义在词法阶段的作用域，它在代码书写的时候就已经确定了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://zhanglin233.github.io/2021/11/27/computer-science/blog/hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
            <title>基于hexo框架部署个人博客</title>
            <link>http://zhanglin233.github.io/2021/11/27/computer-science/blog/hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
            <category>博客</category>
            <pubDate>Sat, 27 Nov 2021 01:22:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基于hexo框架部署个人博客&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于hexo框架部署个人博客&#34;&gt;#&lt;/a&gt; 基于 hexo 框架部署个人博客&lt;/h1&gt;
&lt;h2 id=&#34;起因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#起因&#34;&gt;#&lt;/a&gt; 起因&lt;/h2&gt;
&lt;p&gt;之前我的博客是基于 jekyll 搭建的，但是 jekyll 模板搭建出来的博客的样式我并不是喜欢，所以在前天看到是室友打算用 hexo 搭建博客的时候，发现效果挺好的，所以转而把博客迁移到 hexo 上来。&lt;/p&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;h3 id=&#34;git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt; git&lt;/h3&gt;
&lt;p&gt;因为最终是把生成的页面提交到 github 上的免费私有仓库，所以 git 环境是必不可少的，网上有关 git 安装教程很多，就不一一赘述，查询当前设备的 git 环境，在控制台输入 git -v, 得到 git 版本信息即说明 git 环境已装好。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; --version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127143705.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;node&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node&#34;&gt;#&lt;/a&gt; node&lt;/h3&gt;
&lt;p&gt;开发过程中需要安装较多依赖的插件，使用 npm 包管理工具来管理这些插件。具体安装步骤网上查询即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127145223.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;hexo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hexo&#34;&gt;#&lt;/a&gt; hexo&lt;/h3&gt;
&lt;p&gt;如果电脑已经具备了 git 和 node 环境，安装 hexo 非常简单&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; hexo -g&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;建议加上 -g 将 hexo 设为全局环境变量&lt;/p&gt;
&lt;p&gt;查看 hexo 版本信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127145634.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;能得到以上信息就说明安装成功。&lt;/p&gt;
&lt;h2 id=&#34;开始本地部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开始本地部署&#34;&gt;#&lt;/a&gt; 开始本地部署&lt;/h2&gt;
&lt;p&gt;此次博客部署参考了 https://shoka.lostyu.me/。&lt;/p&gt;
&lt;h3 id=&#34;初始化文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化文件夹&#34;&gt;#&lt;/a&gt; 初始化文件夹&lt;/h3&gt;
&lt;p&gt;选择一个文件夹用来部署你的博客。我的文件夹所在地：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127150222.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下来在终端中进入你博客的文件路径，分别输入&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;进行初始化，使其能够运行 hexo 和 git 命令。（接下来所有操作都是在此路径下进行）&lt;/p&gt;
&lt;h3 id=&#34;下载模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载模板&#34;&gt;#&lt;/a&gt; 下载模板&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# cd your-blog&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;安装依赖插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装依赖插件&#34;&gt;#&lt;/a&gt; 安装依赖插件&lt;/h3&gt;
&lt;h4 id=&#34;安装yarn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装yarn&#34;&gt;#&lt;/a&gt; 安装 yarn&lt;/h4&gt;
&lt;p&gt;直接使用 npm 下载可能存在下载速率过慢的问题，可以使用 yarn 依赖插件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install yarn
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;安装项目所需依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装项目所需依赖&#34;&gt;#&lt;/a&gt; 安装项目所需依赖&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# md 文件渲染器，压缩 css/js/html&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;yarn&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; hexo-renderer-multi-markdown-it -s &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 给生成的 css 文件们添加浏览器前缀&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;yarn&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; hexo-autoprefixer -s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#站内搜索功能&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;yarn&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; hexo-algoliasearch -s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 文章或站点字数及阅读时间统计	&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;yarn&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; hexo-symbols-count-time -s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成 Feed 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;yarn&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; hexo-feed -s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将生成页面提交到远程仓库所需的依赖&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;yarn&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; hexo-deployer-git -s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;基本配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本配置&#34;&gt;#&lt;/a&gt; 基本配置&lt;/h3&gt;
&lt;p&gt;基本配置为 blog 所在路径下的_config.yml 文件，各个配置什么作用注释应该挺清楚的，就不一一解释，如还有不清楚的可以查看&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv&#34;&gt;原作者的博客&lt;/span&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Hexo Configuration&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Docs: http://hexo.io/docs/configuration.html&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Source: https://github.com/hexojs/hexo/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Site&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; Hexo&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;subtitle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; subtitle&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 描述123&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;keywords&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 关键词1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;关键词2 &lt;span class=&#34;token comment&#34;&gt;# edit for Theme.shoka&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; John Doe&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; zh&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;CN &lt;span class=&#34;token comment&#34;&gt;# 这里只可以选 zh-CN、zh-HK、zh-TW、ja、en 这几个格式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Asia/Shanghai&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# URL&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; http&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//yoursite.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; /&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;permalink&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;title/ &lt;span class=&#34;token comment&#34;&gt;# edit for Theme.shoka&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;permalink_defaults&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Directory&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;source_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; source&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;public_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; public&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;tag_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; tags&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;archive_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; archives&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;category_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; categories&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;code_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; downloads/code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;i18n_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;lang&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;skip_render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Writing&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;new_post_name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;title.md &lt;span class=&#34;token comment&#34;&gt;# File name of new posts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;default_layout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; post&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;titlecase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# Transform title into titlecase&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;external_link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# Open external links in new tab&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; site &lt;span class=&#34;token comment&#34;&gt;# Apply to the whole site&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;filename_case&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;render_drafts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;post_asset_folder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;relative_link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;future&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;highlight&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# edit for Theme.shoka&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;line_number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;auto_detect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;tab_replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;prismjs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# edit for Theme.shoka&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Category &amp;amp; Tag&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;default_category&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; uncategorized&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;category_map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# edit for Theme.shoka&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;计算机科学&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; computer&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;science&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;Java&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; java&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;二进制杂谈&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; note&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;零基础学Java语言-浙江大学-翁恺&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; course&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;Theme Shoka Documentation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; theme&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;shoka&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;doc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;tag_map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Date / Time format&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Hexo uses Moment.js to parse and display date&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## You can customize the date format as defined in&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## http://momentjs.com/docs/#/displaying/format/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;date_format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; YYYY&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;MM&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;DD&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;time_format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; HH&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;mm&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;ss&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Pagination&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Set per_page to 0 to disable pagination&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;per_page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;pagination_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; page&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Extensions&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Plugins: http://hexo.io/plugins/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Themes: http://hexo.io/themes/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; shoka &lt;span class=&#34;token comment&#34;&gt;# edit for Theme.shoka&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Docs: http://hexo.io/docs/deployment.html&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# edit for Theme.shoka&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;autoprefixer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;*.min.css&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;markdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 渲染器设置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 过滤 HTML 标签&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;xhtmlOut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 使用 &#39;/&#39; 来闭合单标签 （比如 &amp;lt;br /&gt;）。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;breaks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 转换段落里的 &#39;\n&#39; 到 &amp;lt;br&gt;。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;linkify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 将类似 URL 的文本自动转换为链接。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;typographer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;quotes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;“”‘’&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# markdown-it 插件设置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; markdown&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;it&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;toc&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;and&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;anchor&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;tocClassName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;toc&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;anchorClassName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;anchor&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; markdown&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;it&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;multimd&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;table&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;multiline&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;rowspan&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;headerless&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; ./markdown&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;it&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;furigana&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;fallbackParens&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;()&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; ./markdown&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;it&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;spoiler&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;你知道得太多了&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;minify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;stamp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;**/json.ejs&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;**/atom.ejs&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;**/rss.ejs&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;css&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;stamp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;**/*.min.css&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;stamp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;mangle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;toplevel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;**/*.min.js&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;146&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# algolia:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;147&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#   appId:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;148&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#   apiKey:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;149&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#   adminApiKey:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;150&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#   chunkSize: 5000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;151&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#   indexName:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;152&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#   fields:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;153&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#     - title #必须配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;154&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#     - path #必须配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;155&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#     - categories #推荐配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;156&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#     - content:strip:truncate,0,4000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;157&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#     - gallery&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;158&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#     - photos&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;159&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#     - tags&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;160&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;161&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;feed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;162&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;163&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;order_by&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-date&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;164&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;tag_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;165&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;category_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;166&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;rss&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;167&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;168&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;themes/shoka/layout/_alternate/rss.ejs&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;169&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rss.xml&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;170&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;atom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;171&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;172&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;themes/shoka/layout/_alternate/atom.ejs&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;173&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;atom.xml&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;174&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;jsonFeed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;175&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;176&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;themes/shoka/layout/_alternate/json.ejs&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;177&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;feed.json&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;项目配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目配置&#34;&gt;#&lt;/a&gt; 项目配置&lt;/h3&gt;
&lt;p&gt;项目配置文件为 themea/shoka 文件夹中的_config.yml 文件&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;alternate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; Yume Shoka&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Assets&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;statics&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; / &lt;span class=&#34;token comment&#34;&gt;#//cdn.jsdelivr.net/gh/amehime/shoka@latest/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;open_graph&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#twitter_id:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#google_plus:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#fb_admins:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#fb_app_id:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;menu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;home&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; / &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; home&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;posts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; / &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; feather&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;archives&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; /archives/ &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; list&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;alt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;categories&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; /categories/ &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; th&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; /tags/ &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; tags&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;friends&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; /friends/ &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; heart&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Social Links&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Usage: `Key: permalink || icon || color`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Key is the link label showing to end users.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Value before `||` delimiter is the target permalink,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# secend value is the name of Font icon.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;social&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//github.com/amehime &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; github &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &#34;&lt;span class=&#34;token comment&#34;&gt;#191717&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#google: https://plus.google.com/yourname || google&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;twitter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//twitter.com/amehime &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; twitter &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &#34;&lt;span class=&#34;token comment&#34;&gt;#00aff0&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;zhihu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//www.zhihu.com/people/rurismzk &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; zhihu &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &#34;&lt;span class=&#34;token comment&#34;&gt;#1e88e5&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;music&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//music.163.com/&lt;span class=&#34;token comment&#34;&gt;#/user/home?id=12886823 || cloud-music || &#34;#e60026&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;weibo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//weibo.com/amehime &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; weibo &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &#34;&lt;span class=&#34;token comment&#34;&gt;#ea716e&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;about&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//about.me/amehime &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; address&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;card &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &#34;&lt;span class=&#34;token comment&#34;&gt;#3b5998&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#email: mailto:yourname@mail.com || envelope || &#34;#55acd5&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#facebook: https://www.facebook.com/yourname || facebook&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#stackoverflow: https://stackoverflow.com/yourname || stack-overflow&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#youtube: https://youtube.com/yourname || youtube&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#instagram: https://instagram.com/yourname || instagram&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#skype: skype:yourname?call|chat || skype&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;#douban: https://www.douban.com/people/yourname/ || douban&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;footer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# Specify the date when the site was setup. If not defined, current year will be used.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;since&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2010&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Third Party Plugins &amp;amp; Services Settings&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Comments&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Valine&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# For more information: https://valine.js.org, https://github.com/xCss/Valine&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;valine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;appId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#这里不要忘了改&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;appKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#这里不要忘了改&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; ヽ(○´∀`)ﾉ♪ &lt;span class=&#34;token comment&#34;&gt;# Comment box placeholder&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;pageSize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# Pagination size&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; zh&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;CN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;tagMember&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;# - deea5a8d259d17182a53be1772e4c182&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;friend&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; deea5a8d259d17182a53be1772e4c182&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# bgm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 列表1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//music.163.com/&lt;span class=&#34;token comment&#34;&gt;#/playlist?id=2943811283&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//music.163.com/&lt;span class=&#34;token comment&#34;&gt;#/playlist?id=2297706586&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 列表2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//music.163.com/&lt;span class=&#34;token comment&#34;&gt;#/playlist?id=2031842656&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Dependencies: https://github.com/amehime/hexo-renderer-multi-markdown-it&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;pangu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# analytics &amp;amp; SEO Settings&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Disable Baidu transformation on mobile devices.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;disable_baidu_transformation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Automatically add external URL with Base64 encrypt &amp;amp; decrypt.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;exturl&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;显示文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示文章&#34;&gt;#&lt;/a&gt; 显示文章&lt;/h3&gt;
&lt;p&gt;需展示的文章应为 markdown 文件，放于 yourBlog/source/_post 目录下，如我的博客位于问价夹下 D:\blog\myBlog2, 则文章位于 D:\blog\myBlog2\source_posts 问价夹下，其它细节配置参考&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==&#34;&gt;界面展示&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;本地启动项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地启动项目&#34;&gt;#&lt;/a&gt; 本地启动项目&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;启动项目即可&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;PS D:&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;blog&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;myBlog&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt; hexo s   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INFO  Validating config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INFO  Start processing&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Prism&lt;span class=&#34;token string&#34;&gt;&#39;s Diff Highlight plugin requires the Diff language definition (prism-diff.js).Make sure the language definition is loaded or use Prism&#39;&lt;/span&gt;s Autoloader plugin.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INFO  Hexo is running at http://localhost:4000 &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; Press Ctrl+C to stop.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;出现以上信息即为启动成功，前往 http://localhost:4000 即可查看效果。&lt;/p&gt;
&lt;h2 id=&#34;将博客部署到github上&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将博客部署到github上&#34;&gt;#&lt;/a&gt; 将博客部署到 github 上&lt;/h2&gt;
&lt;p&gt;首先在根目录下配置一下信息&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Docs: https://hexo.io/docs/one-command-deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;git&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 https://github/yourname/yourname.github.io&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; master &lt;span class=&#34;token comment&#34;&gt;# 项目所在的分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;依次运行以下的命令&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 清楚本地缓存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo clean&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 重新生成并提交到远端仓库 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo g &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;d  &lt;span class=&#34;token comment&#34;&gt;# 相当于 hexo generate 及 hexo dep&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果没有发生错误你就可以在你的 gihub 仓库上看到提交的内容了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127154035.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中查看效果&lt;/p&gt;
&lt;h2 id=&#34;遇到的坑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遇到的坑&#34;&gt;#&lt;/a&gt; 遇到的坑&lt;/h2&gt;
&lt;h3 id=&#34;按照heox官方文档推荐的部署到github上失败&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按照heox官方文档推荐的部署到github上失败&#34;&gt;#&lt;/a&gt; 按照 heox 官方文档推荐的部署到 github 上失败&lt;/h3&gt;
&lt;p&gt;官方推荐&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZ2l0aHViLXBhZ2Vz&#34;&gt;将 Hexo 部署到 GitHub Pages | Hexo&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本人惨痛的教训建议不要按照官方步骤来，官方的太麻烦了而且还有给的步骤还有问题，反正我是没弄出来。&lt;/p&gt;
&lt;p&gt;官方的意思是使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL3RyYXZpcy1jaQ==&#34;&gt;Travis CI&lt;/span&gt; 能够动态监听代码上传并将生成的页面文件提交到与项目代码文件不同的分支下。&lt;/p&gt;
&lt;p&gt;为了达到与官方类似的效果，我们只需要新建一个仓库用于存放整体项目文件（按照本文章的上述步骤，yourname.github.io 仓库只会存放生成的页面文件，即运行 hexo g 命令后生成的 publi 文件夹之中的内容），并将该项目绑定到新建的仓库即可。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; origin 你的仓库&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以后要刷新博客内容只需运行&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo cl&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo g -d&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将整个项目文件保存到 github&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; pull &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;is-not-a-a-recognized-liquid-tag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#is-not-a-a-recognized-liquid-tag&#34;&gt;#&lt;/a&gt; ... is not a  a recognized Liquid tag&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;The tag &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;linksfile&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; on line &lt;span class=&#34;token number&#34;&gt;23&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;source/friends/index.md&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; is not a recognized Liquid tag. For &lt;span class=&#34;token function&#34;&gt;more&lt;/span&gt; information, see https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites&lt;span class=&#34;token comment&#34;&gt;#unknown-tag-error.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;大概原因是 Jekyll 是一个静态站点生成器，内置 GitHub Pages 支持和简化的构建过程，所以 github 官方建议将 Jekyll 用于 GitHub Pages。因此如果你使用的不是 jekyll 框架，就可能会存在标签无法识别的情况。为了解决这样的问题，我们只需要在配置文件中禁用 jekyll 即可。&lt;/p&gt;
&lt;p&gt;在博客项目根目录下添加空的.nojekyll 文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211126221143.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;并在_config.yml 文件中加入以下配置即可：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; .nojekyll&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol&gt;
&lt;li&gt;第二个问题就是依据 hexo 官方文&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;hexo-d-时出现spawn-failed&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hexo-d-时出现spawn-failed&#34;&gt;#&lt;/a&gt; hexo d 时出现 spawn failed&lt;/h3&gt;
&lt;p&gt;如果报的是类似认证远端仓库的问题的话，将&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Docs: https://hexo.io/docs/one-command-deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;git&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 https://github/yourname/yourname.github.io&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; master &lt;span class=&#34;token comment&#34;&gt;# 项目所在的分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;中的 repo 换成 ssh 地址，不要使用 https 地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127155137.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Docs: https://hexo.io/docs/one-command-deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;git&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 git@github.com:github/yourname/yourname.github.io&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; master &lt;span class=&#34;token comment&#34;&gt;# 项目所在的分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;hexo本地测试运行重启后页面空白提示-warn-no-layout-indexhtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hexo本地测试运行重启后页面空白提示-warn-no-layout-indexhtml&#34;&gt;#&lt;/a&gt; hexo 本地测试运行重启后页面空白，提示 : WARN No layout: index.html?&lt;/h3&gt;
&lt;p&gt;检查 themes 文件夹下的主题名字是否和项目根目录下_config.yml 配置中的 theme 属性一样，如此次使用的主题为 shoka，则项目根目录下_config.yml 文件对应的部分为&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; shoka&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;github上配置域名失效每次提交之后都要重新在github仓库的配置里重新设置域名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#github上配置域名失效每次提交之后都要重新在github仓库的配置里重新设置域名&#34;&gt;#&lt;/a&gt; github 上配置域名失效，每次提交之后都要重新在 github 仓库的配置里重新设置域名‘&lt;/h3&gt;
&lt;p&gt;在项目 source 文件夹下新增 CNAME 文件，在 CNAME 文件里写入你想要绑定的域名即可。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
