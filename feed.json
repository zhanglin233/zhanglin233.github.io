{
    "version": "https://jsonfeed.org/version/1",
    "title": "欢迎来到我的个人博客",
    "description": "",
    "home_page_url": "http://zhanglin233.github.io",
    "items": [
        {
            "id": "http://zhanglin233.github.io/2021/12/12/computer-science/algorithm/LeetCode%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%94%E8%AE%B0/",
            "url": "http://zhanglin233.github.io/2021/12/12/computer-science/algorithm/LeetCode%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%94%E8%AE%B0/",
            "title": "LeetCode左程云算法课笔记",
            "date_published": "2021-12-12T05:02:30.234Z",
            "content_html": "<h1 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h1>\n<h2 id=\"异或运算符\"><a class=\"anchor\" href=\"#异或运算符\">#</a> 异或运算符 ^</h2>\n<h3 id=\"运算符性质\"><a class=\"anchor\" href=\"#运算符性质\">#</a> ^ 运算符性质</h3>\n<ul>\n<li>\n<p>^ 可理解为不进位相加</p>\n</li>\n<li>\n<p>0^N == N, N^N == 0</p>\n</li>\n<li>\n<p>异或运算满足交换律和结合律，a^b = b^a, a^b^c = a^(b^c)</p>\n</li>\n<li>\n<p>根据异或相同为 0，不同为 1 不能很好理解交换律和结合律，但是 ^ 理解为不进位相加就很好理解了，某一位上的结果只和 1 的个数有关，和顺序无关</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211212133439.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"使用异或运算符交换两个数\"><a class=\"anchor\" href=\"#使用异或运算符交换两个数\">#</a> 使用异或运算符交换两个数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* arr[i] = a, arr[j] = b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//arr[i] = a ^ b</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//arr[j] = a ^ b ^ b = a</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//arr[i] = a ^ b ^ a = b</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>不用申请额外的空间</li>\n<li><strong>使用前提</strong>：i != j, 即要交换的两数在内存中地址不能一样，否则会将该地址的值抹为 0</li>\n</ul>\n<h3 id=\"提取出最右的1\"><a class=\"anchor\" href=\"#提取出最右的1\">#</a> 提取出最右的 1</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 假设最右侧 1 为第 i 位，首先～num 将 0~i-1 位的所有数都取反，i 位之后的数都置为 0，加 1 后 i 位变为 1，0~i-1 位均为 0，并进位到 i 使 i 位上的数字变为 1，i 位之后的数字仍未原数字的取反，此时再与原数字求与，则除了 i 位上的数字为 1，其它位均为 0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> rightOne <span class=\"token operator\">=</span> num <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"一个数组中有一种数出现了奇数次其它数都出现了偶数次怎么找到这一个数\"><a class=\"anchor\" href=\"#一个数组中有一种数出现了奇数次其它数都出现了偶数次怎么找到这一个数\">#</a> 一个数组中有一种数出现了奇数次，其它数都出现了偶数次，怎么找到这一个数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度 O (N), 空间复杂度 O (1)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printOddTimesNum1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> eor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cur<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        eor <span class=\"token operator\">^=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>eor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"一个数组中有两种数出现了奇数次其他数都出现了偶数次怎么找到这两个数\"><a class=\"anchor\" href=\"#一个数组中有两种数出现了奇数次其他数都出现了偶数次怎么找到这两个数\">#</a> 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到这两个数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度 O (N), 空间复杂度 O (1)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pringOddTimesNum2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> eor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cur<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        eor <span class=\"token operator\">^=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// a!=b</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//eor = a ^ b</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//eor != 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//eor 必然有一个位置上是 1，其中该位置上 a,b 中必有 1 个为 0，一个为 1，假设该位上 a 为 1，b 为 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> rightOne <span class=\"token operator\">=</span> eor <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>eor<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 提取出最右的 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> onlyOne <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//eor' </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 所有的数可以分为 rightOne 位上为 1 和不为 1 的两类，每类中的数除了 a 或 b 外全都出现了偶次</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curNum<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rightOne <span class=\"token operator\">&amp;</span> curNum <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 与数进行与运算，找出所有的该位上为 0 的数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 与所有的该位上为 0 的数异或，最终 onlyOne = a ^ b ^ b = a</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            onlyOne <span class=\"token operator\">^=</span> curNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//if (rightOne &amp; curNum == rightNum)&#123;  // 与数进行与运算，找出所有的该位上为 1 的数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 与所有的该位上为 1 的数异或，最终 onlyOne = a ^ b ^ a = b</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//    onlyOne ^= curNum;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>onlyOne<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>eor <span class=\"token operator\">^</span> onlyNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//eor ^ onlyNum = a ^ b ^ a = b</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"排序算法\"><a class=\"anchor\" href=\"#排序算法\">#</a> 排序算法</h1>\n<h2 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code01_SelectionSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 每次选出最小的数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\tminIndex <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> j <span class=\"token operator\">:</span> minIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code02_BubbleSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 相邻的两个数比较，大的放在右边</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> e<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h2>\n<p>时间复杂度 O (N^2)，额外空间复杂度 O (1)，算法流程按照最差情况来估计时间复杂度</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code3_InsertionSort</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertionSOrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//0~0 有序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//0~i 想有序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//0~i 范围有序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//i 和 j 是一个位置会报错，使用异或操作交换数字必须保证两数地址不同</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"二分法的详解与拓展\"><a class=\"anchor\" href=\"#二分法的详解与拓展\">#</a> 二分法的详解与拓展</h1>\n<p>使用二分法不一定要有序，只要左右两侧求的跟问题有关而且确定能甩掉一半，就能使用二分法</p>\n<ul>\n<li>\n<p>在一个有序数组中，找某个数是否存在</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code04_BSExist</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sortedArr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> sortedArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> sortedArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span> <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tmid <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> sortedArr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在一个有序数组中，找 &gt;= 某个数最左侧的位置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code05_BSNearLeft</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 在 arr 上，找满足 >=value 的最左位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nearestIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span> <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\tindex <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>局部最小值问题（所有的数个不相等）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code09_FindOneLessValueIndex</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLessIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 一些特殊情况</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no exist</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tmid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 中点左侧的值比中点的值小，所以只需考虑左边</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\tright <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 中点的值小于左边大于右边</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tleft <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 中点的值比左右两边都小</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 如果 left>=right, 说明 length&lt;=3</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 又因为 arr [0] &lt; arr [1] 和 arr [arr.length - 1] &lt; arr [arr.length - 2] 都不成立，所以 arr [1] 最小</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">getLessIndex</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index: \"</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">\", value: \"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/12/10/computer-science/course_1/%E6%99%BA%E8%83%BD%E6%8E%A7%E5%88%B6/",
            "url": "http://zhanglin233.github.io/2021/12/10/computer-science/course_1/%E6%99%BA%E8%83%BD%E6%8E%A7%E5%88%B6/",
            "title": "智能控制（复习用，来源于zzl）",
            "date_published": "2021-12-10T01:24:54.864Z",
            "content_html": "<p>《计算机控制技术及工程应用（第三版）- 林敏》</p>\n<p>教师：电子科技大学 吴正华</p>\n<h1 id=\"第1章计算机控制概述\"><a class=\"anchor\" href=\"#第1章计算机控制概述\">#</a> 第 1 章计算机控制概述</h1>\n<h2 id=\"考察方式\"><a class=\"anchor\" href=\"#考察方式\">#</a> 考察方式</h2>\n<p>不会出大题，主要就是选题，结合第 11 12 13 14 章，重点是了解概念。</p>\n<p>要点：</p>\n<ul>\n<li>计算机控制系统组成</li>\n<li>计算机控制系统分类</li>\n<li>计算机控制系统种类</li>\n</ul>\n<p>计算机控制技术及工程应用是把计算机技术与自动化控制系统融为一体的一门综合性学科。从计算机应用角度出发，自动化控制工程是其最重要的一个应用领域；而从自动化控制工程来看，计算机技术又是一个主要的实现手段。</p>\n<p>用于自动化控制的计算机统称为工业控制计算机，它与用于计算及数据处理的商务计算机是两类不同用途，不同结构的计算机。</p>\n<p>本书立足于工业自动化领域，讨论这种不同于普通计算机的计算机控制系统的结构组成、相关技术及其工程应用。</p>\n<h2 id=\"11-控制系统组成\"><a class=\"anchor\" href=\"#11-控制系统组成\">#</a> 1.1 控制系统组成</h2>\n<h3 id=\"111-控制系统概念\"><a class=\"anchor\" href=\"#111-控制系统概念\">#</a> 1.1.1 控制系统概念</h3>\n<p>计算机控制系统是由常规仪表控制系统演变而来，常规仪表组成的自动控制系统根据不同的控制要求，一般分为：<strong>闭环控制和开环控制</strong>。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122164532499.png\" alt=\"image-20211122164532499\" /></p>\n<p>闭环控制系统：测量变送器对被控对象进行检测，把被控量（如：温度、压力等物理量）转换为电信号，再反馈到控制器中，控制器将此测量值与设定值进行对比，形成偏差输入，并按照一定的控制规律产生相应的控制信号驱动执行器工作，执行器产生的操纵变量使被控对象的被控量跟踪值趋近于设定值，从而实现自动控制稳定生产的目的。这种信号传递形成了闭合回路，所以称之为按偏差进行控制的闭环反馈控制系统。</p>\n<p>开环控制系统：控制器直接根据设定值驱动执行器去操控对象，信号传递是单方向的，也称程序（顺序）控制系统。显然，开环控制系统不能自动消除被控量与设定值之间的偏差，控制性能也不如闭环控制系统。</p>\n<p>大多数控制系统均采用闭环控制系统，通常意义下的自动控制系统也是闭环控制系统。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122170022252.png\" alt=\"image-20211122170022252\" /></p>\n<p>将控制器用控制计算机（微型计算机、A/D（模 / 数）转换器接口、D/A（数 / 模）转换器接口）代替。由于计算机采用的是数字信号传递，而一次仪表多采用模拟信号传递，因此需要有 A/D 转换器将模拟量转换为数字量输入；需要有 D/A 转换器将数字量转换为模拟量输出。</p>\n<p>计算机控制系统的监控过程：</p>\n<ul>\n<li>实时数据采集：对来自测量变送器的被控量的瞬时值进行采集和输入。</li>\n<li>实时数据处理：对采集到的被控量进行分析、比较和处理，按一定的控制规律运算，进行控制决策。</li>\n<li>实时输出控制：根据控制决策，适时地对执行器发出控制信号，完成监控任务。</li>\n</ul>\n<p>“实时”：信号的输入、运算处理和输出能在一定时间内完成，超过这个时间，就会失去控制时机。</p>\n<p>完整的计算机控制系统是由硬件和软件两大部分组成。</p>\n<h3 id=\"112-硬件组成\"><a class=\"anchor\" href=\"#112-硬件组成\">#</a> 1.1.2  硬件组成</h3>\n<p>计算机控制系统一般由主机、常规外部设备、过程输入 / 输出（I/O）通道、操作台和通信设备等组成。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122184848387.png\" alt=\"image-20211122184848387\" /></p>\n<ul>\n<li>\n<p>主机：由 CPU、RAM（随机存储器）、ROM（只读存储器）和系统总线构成的主机是控制系统的指挥部。主机所产生的各种控制是按照人们事先安排好的程序进行的。</p>\n</li>\n<li>\n<p>常规外部设备：实现主机和外界信息交换功能的设备被称为常规外部设备，简称外设。由输入设备、输出设备、外存储器等组成。</p>\n<p>常规外部设备 + 主机组成的计算机基本系统，即通常说的普通计算机。</p>\n</li>\n<li>\n<p>过程输入 / 输出通道：在计算机与生产过程被控对象之间起着信息传递和变换的作用的连接装置。</p>\n<ul>\n<li>过程输入通道分为数字量输入通道（DI 通道，用于输入开关量信号或数字信号量）和模拟量输入通道（A/D 或 AI 通道，用于将模拟量输入信号转换为数字信号）两种。</li>\n<li>过程输出通道分为数字量输出通道（DO 通道，用于输出开关量信号或数字信号量）和模拟量输出通道（D/A 或 AO 通道，用于将数字信号转换为模拟信号）两种。</li>\n</ul>\n</li>\n<li>\n<p>操作台：操作员和计算机控制系统之间进行联系的纽带，可以完成计算机输入程序、修改数据、显示参数、发出各种操作指令等功能。</p>\n<p>操作员分为系统操作员和生产操作员两种。系统操作员和生产操作员的操作设备一般是分开的。</p>\n</li>\n<li>\n<p>通信设备：连接网络，进行信息交互。</p>\n</li>\n</ul>\n<h3 id=\"113-软件组成\"><a class=\"anchor\" href=\"#113-软件组成\">#</a> 1.1.3 软件组成</h3>\n<p>软件：完成各种功能的计算机程序的总和，是计算机控制系统神经中枢。</p>\n<ul>\n<li>软件通常分为：系统软件、应用软件两大类。\n<ul>\n<li>系统软件：面向计算机硬件系统本身的软件，可以解决普遍性问题。\n<ul>\n<li>操作系统是系统软件的核心，提供软件开发环境，和运行环境</li>\n<li>语言处理程序：将人们编写的源程序转换成计算机能识别并执行的程序</li>\n<li>数据库管理系统：有效实现数据信息的存储、更新、查询、检索、通信控制等</li>\n<li>实用工具软件：用于对程序进行编辑、装配链接、调试以及对系统程序进行监控等。</li>\n</ul>\n</li>\n<li>应用软件：面向特定问题的软件，可解决特殊性问题，是在系统软件的支持下运行。\n<ul>\n<li>过程监视程序</li>\n<li>过程控制计算程序</li>\n<li>公共服务程序</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>当前，最流行的设计方法之一，是采用 VB 作为平台和数据库管理、VC 作为面向对象程序、汇编作为 I/O 接口处理的编程方式。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122192455720.png\" alt=\"image-20211122192455720\" /></p>\n<h2 id=\"12-控制系统分类\"><a class=\"anchor\" href=\"#12-控制系统分类\">#</a> 1.2 控制系统分类</h2>\n<h4 id=\"121-数据采集系统das\"><a class=\"anchor\" href=\"#121-数据采集系统das\">#</a> 1.2.1 数据采集系统 DAS</h4>\n<p>计算机应用于生产过程控制最早、也是最基本的一种类型。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122193408699.png\" alt=\"image-20211122193408699\" /></p>\n<p>对于指导生产以及建立或改善生产过程的数学模型，是有着重要作用的，它是所有计算机控制系统的基础。</p>\n<h4 id=\"122-操作指导控制系统ogc\"><a class=\"anchor\" href=\"#122-操作指导控制系统ogc\">#</a> 1.2.2 操作指导控制系统 OGC</h4>\n<p>基于数据采集系统的一种<strong>开环结构</strong>。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122193537341.png\" alt=\"image-20211122193537341\" /></p>\n<p>计算机根据采集到的数据以及工艺要求进行优化计算，计算出最优操作条件，并不直接输出控制被控对象，而是显示打印出来，操作人员据此去改变各个控制器的设定值或操作执行器，达到操作知道的作用。相当于模拟仪表控制系统的设定值或操作指导的作用。</p>\n<p>OGC 系统优点：结构简单，控制灵活和安全。</p>\n<p>缺点：要由人工操作，速度受到限制，不能同时控制多个回路。常用于计算机控制系统设置的初级阶段，或用于试验新的数学模型、调试新的控制程序等场合。</p>\n<h4 id=\"123-直接数字控制系统ddc\"><a class=\"anchor\" href=\"#123-直接数字控制系统ddc\">#</a> 1.2.3 直接数字控制系统 DDC</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122194301200.png\" alt=\"image-20211122194301200\" /></p>\n<p>DDC 系统用一台计算机即可完成对多个被控对象的数据采集，而且能按一定的控制规律进行实时决策，并通过过程输出通道发出控制信号，实现对生产过程的<strong>闭环控制</strong>。</p>\n<p>DDC 系统以其可靠性高，功能完善、灵活性大而成为计算机在工业生产过程中最典型的一种应用方式。</p>\n<h4 id=\"124-监督计算机控制系统scc\"><a class=\"anchor\" href=\"#124-监督计算机控制系统scc\">#</a> 1.2.4 监督计算机控制系统 SCC</h4>\n<p>SCC 系统是 OGC 系统和常规仪表控制系统或 DDC 系统综合而成的两级系统。</p>\n<p>计算机设定值控制系统 SPC：SCC + 模拟控制器系统</p>\n<p>SCC+DDC 控制系统，作为上位机的 SCC 计算机按照描述生产过程的数学模型，根据原始工艺数据与实时采集的现场变量计算出最佳动态设定值，送给作为下位机的控制器或 DDC 计算机，由下位机控制生产过程。这样系统可以根据生产工况变化，不断地修正设定值，使生产过程始终处于最优工况，属于计算机在线最优控制的一种形式。</p>\n<p>当上位机出故障时，可由下位机独立完成控制。下位机直接参与生产过程控制，要求其实时性好、可靠性高和抗干扰能力强；而上位承担高级控制与管理任务，应配置数据处理能力强，存储容量大的高档计算机。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122195801353.png\" alt=\"image-20211122195801353\" /></p>\n<h4 id=\"125-分散控制系统dcs\"><a class=\"anchor\" href=\"#125-分散控制系统dcs\">#</a> 1.2.5 分散控制系统 DCS</h4>\n<p>DCS 以微处理器为基础，借助计算机网络对生产过程进行集中式呵呵分散式控制的先进计算机控制系统，是 &quot;4C&quot; 技术的结晶。</p>\n<p>既不同于分散的仪表控制系统，也不同于集中式的计算机控制系统，而是在吸收了两者的优点基础上发展起来的具有崭新结构体系和独特技术风格的新型自动化系统。</p>\n<h4 id=\"126-现场总线控制系统fcs\"><a class=\"anchor\" href=\"#126-现场总线控制系统fcs\">#</a> 1.2.6 现场总线控制系统 FCS</h4>\n<p>改进了 DCS 成本高和由于各个厂商的产品通信标准不统一而造成的不能互联等弱点，采用集管理、控制功能于一体的工作站与现场总线智能仪表的二层结构模式，把原 DCS 控制站的功能分散到智能型现场仪表中去。每个现场仪表（如：变送器、执行器）都作为一个智能结点，都带 CPU 单元，可以分别独立完成测量、校正、调节、诊断等功能，靠网络协议把它们连接在一起统筹工作。这种彻底的分散控制模式使系统更加可靠。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122201454839.png\" alt=\"image-20211122201454839\" /></p>\n<p>FCS 的核心是现场总线，将当今的网络通信与管理概念引入工业控制领域。现场总线本质上是一种数字通信协议，是连接智能现场设备和自动化系统的数字式、双向传输、多分支结构的串行通信网络。FCS 代表了今后工业控制体系结构发展的一种方向。</p>\n<h4 id=\"127-计算机集成制造系统cims\"><a class=\"anchor\" href=\"#127-计算机集成制造系统cims\">#</a> 1.2.7 计算机集成制造系统 CIMS</h4>\n<p>CIMS 采用多任务分层体系结构，现在已经形成多种方案。流程工业 CIMS 的递阶层次结构：（从下至上）控制层、监控层、调度层、管理层、决策层。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211122201840232.png\" alt=\"1\" /></p>\n<h2 id=\"13-控制装置的类型\"><a class=\"anchor\" href=\"#13-控制装置的类型\">#</a> 1.3 控制装置的类型</h2>\n<h3 id=\"131-可编程控制器plc\"><a class=\"anchor\" href=\"#131-可编程控制器plc\">#</a> 1.3.1 可编程控制器 PLc</h3>\n<p>计算机与继电逻辑控制概念相结合的产物，其低端为常规继电逻辑控制的替代装置，而高端为一种高性能的工业计算机。主要由：CPU、存储器、输入组件、输出组件、电源、编程器等组成。</p>\n<p>PLC 具有系统构成灵活、易扩展、编程简单、调试容易、抗干扰能力强的优点，不仅在顺序程序控制领域中具有优势，而且在运动控制、过程控制、网络通信领域方面也毫不逊色。</p>\n<h3 id=\"132-可编程调节器\"><a class=\"anchor\" href=\"#132-可编程调节器\">#</a> 1.3.2 可编程调节器</h3>\n<p>主要由微处理单元，过程 I/O 单元、面板单元、通信单元、硬手操单元等组成，实际是一种仪表化的微型控制计算机。</p>\n<p>可编程调节器不仅可以作为大型分散控制系统中最基本的单元，而且也可以在一些重要场合下单独构成复杂的控制系统，完成 1 个～4 个控制回路。</p>\n<p><strong>特别适用于连续过程模拟量信号的控制系统中。</strong></p>\n<h3 id=\"133-总线式工控机ipc\"><a class=\"anchor\" href=\"#133-总线式工控机ipc\">#</a> 1.3.3 总线式工控机 IPC</h3>\n<p>总线式工控机是基于总线技术和模块化结构的一种专用于工业控制的通用型计算机。</p>\n<p>总线式工控机具有小型化、模板化、组合化、标准化的设计特点，能满足不同层次、不同控制对象的需要，又能在恶劣的工业环境中可靠的运行。<strong>因此，广泛用于各种控制场合，尤其是十几个到几十个回路中的中等规模的控制系统中。</strong></p>\n<h3 id=\"134-嵌入式计算机系统\"><a class=\"anchor\" href=\"#134-嵌入式计算机系统\">#</a> 1.3.4 嵌入式计算机系统</h3>\n<p>嵌入式计算机系统，简称嵌入式系统，<strong>以应用为核心</strong>，以计算机技术为基础，软件、硬件可以裁剪，<strong>适应于应用系统对功能、可靠性、成本、体积、功耗等方面有严格要求的专用计算机</strong>。</p>\n<p>三大基本要素：</p>\n<ul>\n<li>嵌入性</li>\n<li>专用性</li>\n<li>计算机系统</li>\n</ul>\n<p>嵌入式系统可分为系统级、模板级、芯片级。</p>\n<p>以单片机为核心的低级嵌入式系统是嵌入式发展的最初阶段。</p>\n<p>嵌入式系统进入了以因特网为标志的高级发展阶段。</p>\n<h3 id=\"135-其他控制装置\"><a class=\"anchor\" href=\"#135-其他控制装置\">#</a> 1.3.5 其他控制装置</h3>\n<p>当前计算机控制技术正在进一步向综合自动化、网络化、智能化、虚拟化、绿色化发展。</p>\n<h3 id=\"思考题\"><a class=\"anchor\" href=\"#思考题\">#</a> 思考题</h3>\n<ul>\n<li>简述计算机控制系统与常规仪表控制系统的基本结构及主要异同点。</li>\n<li>分析说明图 1-3 计算机控制系统的硬件组成及其作用。</li>\n<li>计算机控制系统的软件由哪些部分构成。</li>\n<li>按控制方案来分，计算机控制系统分为哪几大类。</li>\n<li>计算机控制装置可以分为哪几种类型。</li>\n</ul>\n<h1 id=\"第2章-模拟量输出通道\"><a class=\"anchor\" href=\"#第2章-模拟量输出通道\">#</a> 第 2 章 模拟量输出通道</h1>\n<h2 id=\"引言部分\"><a class=\"anchor\" href=\"#引言部分\">#</a> 引言部分</h2>\n<p>模拟量输出通道的任务：把计算机处理后的数字量信号转换成模拟量电压或电流信号，去驱动相应的执行器，从而达到控制的目的。</p>\n<p>模拟量输出通道 (称为 D/A 通道或 AO 通道）构成：一般是由接口电路、数 / 模转换器（简称 D/A 或 AO) 和电压 / 电流变换器等。</p>\n<h3 id=\"多da结构\"><a class=\"anchor\" href=\"#多da结构\">#</a> 多 D/A 结构</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128152425799.png\" alt=\"image-20211128152425799\" /></p>\n<ul>\n<li>一路输出通道使用一个 D/A 转换器</li>\n<li>D/A 转换芯片内部一般都带有数据锁存器</li>\n<li>D/A 转换器具有数字信号转换模拟信号、信号保持作用</li>\n<li>优点：结构简单，转换速度快，工作可靠，精度较高、通道独立</li>\n<li>缺点：所需要的 D/A 转换器芯片较多</li>\n</ul>\n<h3 id=\"共享da结构\"><a class=\"anchor\" href=\"#共享da结构\">#</a> 共享 D/A 结构</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128152503570.png\" alt=\"image-20211128152503570\" /></p>\n<ul>\n<li>多路输出通道共用一个 D/A 转换器</li>\n<li>每一路通道都配有一个采样保持放大器</li>\n<li>D/A 转换器只起数字信号到模拟信号的转换作用</li>\n<li>采样保持器实现模拟信号保持功能</li>\n<li>优点：节省 D/A 转换器</li>\n<li>缺点：电路复杂，精度差，可靠低，占用主机时间（为了使保持信号不至于下降太多需要不断刷新数据而占用主机时间）</li>\n</ul>\n<p>总结：现在，随着集成电路 D/A 转换器芯片价格不断下降，控制系统中的模拟信号输出通道<strong>普遍采用多 D/A 结构形式</strong>。</p>\n<h2 id=\"21-da转换器\"><a class=\"anchor\" href=\"#21-da转换器\">#</a> 2.1 D/A 转换器</h2>\n<ul>\n<li>分类：\n<ul>\n<li>按位数：\n<ul>\n<li>8 位</li>\n<li>10 位</li>\n<li>12 位</li>\n</ul>\n</li>\n<li>按输出形式：\n<ul>\n<li>电流输出型</li>\n<li>电压输出型</li>\n</ul>\n</li>\n<li>满足特殊需求的 D/A 转换器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"211-工作原理与性能指标\"><a class=\"anchor\" href=\"#211-工作原理与性能指标\">#</a> 2.1.1 工作原理与性能指标</h3>\n<h4 id=\"1da转换器的工作原理\"><a class=\"anchor\" href=\"#1da转换器的工作原理\">#</a> 1.D/A 转换器的工作原理</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128154006311.png\" alt=\"image-20211128154006311\" /></p>\n<p>以 4 位 D/A 转换器为例：</p>\n<p>D/A 转换器主要由基准电压 V&lt;sub&gt;REF&lt;/sub&gt;、R-2R T 型电阻网络、位切换开关 BS&lt;sub&gt;i&lt;/sub &gt; 和运算放大器 A 四部分构成。</p>\n<p>基准电压 V&lt;sub&gt;REF&lt;/sub &gt; 由外部稳压电源提供，位切换开关 BS&lt;sub&gt;3&lt;/sub&gt;~BS&lt;sub&gt;0&lt;/sub &gt; 分别接受要转换的二进制数 D&lt;sub&gt;3&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 的控制，当某一位 D&lt;sub&gt;i&lt;/sub&gt; = 1，则相应开关 BS&lt;sub&gt;i&lt;/sub &gt; 切换到 “1” 端（虚地），就会把基准电压 V&lt;sub&gt;REF&lt;/sub &gt; 加在该分支电阻 2R 上的电流 I&lt;sub&gt;i&lt;/sub &gt; 切换到放大器的反相端，此电流经反馈电阻 R&lt;sub&gt;fb&lt;/sub &gt; 直至输出端，从而把 D&lt;sub&gt;i&lt;/sub&gt; = 1 转换成相应的模拟电压 V&lt;sub&gt;OUT&lt;/sub &gt; 输出；而当 D&lt;sub&gt;i&lt;/sub&gt; = 0 时，BS&lt;sub&gt;i&lt;/sub &gt; 切换到 “0” 端（地），则电流 I&lt;sub&gt;i&lt;/sub &gt; 切换到放大器的正相端流入地中而对放大器输出不起作用。</p>\n<p>由于 T 型电阻网络中各个节点向右看地等效电阻均为 2R，因此各 2R 支路上的电流就按 1/2 系数进行分配，即：在各 2R 支路上产生与二进制数各位的权成比例的电流，并经运算放大器 A 相加，从而输出成比例关系的模拟电压 V&lt;sub&gt;OUT&lt;/sub&gt;。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128173634882.png\" alt=\"image-20211128173634882\" /></p>\n<h4 id=\"2da转换器性能指标\"><a class=\"anchor\" href=\"#2da转换器性能指标\">#</a> 2.D/A 转换器性能指标</h4>\n<p>衡量芯片质量的重要参数，也是选取 D/A 芯片型号的依据。</p>\n<ul>\n<li>\n<p>分辨率</p>\n<p>指 D/A 转换器能分辨的最小输出模拟增量，即当输入数字发生单位数码变化时所对应输出模拟量的变化量，它取决于能转换的二进制位数，数字量位数越多，分辨率也就越高。其分辨率与二进制位数 n 呈以下关系：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>分辨率</mtext><mo>=</mo><mfrac><mn>1</mn><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow></mfrac><mspace linebreak=\"newline\"></mspace><mtext>分辨力</mtext><mo>=</mo><mfrac><mtext>电压满量程</mtext><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">分辨率 = \\frac{1}{2^n - 1} \\\\\n分辨力 = \\frac{电压满量程}{2^n - 1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">分</span><span class=\"mord cjk_fallback\">辨</span><span class=\"mord cjk_fallback\">率</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">分</span><span class=\"mord cjk_fallback\">辨</span><span class=\"mord cjk_fallback\">力</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1296600000000003em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">电</span><span class=\"mord cjk_fallback\">压</span><span class=\"mord cjk_fallback\">满</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">程</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>转换精度</p>\n<p>指转换所得的实际值和理论值的接近程度，它可以用绝对误差和相对误差来表示。</p>\n<p>与分辨率时两个不同的概念。对于分辨率很高的 D/A 转换器，有可能由于温度漂移、线性度差等原因并不具有很高的精度。</p>\n<p>例如：满量程时的理论输出值为 10V，实际输出值为 9.99V~10.01V 之间，其转换精度为 ±10mV。</p>\n<p>对于分辨率很高的 D/A 转换器并不一定具有很高的精度。</p>\n</li>\n<li>\n<p>偏移量误差</p>\n<p>指输入数字量时，输出模拟量对于零的偏移值。此误差可通过 D/A 转换器外接的 V&lt;sub&gt;REF&lt;/sub &gt; 和电位器加以调整。</p>\n</li>\n<li>\n<p>稳定时间</p>\n<p>描述 D/A 转换速度快慢的一个参数，指从输入数字量到输出模拟量达到终值误差 1/2LSB（对应于满量程输出的 1/（2^n - 1）) 所需的时间。</p>\n<p>显然，稳定时间越大，转换速度越低。对于输出是电流的 D/A 转换器来说，稳定时间是很快的，约几微秒，而输出是电压的 D/A 转换器，其稳定时间主要取决于运算放大器的响应时间。</p>\n</li>\n</ul>\n<h3 id=\"212-8位dac0832芯片\"><a class=\"anchor\" href=\"#212-8位dac0832芯片\">#</a> 2.1.2 8 位 DAC0832 芯片</h3>\n<ul>\n<li>\n<p>性能：</p>\n<ul>\n<li>一个 8 位 D/A 转换器</li>\n<li>电流输出方式</li>\n<li>稳定时间为 1us</li>\n<li>采用 20 脚双立直插式封装</li>\n<li>同系列芯片还有 DAC0830、DAC0831</li>\n</ul>\n</li>\n<li>\n<p>工作原理</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128194548549.png\" alt=\"image-20211128194548549\" /></p>\n<p>DAC0832 主要由 8 位输入寄存器、8 位 DAC 寄存器、8 位 D/A 转换器以及输入控制电路四部分组成。</p>\n<ul>\n<li>\n<p>8 位输入寄存器：用于存放主机送来的数字量，使输入数字量得到缓冲和锁存，由 LE&lt;sub&gt;1&lt;/sub&gt;(上划线) 加以控制</p>\n</li>\n<li>\n<p>8 位 DAC 寄存器：用于存放待转换的数字量，由 LE&lt;sub&gt;2&lt;/sub&gt;(上划线) 加以控制</p>\n</li>\n<li>\n<p>8 位 D/A 转换器：输出与数字量成正比的模拟电流</p>\n</li>\n<li>\n<p>输入控制电路：由与门、非与门组成，控制两个寄存器的选通锁或锁存状态</p>\n</li>\n</ul>\n<p>各引脚功能：</p>\n<ul>\n<li>\n<p>DI&lt;sub&gt;0&lt;/sub&gt;~DI&lt;sub&gt;7&lt;/sub&gt;：数据输入线，其中 DI&lt;sub&gt;0&lt;/sub &gt; 为最低有效位 LSB，I&lt;sub&gt;7&lt;/sub &gt; 为 最高有效位 MSB。</p>\n</li>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mover accent=\"true\"><mrow><mi>C</mi><mi>S</mi></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{CS}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span></span></p>\n<p>片选信号，输入线，低电平有效。</p>\n</li>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mover accent=\"true\"><mrow><mi>W</mi><msub><mi>R</mi><mn>1</mn></msub></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{WR_1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.03333em;vertical-align:-0.15em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>写信号 1，输入线，低电平有效。</p>\n</li>\n<li>\n<p>ILE</p>\n<p>输入允许锁存信号，输入线，高电平有效。</p>\n<p>当 ILE、CS (上划线) 和 WR&lt;sub&gt;1&lt;/sub&gt;(上划线) 同时有效，8 位输入寄存器端为高电平”1“，此时寄存器的输入端 Q 跟随输入端 D 的电平变化；反之，当端为低电平”0“时，原 D 端输入数据被锁存于 Q 端，在此期间，D 端电平的变化不影响 Q 端。</p>\n</li>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mover accent=\"true\"><mrow><mi>X</mi><mi>F</mi><mi>E</mi><mi>R</mi></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{XFER}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span></span></p>\n<p>传送控制信号，输入线，低电平有效。</p>\n<p>当 WR&lt;sub&gt;2&lt;/sub&gt;(上划线) 和 XFER (上划线) 同时有效时，8 位 DAC 寄存器端为高电平”1“，此时 DAC 寄存器的输入端 Q 跟随输入端 D 也就是输入寄存器 Q 端的电平变化；反之，当端为低电平”0“时，第一级 8 位输入寄存器 Q 的状态则锁存到第二级 8 位 DAC 寄存器中，以便第三级 8 位 DAC 转换器进行 D/A 转换。</p>\n</li>\n<li>\n<p>I&lt;sub&gt;OUT1&lt;/sub&gt;</p>\n<p>DAC 电流输入端 1，一般作为运算放大器差动输入信号之一。</p>\n</li>\n<li>\n<p>I&lt;sub&gt;OUT2&lt;/sub&gt;</p>\n<p>DAC 电流输入 2，一般作为运算放大器另一个差动输入信号。</p>\n</li>\n<li>\n<p>R&lt;sub&gt;fb&lt;/sub&gt;</p>\n<p>固化在芯片内的反馈电阻连接端，用于连接运算放大器的输入端</p>\n</li>\n<li>\n<p>V&lt;sub&gt;REF&lt;/sub&gt;</p>\n<p>基准电压源端，输入线，-10VDC ~ + 10 VDC</p>\n</li>\n<li>\n<p>V&lt;sub&gt;C&lt;/sub&gt;</p>\n<p>工作电压源端，输入线，+ 5VDC ~ +15VDC</p>\n</li>\n<li>\n<p>AGND 和 DGND：模拟电路地与数字电路地，一般情况下，这两种地最后总有一点接在一起，以便提高抗干扰能力。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"213-12位dac1210芯片\"><a class=\"anchor\" href=\"#213-12位dac1210芯片\">#</a> 2.1.3  12 位 DAC1210 芯片</h3>\n<p>为了提高分辨率产生</p>\n<p>是一个 12 位 D/A 转换器，电流输出方式，其结构原理与控制信号功能基本类似于 DAC0832。由于它比 DAC0832 多了 4 条数据输入线，故有 24 条引脚。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128205015932.png\" alt=\"image-20211128205015932\" /></p>\n<ul>\n<li>\n<p>DAC1210 内部有三个寄存器：</p>\n<ul>\n<li>一个位输入寄存器，用于存放 12 位数字量中的高 8 位 DI&lt;sub&gt;11&lt;/sub&gt;~DI&lt;sub&gt;4&lt;/sub&gt;，一个 4 位输入寄存器，用于存放 12 位数字量中的低 4 位 DI&lt;sub&gt;3&lt;/sub&gt;~DI&lt;sub&gt;0&lt;/sub&gt;</li>\n<li>一个 12 位 DAC 寄存器，存放上述两个输入寄存器送来的 12 位数字量</li>\n<li>12 位 D/A 转换器用于完成 12 位数字量的转换。</li>\n</ul>\n<p>由与门、非与门组成的输入控制电路来控制 3 个寄存器的选通或锁存状态。其中引脚（片选信号、低电平有效）、（写信号、低电平有效）和 BYTE1/BYTE2 (上划线)（字节控制信号）的组合，用来控制 8 位输入寄存器和 4 位输入寄存器。</p>\n</li>\n<li>\n<p>当 CS (上划线)、WR&lt;sub&gt;1&lt;/sub&gt;(上划线) 为低电平”0“，BYTE1/BYTE2 (上划线) 为高电平”1“时，与门的输出 LE&lt;sub&gt;1&lt;/sub&gt;(上划线)、LE&lt;sub&gt;2&lt;/sub&gt;(上划线) 为”1“，选通 8 位和 4 位两个输入寄存器，将要转换的 12 位数据全部送入寄存器</p>\n<p>当 BYTE1/BYTE2 (上划线) 为低电平 &quot;0&quot; 时，LE&lt;sub&gt;1&lt;/sub &gt; 为 &quot;0&quot;，8 位输入寄存器锁存刚传送的 8 位数据，而 LE&lt;sub&gt;2&lt;/sub &gt; 仍为”1“，4 位输入寄存器仍为选通，新的低 4 位数据将刷新刚传送的 4 位数据。</p>\n<p><strong>因此，在与计算机接口电路中，计算机必须先送高 8 位后送低 4 位！！！</strong></p>\n<p>XFER (上划线)（传送控制信号、低电平有效）和 WR&lt;sub&gt;2&lt;/sub&gt;(上划线)（写信号、低电平有效）用来控制 12 位 DAC 寄存器，当它们都为低电平”0“时，与门输出 LE&lt;sub&gt;3&lt;/sub &gt; 为 &quot;1&quot;，12 位数据全部送入 DAC 寄存器；当它们中有一个为高电平”1“时，与门输出 LE&lt;sub&gt;3&lt;/sub &gt; 即为”0“，则 12 位 DAC 寄存器锁存住数据，使 12 位 D/A 转换器开始数模转换。</p>\n</li>\n</ul>\n<h2 id=\"22-接口电路\"><a class=\"anchor\" href=\"#22-接口电路\">#</a> 2.2 接口电路</h2>\n<p>为使主机能向 D/A 转换器传输数据，必须在两者之间设置接口电路。</p>\n<p>接口电路功能：进行地址译码、产生片选信号或写信号。</p>\n<h3 id=\"221-dac0832接口电路\"><a class=\"anchor\" href=\"#221-dac0832接口电路\">#</a> 2.2.1 DAC0832 接口电路</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211128211738733.png\" alt=\"image-20211128211738733\" /></p>\n<p>由于 DAC0832 内部有输入寄存器，所以它的数据总线可直接与主机的数据总线相连，所以它的数据总线可直接与主机的数据总线相连。</p>\n<p>图为 DAC0832 与 PC 总线的单缓冲接口电路，它是由 DAC0832 转换芯片、运算放大器以及 74LS138 译码器和门电路构成的地址译码电路组成。</p>\n<p>图中 DAC0832 内的 DAC 寄存器控制端的 WR&lt;sub&gt;2&lt;/sub&gt;(上划线) 和 XFER (上划线) 直接接地，使 DAC 寄存器的输入到输出始终直通；而输入寄存器的控制端分别受地址译码器信号与输入输出指令控制，即 PC 的地址线 A9~A0 经 138 译码器和门电路产生接口地址信号作为 DAC0832 的片选信号，输入输出写信号 IOW (上划线) 作为 DAC0832 的写信号 WR&lt;sub&gt;1&lt;/sub&gt;(上划线)。</p>\n<p>当需要进行 D/A 转换时，把被转换的数据如 DATA 送进累加器 AL，入口地址如 220H 送入 DX，然后执行一条 OUT 输出指令，则 CS (上划线) 和 WR&lt;sub&gt;1&lt;/sub&gt;(上划线)（IOW (上划线)）同为低电平，则 LE&lt;sub&gt;1&lt;/sub &gt; 为”1“，此时主机输出的数据写入 DAC0832 内的 8 位输入寄存器，再直通送入 D/A 转换器进行转换，当 IOW (上划线) 恢复为高电平时，使 D/A 转换的输出也保持不变。</p>\n<p>程序接口：</p>\n<pre><code>MOV DX,220H\nMOV AL,[DATA]\nOUT DX,AL\n</code></pre>\n<h3 id=\"222-dac1210接口电路\"><a class=\"anchor\" href=\"#222-dac1210接口电路\">#</a> 2.2.2 DAC1210 接口电路</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129154607461.png\" alt=\"image-20211129154607461\" /></p>\n<p>DAC 内部也有输入寄存器，但用 PC 中 8 位数据总线与 12 位 D/A 转换器组成接口电路时，需要对数据总线采用复用形式。</p>\n<p>上图是 12 位 D/A 转换器 DAC1210 转换芯片、运算放大器以及地址译码电路组成。与 8 位 DAC0832 接口电路不同的是，除了数据总线 D&lt;sub&gt;7&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 与 DAC 高 8 位 DI&lt;sub&gt;11&lt;/sub&gt;~DI&lt;sub&gt;4&lt;/sub &gt; 直接相连以外，D&lt;sub&gt;3&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 还要与 DAC1210 低 4 位 DI&lt;sub&gt;3&lt;/sub&gt;~DI&lt;sub&gt;0&lt;/sub &gt; 复用，因而控制电路也略为复杂。</p>\n<p>图中，CS (上划线)、WR&lt;sub&gt;1&lt;/sub&gt;(上划线) 和 BYTE1/BYTE2 (上划线) 组合，用来依次控制 8 位输入寄存器（LE&lt;sub&gt;1&lt;/sub&gt;(上划线)）和 4 位输入寄存器（LE&lt;sub&gt;2&lt;/sub&gt;(上划线)）的选通与锁存；WR&lt;sub&gt;2&lt;/sub&gt;(上划线) 和 XFER (上划线) 用来控制 DAC 寄存器（LE&lt;sub&gt;3&lt;/sub&gt;(上划线)）的选通与锁存；IOW (上划线) 与 WR&lt;sub&gt;1&lt;/sub&gt;~WR&lt;sub&gt;2&lt;/sub &gt; 连接，用来在执行输出指令时获得低电平 (有效)，译码器的两条输出线 Y&lt;sub&gt;0&lt;/sub&gt;(上划线)\\、Y&lt;sub&gt;2&lt;/sub&gt;(上划线) 分别连接到 CS (上划线)~XFER (上划线)，一条地址线 A&lt;sub&gt;0&lt;/sub &gt; 连接到 BYTE1/BYTE2 (上划线)，从而形成三个口地址：低 4 位输入寄存器为 380H；高 8 位输入寄存器为 381H;12 位 DAC 寄存器为 384H。</p>\n<p>在软件设计中，为了实现 8 位数据线 D&lt;sub&gt;0&lt;/sub&gt;~D&lt;sub&gt;7&lt;/sub &gt; 传送 12 位被转换数，主机须分两次传送被转换数。首先将被转换数的高 8 位传送给 8 位输入寄存器 DI&lt;sub&gt;11&lt;/sub&gt;~DI&lt;sub&gt;4&lt;/sub&gt;，再将低 4 位传给 4 位输入寄存器 DI&lt;sub&gt;3&lt;/sub&gt;~DI&lt;sub&gt;0&lt;/sub&gt;，然后再打开 DAC 寄存器，把 12 位数据送到 12 位 D/A 转换器去转换。当输出指令执行完成后，DAC 寄存器又自动处于锁存状态以保持 D/A 转换器的输出不变。设 12 位被转换数的高 8 位存放在 DATA 单元中，低 4 位存放在 DATA+1 单元中。</p>\n<pre><code>DAC:MOV DX,0381H # 高8位\n\tMOV AL,[DATA]\n\tOUT DX,AL\n\tMOV DX,[DATA+1] # 低4位\n\tOUT DX,AL\n\tMOV DX,0384H\n\tOUT DX,AL # 完成12位数据转换\n</code></pre>\n<h2 id=\"23-输出方式\"><a class=\"anchor\" href=\"#23-输出方式\">#</a> 2.3 输出方式</h2>\n<p>多数 D/A 转换芯片输出的是弱电流信号，要驱动后面的自动化装置，需要在电流输出端外接运算放大器。</p>\n<h3 id=\"231-电压输出方式\"><a class=\"anchor\" href=\"#231-电压输出方式\">#</a> 2.3.1 电压输出方式</h3>\n<p>由于系统要求不同，电压输出方式又分为单极性输出和双极性输出两种形式。</p>\n<h4 id=\"dac单极性输出\"><a class=\"anchor\" href=\"#dac单极性输出\">#</a> DAC 单极性输出</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129163732367.png\" alt=\"image-20211129163732367\" /></p>\n<h4 id=\"dac双极性输出\"><a class=\"anchor\" href=\"#dac双极性输出\">#</a> DAC 双极性输出</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129164331141.png\" alt=\"image-20211129164331141\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129164639328.png\" alt=\"image-20211129164639328\" /></p>\n<h3 id=\"232-电流输出方式\"><a class=\"anchor\" href=\"#232-电流输出方式\">#</a> 2.3.2 电流输出方式</h3>\n<p>因为电流信号易于远距离传送，且不易受干扰，特别是在过程控制系统中，自动化仪表只接收电流信号，所以在微机控制输出通道中常以电流信号来传送信息，这就需要将电压信号再转换成电流信号，完成电流输出方式的电路被称为 V/I 变换电路。电流输出方式一般有两种形式：</p>\n<ul>\n<li>普通运算 V/I 变换电路</li>\n<li>集成转换器 V/I 变换电路（高精度）</li>\n</ul>\n<h4 id=\"普通运算vi变换电路\"><a class=\"anchor\" href=\"#普通运算vi变换电路\">#</a> 普通运算 V/I 变换电路</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129185616846.png\" alt=\"image-20211129185616846\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129185755348.png\" alt=\"image-20211129185755348\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129185927930.png\" alt=\"image-20211129185927930\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129190219797.png\" alt=\"image-20211129190219797\" /></p>\n<h4 id=\"集成转换器vi变换电路\"><a class=\"anchor\" href=\"#集成转换器vi变换电路\">#</a> 集成转换器 V/I 变换电路</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129190649268.png\" alt=\"image-20211129190649268\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129190702464.png\" alt=\"image-20211129190702464\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129190822417.png\" alt=\"image-20211129190822417\" /></p>\n<h3 id=\"233-自动手动输出方式\"><a class=\"anchor\" href=\"#233-自动手动输出方式\">#</a> 2.3.3 自动 / 手动输出方式</h3>\n<p>在计算机过程控制中，除了正常运行的自动控制方式以外，在开、停车或事故情况下还需要进行手动控制方式，在自动 / 手动控制方式切换的瞬间，必须保持系统输出信号不变，才能对执行器的现有位置不产生扰动，即达到双向切换时平衡对位的无扰动切换。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129191323875.png\" alt=\"image-20211129191323875\" /></p>\n<p>在普通运算放大器 V/I 变换电路的基础上，增加了自、手动切换开关 K1、K2、K3 和手动增减电路与输出跟踪电路。</p>\n<ul>\n<li>\n<p>自动 / 手动状态下的 V/I 变换</p>\n<ul>\n<li>\n<p>当开关处于自动（A）状态时，运算放大器 A2 与 A1 接通，形成一个电压比较型跟随器。当 V&lt;sub&gt;f&lt;/sub&gt;≠V&lt;sub&gt;i&lt;/sub &gt; 时，电路能自动地使输出电流增大或减小，最终使 V&lt;sub&gt;f&lt;/sub&gt;=V&lt;sub&gt;i&lt;/sub&gt;，于是有：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>I</mi><mi>L</mi></msub><mo>=</mo><msub><mi>V</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mn>9</mn></msub><mo>+</mo><msub><mi>R</mi><mi>P</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">I_L = V_i / (R_9 + R_P)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>可以看出：只要电阻 R&lt;sub&gt;9&lt;/sub&gt;、R&lt;sub&gt;P&lt;/sub &gt; 稳定性好，A&lt;sub&gt;1&lt;/sub&gt;、A&lt;sub&gt;2&lt;/sub &gt; 具有较好的增益，该电路就有较高的线性精度。当 R&lt;sub&gt;9&lt;/sub&gt;+R&lt;sub&gt;P&lt;/sub&gt; = 500Ω 或 250Ω 时，输出电流 I&lt;sub&gt;L&lt;/sub &gt; 就以 0mA~10mA 或 4mA~20mA 的直流信号线性地对应 V&lt;sub&gt;i&lt;/sub &gt; 的 0V~5V 或 1V~5V 的直流电压信号。</p>\n</li>\n<li>\n<p>当开关处于手动（H）状态时，此时运放 A&lt;sub&gt;1&lt;/sub &gt; 与 A&lt;sub&gt;2&lt;/sub &gt; 断开，成为一个保持型反相积分器。当按下 “增” 按钮时，V&lt;sub&gt;2&lt;/sub &gt; 以一定的速率上升，从而使 I&lt;sub&gt;L&lt;/sub &gt; 也以同样的速率上升；当按下 “减” 按钮时，V&lt;sub&gt;2&lt;/sub &gt; 以一定的速率下降，I&lt;sub&gt;L&lt;/sub &gt; 也以同样的速率下降。<strong>负载 R&lt;sub&gt;L&lt;/sub&gt;（一般为电动调节阀）上的电流 I&lt;sub&gt;L&lt;/sub &gt; 的升降速率取决于<em> R</em>6、<em>R</em>7、C 和电源电压 ±E 的大小，而手动操作按钮的时间长短决定输出电流 I&lt;sub&gt;L&lt;/sub &gt; 的大小。</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p>自动 / 手动双向无扰动切换</p>\n<ul>\n<li>\n<p>自动到手动的切换：当开关 S1、S2、S3 都从自动（A）切换为手动（H），“增”、“减” 两处按钮处于断开状态，运算放大器 A&lt;sub&gt;2&lt;/sub &gt; 为一高输入阻抗保持器，则 A&lt;sub&gt;2&lt;/sub &gt; 的输出 V&lt;sub&gt;2&lt;/sub &gt; 几乎保持不变，从而维持输出电流 I&lt;sub&gt;L&lt;/sub &gt; 恒定。因此，自动到手动的无扰动切换是由手动操作电路的硬件实现的。</p>\n</li>\n<li>\n<p>手动到自动的切换：当开关 S1、S2、S3 手动（H）切换为自动（A）时，要做到无扰动切换必须使自动输出电路具有跟踪手动输出的功能，即在手动状态下，使来自计算机 D/A 转换电路的自动输入信号 V&lt;sub&gt;i&lt;/sub &gt; 始终等于反映手动输出的信号 V&lt;sub&gt;f&lt;/sub&gt;（V&lt;sub&gt;f&lt;/sub &gt; 和 I&lt;sub&gt;L&lt;/sub &gt; 总是一一对应的）。要达到这个目的，必须有上图所示的硬件电路与相应的跟踪程序配合。</p>\n<p>工作过程：在每个控制周期，计算机首先由数字量输入通道（DI）读入开关 S&lt;sub&gt;2&lt;/sub &gt; 的状态，以判断输出电路是处于手动状态还是自动状态：若是自动状态，则程序执行本回路预先规定的控制运算，输出 V&lt;sub&gt;i&lt;/sub &gt; 并通过 V/I 变换输出电流 I&lt;sub&gt;L&lt;/sub&gt;；若为手动状态，则首先由 A/D 通道读入 V&lt;sub&gt;f&lt;/sub &gt; 并转换为数字信号，然后原封不动地将此数字信号送出，由 D/A 转换为电压信号送至输出电路的输入端 V&lt;sub&gt;i&lt;/sub&gt;，这样就使 V&lt;sub&gt;i&lt;/sub &gt; 始终与 V&lt;sub&gt;f&lt;/sub &gt; 相等。当开关 S1 从手动（H）切换为自动（A）是，由于 V&lt;sub&gt;i&lt;/sub&gt;≡V&lt;sub&gt;f&lt;/sub&gt;，所以 V2 与 I&lt;sub&gt;L&lt;/sub &gt; 都保持不变，从而实现了手动到自动的无扰动切换。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"24-da转换模板\"><a class=\"anchor\" href=\"#24-da转换模板\">#</a> 2.4 D/A 转换模板</h2>\n<p>将上述 D/A 转换器芯片及其接口以及输出电路组合集成在一块模板上，就构成了计算机控制系统中的 D/A 转换模板。</p>\n<h3 id=\"241-da转换模板的通用性\"><a class=\"anchor\" href=\"#241-da转换模板的通用性\">#</a> 2.4.1 D/A 转换模板的通用性</h3>\n<ul>\n<li>\n<p>符合总线标准</p>\n<p>指计算机内部的总线结构，D/A 转换模板及其他所有电路模板都应符合统一的总线标准。</p>\n</li>\n<li>\n<p>接口地址可选</p>\n<p>一套控制系统往往需要配置多块功能模板，或者同一功能模板可能被组合在不同系统中。因此，每块模板应具有接口地址的可选性。</p>\n<p>一般接口地址可由基址（或称板址）和片址（或称口地址）组成。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129203324913.png\" alt=\"image-20211129203324913\" /></p>\n<p>上图为一种可选的译码电路，8 位量值比较器 74LS688、地址 A3~A7、置位开关 S 与上拉电阻组成基址译码电路，74LS138 译码器、地址 A0~A2 构成片址译码电路。只有当 P&lt;sub&gt;i&lt;/sub&gt; = Q&lt;sub&gt;i&lt;/sub&gt;(i = 1,2,3……7) 时，它的输出端 P = Q 为有效低电位从而使 74LS138 译码器处于工作状态，产生由相应片址 A0~A2 确定的片选信号 WC0~WC7，该片选信号可分别作为多 D/A 结构中 8 个 D/A 转换器的片选信号 CS (下划线) 或写信号 WR&lt;sub&gt;1&lt;/sub&gt;(下划线)。</p>\n<p>而基址 A7~A3 的确定，完全取决于置位开关 S7~S3 的通断状态，其基址可在 00000xxx~11111xxx 范围内任意选定。上图中，S7、S6 闭合，S5、S4、S3 断开，即确定该板的基址为 00111xxx，则该板 8 个片址最终确定了 8 个 D/A 通道的口地址为 00111000~00111111，即：38H~3FH</p>\n</li>\n<li>\n<p>输出方式可选</p>\n<p>为了适应不同控制系统对执行器的不同需求，D/A 转换模板往往把各种电压输出和电流输出方式组合在一起，<strong>然后通过短接柱来选定某一种输出方式</strong>。</p>\n<p>一个实际的 D/A 转换模板，供用户选择的输出范围常常是：0~5V、0~10V、±5V、0~10mA、4~20mA 等。</p>\n</li>\n</ul>\n<h3 id=\"242-da转换模板的设计举例\"><a class=\"anchor\" href=\"#242-da转换模板的设计举例\">#</a> 2.4.2 D/A 转换模板的设计举例</h3>\n<p>D/A 转换模板设计主要考虑以下几点：</p>\n<ul>\n<li>\n<p>安全可靠</p>\n<p>尽量选用性能好的元器件，并采用光电隔离技术。</p>\n</li>\n<li>\n<p>性能 / 性价比高</p>\n<p>既要在性能上达到预定的技术指标，又要在技术路线、芯片元件上降低成本。</p>\n</li>\n<li>\n<p>通用性</p>\n<p>D/A 转换模板应符合总线标准，其接口地 址及输出方式应具备可选性。</p>\n</li>\n</ul>\n<p>D/A 模板转换设计步骤：</p>\n<ul>\n<li>确定性能指标</li>\n<li>设计电路原理图</li>\n<li>设计和制造印制线路板</li>\n<li>最后焊接和调试电路板</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129205912003.png\" alt=\"image-20211129205912003\" /></p>\n<p>图 2-15 给出了 8 路 8 位 D/A 转换模板的结构组成框图，它是按照总线接口逻辑、I/O 功能逻辑和 I/O 电气接口等三部分布局电子元器件的。图中，<strong>总线接口逻辑部分主要由数据缓冲与地址译码电路组成，完成 8 路通道的分别选通与数据传送</strong>（参见图 2-14 接口地址可选的译码电路）；I/O 功能逻辑部分由 8 片 DAC0832 组成，<strong>完成数模转换</strong>（参见图 2-5DAC0832 接口电路）；而<strong> I/O 电气接口部分由运算放大器与 V/I 变换电路组成，实现电压或电流信号的输出</strong>（参见图 2-8 的双极性电压输出方式与图 2-9 的电流输出方式）。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMTI5MjExNjA2MTM2LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211129211606136.png</span>&quot; alt=&quot;image-20211129211606136&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h2 id=\"考试要求\"><a class=\"anchor\" href=\"#考试要求\">#</a> 考试要求</h2>\n<p>掌握 DA 原理 判断 简答</p>\n<p>DA 转换器的性能指标<br />\n DA 大题 电路分析（8 位 / 12 位）地址分析 根据需要设计电路</p>\n<p>输出方式：重点掌握自动手动输出切换</p>\n<p>电路分析不考察</p>\n<h2 id=\"课后习题\"><a class=\"anchor\" href=\"#课后习题\">#</a> 课后习题</h2>\n<p>1、画图说明模拟量输出通道的功能、各组成部分及其作用。</p>\n<p>2、D/A 转换器的性能指标有哪些？</p>\n<p><strong>3、结合图 2-3，分析说明 DAC0832 的内部结构组成及其作用。</strong></p>\n<p>4、结合图 2-5 分析说明由 DAC0832 组成的单缓冲接口电路的工作过程，编写完成一次 D/A 转换的接口程序。</p>\n<p>5、结合图 2-6 分析说明由 DAC1210 组成的接口电路的工作过程，编写完成一次 D/A 转换的接口程序。</p>\n<p>6、简单说明 D/A 转换输出电路有几种输出方式。</p>\n<p><strong>7、结合图 2-13 分析说明自动 / 手动双向无扰动切换过程。</strong></p>\n<p>8、结合图 2-14 分析说明基址与片址的译码过程。</p>\n<p>9、结合图 2-15 分析说明 D/A 转换模板的结构组成及各部分逻辑功能。</p>\n<h1 id=\"第3章-模拟量输入通道\"><a class=\"anchor\" href=\"#第3章-模拟量输入通道\">#</a> 第 3 章 模拟量输入通道</h1>\n<h2 id=\"引言部分-2\"><a class=\"anchor\" href=\"#引言部分-2\">#</a> 引言部分</h2>\n<p>本章要点：</p>\n<p>1．模拟量输入通道的结构组成。</p>\n<p>2．多路开关，前置放大、采样保持等各环节的功能作用。</p>\n<p>3．8 位 A/D 转换器 ADC0809 芯片及其接口电路。</p>\n<p>4．12 位 A/D 转换器 AD574A 芯片及其接口电路。</p>\n<p>模拟量输入通道的任务：将被控对象的过程参数如温度、压力、流量、液体、重量等模拟量转换成计算机可以接收的数字量信号。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130151014344.png\" alt=\"image-20211130151014344\" /></p>\n<p>来自于工业现场传感器或变送器的多个模拟信号量首先需要进行信号调理，然后经多路模拟开关，分时切换到后级进行前置放大、采样保持和 A/D 转换，通过接口电路以数字信号量进入主机系统，从而完成对过程参数的巡回检测任务。</p>\n<p>显然，该通道的核心是 A/D 转换器，通常把模拟信号量输入通道称为 A/D 通道或 AI 通道。</p>\n<h2 id=\"31-信号调理电路不考大题\"><a class=\"anchor\" href=\"#31-信号调理电路不考大题\">#</a> 3.1 信号调理电路 (不考大题)</h2>\n<p>在模拟输入通道中，对现场可能引入的各种干扰，必须采取相应的技术措施以保证 A/D 转换的精度，所以首先要在输入通道之前设置输入信号调理电路。</p>\n<p>根据通道需要，可以采取不同的信号调理技术，如：信号滤波、光电隔离、电平转换、过电压保护、反电压保护、电流 / 电压变换等。</p>\n<p>在控制系统中，对被控量的检测往往采用各种类型的测量变送器，当它们的输出信号为 0 - 10 mA 或 4 -20 mA 的电流信号时，一般是采<strong>用电阻分压法</strong>把现场传送来的<strong>电流信号转换为电压信号</strong>，以下是两种变换电路：</p>\n<ul>\n<li>\n<p>无源 I/V 变换</p>\n<p>构成：无源器件电阻＋（RC 滤波＋二极管限幅）等保护</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130153113342.png\" alt=\"image-20211130153113342\" /></p>\n<p>取值:</p>\n<ul>\n<li>\n<p>输入 0- 10 mA，输出为 0 -5 V ，R1=100Ω，R2=500Ω；</p>\n</li>\n<li>\n<p>输入 4 -20 mA，输出为 1 - 5 V，R1=100Ω，R2=250Ω；</p>\n</li>\n</ul>\n</li>\n<li>\n<p>有源 I/V 变换</p>\n<p>构成：有源器件运算放大器＋电阻、电容组成</p>\n<p>利用<strong>同相放大电路</strong>，把电阻 R1 上的输入电压变成标准输出电压，该同相放大电路的放大倍数：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMTMwMTU0NzQ3NjkwLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130154747690.png</span>&quot; alt=&quot;image-20211130154747690&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>取值：</p>\n<ul>\n<li>R1=200Ω，R3=100kΩ，R4=150kΩ 输入 0 ~ 10 mA 输出 0 ~ 5 V</li>\n<li>R1=200Ω，R3=100kΩ，R4=25kΩ 输入 4 ~ 20 mA 输出 1 ~ 5 V</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"32-多路模拟开关\"><a class=\"anchor\" href=\"#32-多路模拟开关\">#</a> 3.2 多路模拟开关</h2>\n<p>由于计算机工作速度远远快于被测参数的变化，因此一台计算机系统可供几十个检测回路使用，但计算机在某一时刻只能接收一个回路信号。因此，必须通过多路模拟开关实现多选 1 的操作，将多路输入信号依次切换到后级。</p>\n<p>目前计算机控制系统使用的多路开关种类很多，并具有不同的功能和用途。如：集成电路芯片 CD4051 (双向、单端、8 路)、CD4052 (单向、双端、4 路)、AD7506 (单向、单端、16 路) 等。</p>\n<p>双向：该芯片既可以实现多到一的切换，也可以完成一到多的切换；而单向则只能完成多到一的切换。</p>\n<p>双端：指芯片内的一对开关同时动作，从而完成差动输入信号的切换，以满足抑制共模干扰的需要。</p>\n<h3 id=\"321-结构原理\"><a class=\"anchor\" href=\"#321-结构原理\">#</a> 3.2.1 结构原理</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130160155871.png\" alt=\"image-20211130160155871\" /></p>\n<p>8 路模拟开关</p>\n<p>构成：电平转换、译码驱动、开关电路</p>\n<p>当禁止端 INH (上划线) 为 “1” 时，前后级通道断开，即：S0~S7 端不可能接通；当 INH (上划线) 为 “0” 时，则通道可以被接通，通过改变控制输入端 C、B、A 的数值，就可以选通 8 个通道 S0~S7 中的一路。比如：当 CBA = 000 时，通道 S0 选通；CBA = 001 时，通道 S1 选通；……；当 CBA = 111，通道 S7 选通。</p>\n<p>见书 3-1 真值表</p>\n<h3 id=\"322-扩展电路\"><a class=\"anchor\" href=\"#322-扩展电路\">#</a> 3.2.2 扩展电路</h3>\n<p>当采样通道多至 16 路，可直接选用 16 路模拟开关的芯片，也可以将 2 个 8 路 CD4051 并联起来，组成一个单端 16 路开关。</p>\n<p>例：试用两个 CD4051 扩展成一个 1x16 路的模拟开关。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130161038650.png\" alt=\"image-20211130161038650\" /></p>\n<p>数据总线 D3~D0 作为通道选择信号，D3 用来控制两个多路开关的禁止端 INH (下划线)。当 D3 = 0 时，选中上面的多路开关，当 D2、D1、D0 从 000 变为 111 时，依次选通 S0~S7 通道；当 D3 = 1，经反相器变成低电平，选中下面的多路开关，此时当 D2、D1、D0 从 000 变为 111，则依次选通 S8~S15 通道。</p>\n<h2 id=\"33前置放大器\"><a class=\"anchor\" href=\"#33前置放大器\">#</a> 3.3 前置放大器</h2>\n<h3 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h3>\n<p>前置放大器的任务：将输入模拟小信号放大到 A/D 转换的量程范围 ，如 0-5VDC;</p>\n<p>对于单纯的微弱信号，可以用一个运算放大器进行单端同相放大或单端反向。</p>\n<p>下图 (a)，信号源的一端若接放大器的正端，则为同相放大，同相放大倍数 G = 1 + R2 / R1。</p>\n<p>下图 (b)，信号源的一端接放大器的负端，则为反相放大，反相放大电路的放大倍数 G = -R2 / R1</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130162307356.png\" alt=\"image-20211130162307356\" /></p>\n<p>当然，这两种电路都是单端放大，所以信号源的另一端是与放大器的另一个输入端共地。</p>\n<h3 id=\"331-测量放大器\"><a class=\"anchor\" href=\"#331-测量放大器\">#</a> 3.3.1 测量放大器</h3>\n<p>来自生产现场的传感器信号往往带有共模干扰，而单个运算放大器的差动输入端难以起到很好的抑制作用。因此，A/D 通道中的前置放大器常采用由一组运算放大器构成的测量放大器，也称仪表放大器，如下图。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130165127045.png\" alt=\"image-20211130165127045\" /></p>\n<p>经典的测量放大器由三个运算放大器组成对称结构，测量放大器的差动输入端 V&lt;sub&gt;IN+&lt;/sub &gt; 和 V&lt;sub&gt;IN-&lt;/sub &gt; 分别是两个运算放大器 A1、A2 的同相输入端，输入阻抗很高，而且完全对称地直接与被测信号相连，因而有极强的抑制共模干扰能力。</p>\n<p>增益公式：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130165924767.png\" alt=\"image-20211130165924767\" /></p>\n<h3 id=\"332-可变增益放大器\"><a class=\"anchor\" href=\"#332-可变增益放大器\">#</a> 3.3.2 可变增益放大器</h3>\n<p>在 A/D 转换通道中，多路被测信号经常共用一个测量放大器，而各路的输入信号大小往往不同，但都要放大到 A/D 转换器的同一量程范围。因此对于不同大小的输入信号，测量放大器的增益也应不相同。具有这种性能的放大器称为可变增益放大器或可编程放大器，如下图。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130170357067.png\" alt=\"image-20211130170357067\" /></p>\n<p>把 (a) 图中的外接电阻换成一组精密的电阻网络，每个电阻支路上有一个开关，通过支路开关依次通断就可以改变放大器的增益，根据开关支路上的电阻值与增益公式，就可以算得支路开关自上而下闭合时的放大器增益分别为 2、4、8、16、32、64、128、256 倍。显然这组开关如果用多路模拟开关就可以方便地进行增益可变地计算机数字程序控制，此类集成电路芯片有 AD612/AD614 等。</p>\n<p>另外，还可以用数字电位器代替增益电阻，同样通过编程控制电位器阻值，使其放大倍数接近连续化。此类集成芯片有 X9313、X9511、MAX5161。</p>\n<h2 id=\"34采样保持器\"><a class=\"anchor\" href=\"#34采样保持器\">#</a> 3.4 采样保持器</h2>\n<p>当某一通道进行 A/D 转换时，<strong>由于 A/D 转换需要一定时间，如果输入信号变化较快，就会引起较大的转换误差</strong>。为了保证转换的精度，需要应用采样保持器。</p>\n<h3 id=\"341-采样定理\"><a class=\"anchor\" href=\"#341-采样定理\">#</a> 3.4.1 采样定理</h3>\n<p>以一定时间间隔对连续的信号进行采样，使连续信号转换为时间上离散的、幅值上连续的脉冲序列的过程称为采样过程。</p>\n<p>把连续变化的量变成离散量后再进行处理的计算机控制系统，称为采样数据系统或离散系统。</p>\n<ul>\n<li>离散系统的采样形式：\n<ul>\n<li>周期采样（应用最多）</li>\n<li>多阶采样</li>\n<li>随机采样</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130173017036.png\" alt=\"image-20211130173017036\" /></p>\n<p>采样开关每次闭合的时间称为采样时间或采样宽度，采样开关每次通断的时间间隔称为采样周期 T。</p>\n<p>香农定理：为了使采样信号 f&lt;sup&gt;*&lt;/sup&gt;(t) 能完全复现原信号 f (t)，采样频率 f&lt;sub&gt;s&lt;/sub &gt; 至少要为原信号最高有效频率 f&lt;sub&gt;max&lt;/sub &gt; 的两倍，即：f&lt;sub&gt;s&lt;/sub&gt;≥2f&lt;sub&gt;max&lt;/sub&gt;</p>\n<p>若选择的频率对连续信号所含的最高频率来说，能做到在其一个周期内采样两次以上，则在采样获得的脉冲序列中将包含连续信号的全部信息。反之，若采样信号次数太少，就做不到无失真地再现原连续信号。</p>\n<p>实际：f&lt;sub&gt;s&lt;/sub&gt;≥（5~10）f&lt;sub&gt;max&lt;/sub&gt;</p>\n<h3 id=\"342-零阶采样保持器\"><a class=\"anchor\" href=\"#342-零阶采样保持器\">#</a> 3.4.2 零阶采样保持器</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130174527339.png\" alt=\"image-20211130174527339\" /></p>\n<p>在两次采样时间间隔内，根据采样信号而复现原信号的装置被称为保持器。当用<strong>常数、线性函数和抛物线函数</strong>去逼近两个相邻采样时间的原信号时，分别称为<strong>零阶、一阶、高阶采样保持器</strong>。</p>\n<p>零阶采样保持器是最常用的一种信号保持器，它在两次采样的间隔时间内，一直保持采样值不变，直到下一个采样时刻，如上图所示，采样保持器由输入 / 输出缓冲放大器 A1、A2 和采样开关 S、保持电容 C&lt;sub&gt;H&lt;/sub &gt; 等组成。</p>\n<p>采样期间，开关 S 闭合，输入电压 V&lt;sub&gt;IN&lt;/sub &gt; 通过 A1 对 C&lt;sub&gt;H&lt;/sub &gt; 快速充电，输出电压 V&lt;sub&gt;OUT&lt;/sub &gt; 跟随 V&lt;sub&gt;IN&lt;/sub &gt; 变化；保持期间，开关 S 断开，由于 A2 的输入阻抗很高，理想情况下电容 C&lt;sub&gt;H&lt;/sub &gt; 将保持电压 V&lt;sub&gt;C&lt;/sub &gt; 不变，因而输出电压 V&lt;sub&gt;OUT&lt;/sub&gt; = V&lt;sub&gt;IN&lt;/sub &gt; 也保持恒定。</p>\n<p>显然，保持电容 C&lt;sub&gt;H&lt;/sub &gt; 的作用很重要。实际上，保持期间的电容保持电压 V&lt;sub&gt;C&lt;/sub &gt; 在慢慢下降，这是由于保持电容的漏电流所致。保持电压的变化率：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mi>d</mi><msub><mi>V</mi><mi>C</mi></msub></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><msub><mi>I</mi><mi>D</mi></msub><msub><mi>C</mi><mi>H</mi></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dV_C}{dt} = \\frac{I_D}{C_H}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.19633em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>I&lt;sub&gt;D&lt;/sub &gt; 是保持期间电容总泄漏电流，它包括放大器的输入电流、开关截止时的漏电流等。增大电容 C&lt;sub&gt;H&lt;/sub &gt; 可以减小电压变化率，但同时又会增加充电即采样时间，因此保持电容的容量大小与采样精度成正比而与采样频率成反比。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130194620579.png\" alt=\"image-20211130194620579\" /></p>\n<p>常见的零阶采样保持器有：AD582 (图 a)、LF198/LF298/LF398 (图 b)。这里用<strong> TTL 逻辑电平</strong>控制采样和保持状态：当 LF198/LF298/LF398 的引脚 8 为低电平时，开关 S 断开，电路进入保持状态。AD582 的控制逻辑与之相反。</p>\n<p>在 A/D 通道中，采样保持器的采样和保持电平与后级的 A/D 转换相配合，该电平信号既可以由其他控制电路产生，也可以由 A/D 转换器直接提供。总之采样器在采样期间，不启动 A/D 转换器，而一旦进入保持期间，则立即启动 A/D 转换器，从而保证 A/D 转换时的模拟输入电压恒定，以确保 A/D 转换的精度。</p>\n<h2 id=\"35-ad转换器\"><a class=\"anchor\" href=\"#35-ad转换器\">#</a> 3.5 A/D 转换器</h2>\n<p>A/D 转换器能把输入的模拟电压变成与它成正比的数字量，即能把被控对象的各种模拟信息变成计算机可以识别的数字信息。</p>\n<h3 id=\"351-工作原理和性能指标\"><a class=\"anchor\" href=\"#351-工作原理和性能指标\">#</a> 3.5.1 工作原理和性能指标</h3>\n<ul>\n<li>\n<p>逐位逼近式 A/D 转换</p>\n<p>速度较快，精度也较高，目前应用最多的一种。</p>\n</li>\n<li>\n<p>双积分式 A/D 转换</p>\n<p>转换速度慢，但转换精度高，多用于数据采集系统</p>\n</li>\n<li>\n<p>电压 / 频率式 A/D 转换</p>\n<p>接口原理简单，转换速度较慢，但精度较高，适合于远距离的数据传送。</p>\n</li>\n</ul>\n<h4 id=\"逐位逼近式ad转换原理重点\"><a class=\"anchor\" href=\"#逐位逼近式ad转换原理重点\">#</a> 逐位逼近式 A/D 转换原理（重点）</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130201022203.png\" alt=\"image-20211130201022203\" /></p>\n<p>1 个 n 位 A/D 转换器是由：逐位逼近寄存器、D/A 转换器、比较器、控制时序和逻辑电路、数字量输出锁存器五部分组成。</p>\n<p>现以 4 位 A/D 转换器把模拟量 9 转换为二进制 1001 为例，说明诸位逼近式 A/D 转换器工作原理：</p>\n<p>如上图，当启动信号作用后，时钟信号在控制逻辑作用下，首先使逐位逼近寄存器的最高位 D&lt;sub&gt;3&lt;/sub&gt;=1，其余为 0，此时数字量 1000 经 D/A 转换器转换成模拟量即：V&lt;sub&gt;0&lt;/sub&gt; = 8，送到比较器的输入端与被转换的模拟量 V&lt;sub&gt;IN&lt;/sub&gt; = 9 进行比较，控制逻辑根据比较器的输出进行判断。若 V&lt;sub&gt;IN&lt;/sub&gt; ≥V &lt;sub&gt;0&lt;/sub&gt;，则保留 D&lt;sub&gt;3&lt;/sub&gt;；再对下一位 D2 进行比较，同样先使 D&lt;sub&gt;2&lt;/sub&gt; = 1，与上一位 D&lt;sub&gt;3&lt;/sub &gt; 一起即 1100 进入 D/A 转换器，转换为 V&lt;sub&gt;0&lt;/sub&gt; = 12 再进入比较器，与 V&lt;sub&gt;IN&lt;/sub &gt; 进行比较，因为 V&lt;sub&gt;IN&lt;/sub&gt; ＜V &lt;sub&gt;0&lt;/sub&gt;，所以使 D&lt;sub&gt;2&lt;/sub&gt; = 0；再下一位 D&lt;sub&gt;1&lt;/sub &gt; 位也是如此，D&lt;sub&gt;1&lt;/sub&gt; = 1，经 D/A 转换为 V&lt;sub&gt;0&lt;/sub&gt; = 10，因为 V&lt;sub&gt;IN&lt;/sub&gt; ＜V &lt;sub&gt;0&lt;/sub&gt;，所以使 D&lt;sub&gt;1&lt;/sub&gt; = 0；最后一位 D&lt;sub&gt;0&lt;/sub&gt; = 1，经 D/A 转换为 V&lt;sub&gt;0&lt;/sub&gt; = 9，再与 V&lt;sub&gt;IN&lt;/sub &gt; 进行比较，因为 V&lt;sub&gt;IN &lt;/sub&gt; ≥ V &lt;sub&gt;0&lt;/sub&gt;，故保留 D&lt;sub&gt;0&lt;/sub&gt; = 1。比较结束，逐位逼近寄存器中的数字量 1001 极为模拟量 9 的转换结果，存在数字输出锁存器中等待输出。</p>\n<p>一个 n 位 A/D 转换器的 A/D 转换表达式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>B</mi><mo>=</mo><mfrac><mrow><msub><mi>V</mi><mrow><mi>I</mi><mi>N</mi></mrow></msub><mo>−</mo><msub><mi>V</mi><mrow><mi>R</mi><mo>−</mo></mrow></msub></mrow><mrow><msub><mi>V</mi><mrow><mi>R</mi><mo>+</mo></mrow></msub><mo>−</mo><msub><mi>V</mi><mrow><mi>R</mi><mo>−</mo></mrow></msub></mrow></mfrac><mo>×</mo><msup><mn>2</mn><mi>n</mi></msup><mspace linebreak=\"newline\"></mspace><mi>B</mi><mtext>：转换后的输出数字量</mtext><mspace linebreak=\"newline\"></mspace><msub><mi>V</mi><mrow><mi>I</mi><mi>N</mi></mrow></msub><mtext>：要转换的输入模拟量</mtext><mspace linebreak=\"newline\"></mspace><msub><mi>V</mi><mrow><mi>R</mi><mo>+</mo></mrow></msub><mtext>、</mtext><msub><mi>V</mi><mrow><mi>R</mi><mo>−</mo></mrow></msub><mtext>：基准电压源的正、负输入。</mtext></mrow><annotation encoding=\"application/x-tex\">B = \\frac{V_{IN} - V_{R-}}{V_{R+} - {V_{R-}}} × 2^n\\\\\nB：转换后的输出数字量\\\\\nV_{IN}：要转换的输入模拟量\\\\\nV_{R+}、V_{R-}：基准电压源的正、负输入。\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.254661em;vertical-align:-0.894331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mtight\">−</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mtight\">−</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.894331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7143919999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">换</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">出</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">量</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">换</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">拟</span><span class=\"mord cjk_fallback\">量</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mtight\">+</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mtight\">−</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">基</span><span class=\"mord cjk_fallback\">准</span><span class=\"mord cjk_fallback\">电</span><span class=\"mord cjk_fallback\">压</span><span class=\"mord cjk_fallback\">源</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">正</span><span class=\"mord cjk_fallback\">、</span><span class=\"mord cjk_fallback\">负</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">。</span></span></span></span></span></p>\n<p>即：当基准电压源确定后，n 位 A/D 转换器的数字输出量 B 与要转换的输入模拟量 V&lt;sub&gt;IN&lt;/sub &gt; 成正比。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130205208472.png\" alt=\"image-20211130205208472\" /></p>\n<p>此种 A/D 转换器的常用品种有普通型 8 位单路 ADC0801～ADC0805、8 位 8 路 ADC0808/0809、8 位 16 路 ADC0816/0817 等，混合集成高速型 12 位单路 AD574A、ADC803 等。</p>\n<h4 id=\"双积分式ad转换原理\"><a class=\"anchor\" href=\"#双积分式ad转换原理\">#</a> 双积分式 A/D 转换原理</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130205331050.png\" alt=\"image-20211130205331050\" /></p>\n<p>上图为原理图，在转换开始信号控制下，开关接通模拟输入端，输入的模拟电压 V&lt;sub&gt;IN&lt;/sub &gt; 在固定时间 T 内对积分器上的电容 C 开始充电 (正向积分)，时间一到，控制逻辑将开关切换到与 V&lt;sub&gt;IN&lt;/sub &gt; 极性相反的基准电源上，此时电容 C 开始放电 (反向积分)，同时计数器开始计数。当比较器判定电容 C 放电完毕时输出信号，由控制逻辑停止计数器的计数，并发出转换结束信号。这时计数器所记的脉冲个数正比于放电时间。</p>\n<p>放电时间 T1 或 T2 正比于输入电压 V&lt;sub&gt;IN&lt;/sub&gt;，即输入电压大，则放电时间长，计数器的计数值越大。因此，计数器计数值的大小反映了输入电压 V&lt;sub&gt;IN&lt;/sub &gt; 在固定积分时间 T 内的平均值。</p>\n<p>此种 A/D 转换器品种常有输出为 3 位半 BCD 码 (二进制编码的十进制数) 的 ICL7107、MC14433、输出为 4 位半 BCD 码的 ICL7135 等。</p>\n<h4 id=\"电压频率式ad转换原理\"><a class=\"anchor\" href=\"#电压频率式ad转换原理\">#</a> 电压 / 频率式 A/D 转换原理</h4>\n<p>电压 / 频率式 A/D 转换器简称 V/F 转换器，是把模拟电压信号转换为频率信号的器件。</p>\n<p>实现 V/F 转换的方法很多，现以常见的电荷平衡 V/F 转换法说明其转换原理：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211130211544566.png\" alt=\"image-20211130211544566\" /></p>\n<p>A1 是积分放大器，A2 为零电压比较器，恒流源 I&lt;sub&gt;R&lt;/sub &gt; 和开关 S 构成 A&lt;sub&gt;1&lt;/sub &gt; 的反充电回路，开关 S 由单稳态定时器触发控制。当积分放大器 A1 的输出电压 V&lt;sub&gt;0&lt;/sub &gt; 下降到零时，零电压比较器 A2 输出跳变，触发单稳态定时器，产生暂态时间为 T1 的定时脉冲，并使开关 S 闭合；同时又使晶体管 VT 截止，频率输出端 V&lt;sub&gt;fO&lt;/sub &gt; 输出高电平。<br />\n在开关 S 闭合期间，恒流 I&lt;sub&gt;R&lt;/sub &gt; 被接入积分器的 “-” 输入端。由于电路是按 I&lt;sub&gt;R&lt;/sub&gt;＞V&lt;sub&gt;Imax&lt;/sub&gt; / R&lt;sub&gt;I&lt;/sub &gt; 设计的，故此时电容 C 被<strong>反向充电</strong>，充电电流为 I&lt;sub&gt;R&lt;/sub&gt;-V&lt;sub&gt;I&lt;/sub&gt; / R&lt;sub&gt;I&lt;/sub&gt;，则<strong>积分器 A1 输出电压 V&lt;sub&gt;O&lt;/sub &gt; 从零开始线性上升</strong>。当定时时间 T&lt;sub&gt;1&lt;/sub &gt; 结束，定时器恢复稳态，使开关 S 断开，反向充电停止，同时使晶体导管 VT 导通，V&lt;sub&gt;fO&lt;/sub &gt; 输出低电平。</p>\n<p>开关 S 断开后，<strong>正输入电压 V&lt;sub&gt;1&lt;/sub &gt; 开始对电容 C 正向充电</strong>，其充电电流为 V&lt;sub&gt;I&lt;/sub&gt; / R&lt;sub&gt;I&lt;/sub&gt;，则<strong>积分放大器 A1 输出电压 V&lt;sub&gt;O&lt;/sub &gt; 开始线性下降</strong>。当 V&lt;sub&gt;O&lt;/sub&gt; = 0 时，比较器 A&lt;sub&gt;2&lt;/sub &gt; 输出再次跳变，又使单稳态定时器产生 T&lt;sub&gt;1&lt;/sub &gt; 时间的定时脉冲，而控制开关再次闭合，A&lt;sub&gt;1&lt;/sub &gt; 再次反向充电，同时 V&lt;sub&gt;fO&lt;/sub &gt; 端又输出高电平。</p>\n<p>如此反复，就会在积分器 A&lt;sub&gt;1&lt;/sub &gt; 输出端 V&lt;sub&gt;O&lt;/sub&gt;、单稳态定时器脉冲输出端和频率输出端 V&lt;sub&gt;fO&lt;/sub &gt; 端产生 (b) 中的波形，其波形的周期为 T。</p>\n<p>根据反向充电电荷量和正向充电电荷量相等的平衡原理，可得：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>I</mi><mi>R</mi></msub><mo>−</mo><mfrac><msub><mi>V</mi><mn>1</mn></msub><msub><mi>R</mi><mn>1</mn></msub></mfrac><mo stretchy=\"false\">)</mo><msub><mi>T</mi><mn>1</mn></msub><mo>=</mo><mfrac><msub><mi>V</mi><mn>1</mn></msub><msub><mi>R</mi><mn>1</mn></msub></mfrac><mo stretchy=\"false\">(</mo><mi>T</mi><mo>−</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(I_R - \\frac{V_1}{R_1})T_1 = \\frac{V_1}{R_1}(T-T_1)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.19633em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.19633em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>整理得：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo>=</mo><mfrac><mrow><msub><mi>I</mi><mi>R</mi></msub><msub><mi>R</mi><mn>1</mn></msub><msub><mi>T</mi><mn>1</mn></msub></mrow><msub><mi>V</mi><mn>1</mn></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">T = \\frac{I_RR_1T_1}{V_1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.19633em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>则 V&lt;sub&gt;fO&lt;/sub &gt; 端输出的电压频率为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>f</mi><mi>O</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>T</mi></mfrac><mo>=</mo><mfrac><msub><mi>V</mi><mn>1</mn></msub><mrow><msub><mi>I</mi><mi>R</mi></msub><msub><mi>R</mi><mn>1</mn></msub><msub><mi>T</mi><mn>1</mn></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">f_O = \\frac{1}{T}=\\frac{V_1}{I_RR_1T_1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">O</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.19633em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>这个<strong> f&lt;sub&gt;O&lt;/sub &gt; 就是由 V&lt;sub&gt;1&lt;/sub &gt; 转换而来的输出频率，两者成线性比例关系</strong>。由上式可见，要精确地实现 V/F 变换，要求 I&lt;sub&gt;R&lt;/sub&gt;、R&lt;sub&gt;1&lt;/sub&gt;、T&lt;sub&gt;1&lt;/sub &gt; 应准确稳定。积分电容 C 虽然没有出现在上式中，但它的漏电流将会影响到充电电流 V&lt;sub&gt;1&lt;/sub&gt;/R&lt;sub&gt;1&lt;/sub&gt;，从而<strong>影响转换精度</strong>。</p>\n<p>此种 V/F 转换器常用品种：VFC32、LM131/LM331、AD650、AD651</p>\n<h4 id=\"ad转换器性能指标\"><a class=\"anchor\" href=\"#ad转换器性能指标\">#</a> A/D 转换器性能指标</h4>\n<ul>\n<li>\n<p>分辨率</p>\n<p>分辨率是指 A/D 转换器对微小输入信号变化的敏感程度。分辨率越高，转换时对输入量微小变化的反应越灵敏。通常用数字量的位数来表示，如 8 位、10 位、12 位等。分辨率为<em> n</em>，表示它可以对满刻度的 1/2<em>n</em> 的变化量作出反应。即：</p>\n<p>分辨力 = 满刻度值 / 2&lt;sup&gt;n&lt;/sup&gt;</p>\n</li>\n<li>\n<p>转换精度</p>\n<p>转换后所得实际值与理论值的接近程度，可用<strong>绝对误差和相对误差</strong>来表示。</p>\n<p>绝对误差 = 实际模拟输入值 - 理论值</p>\n<p>绝对误差包括增益误差，零点误差和非线性误差等。</p>\n<p>相对误差 =（指绝对误差 / 满刻度值）* 100%</p>\n<p>对 A/D 转换器常用最低有效值的位数 LSB（Least SIgnificant Bit）来表示，1LSB = 1 / 2&lt;sup&gt;n&lt;/sup&gt;</p>\n<p>例如，对于一个 8 位 0~5V 的 A/D 转换器，如果其相对误差为 ±1LSB，则其绝对误差为 ±19.5 mV，相对误差值为 0.39%，一般来说，<strong>位数 n 越大，其相对误差（或绝对误差）越小。</strong></p>\n</li>\n<li>\n<p>非线性误差</p>\n<p>**A/D 转换器实际转换特性曲线与理想特性曲线之间的最大偏差。** 在转换器设计中，一般要求非线性误差不大于 1 / 2 LSB。通常用非线性误差来表示 A/D 转换器的线性度。</p>\n</li>\n<li>\n<p>转换时间</p>\n<p>A/D 转换器完成一次转换所需的时间称为转换时间。如逐位逼近式 A/D 转换器的转换时间为微秒级，双积分式 A/D 转换器的转换时间为毫秒级。</p>\n</li>\n</ul>\n<h3 id=\"352-adc0809芯片及其接口电路\"><a class=\"anchor\" href=\"#352-adc0809芯片及其接口电路\">#</a> 3.5.2 ADC0809 芯片及其接口电路</h3>\n<h4 id=\"adc0809芯片介绍\"><a class=\"anchor\" href=\"#adc0809芯片介绍\">#</a> ADC0809 芯片介绍</h4>\n<ul>\n<li>8 位逐位逼近式 A/D 转换器</li>\n<li>分辨率为 1 / 2&lt;sub&gt;8&lt;/sub&gt; ≈0.39%</li>\n<li>模拟电压转换范围 0 ~+5V</li>\n<li>标准转换时间为 100us</li>\n<li>采用 28 脚双立直插式封装</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211201204159073.png\" alt=\"image-20211201204159073\" /></p>\n<p>ADC0809 是在逐位逼近式 A/D 转换原理基础上，增加了 8 路模拟开关、一个用来选择通道的地址锁存与译码电路和一个三态输出锁存器，其引脚功能如下：</p>\n<p>V&lt;sub&gt;IN0&lt;/sub&gt;~V&lt;sub&gt;IN7&lt;/sub&gt;：8 路模拟量输入端。允许 8 路模拟量分时输入，共用一个 A/D 转换器。</p>\n<p>ALE：地址锁存允许信号，输入，高电平有效。上升沿时锁存 3 位通道选择信号。</p>\n<p>A、B、C：3 位地址线即模拟量通道选择线。ALE 位高电平时，地址译码与对应通道选择如表：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211201205735012.png\" alt=\"image-20211201205735012\" /></p>\n<p>START：A/D 转换启动信号，输入，高电平有效。上升沿时将转换器内部清零，下降沿时启动 A/D 转换。</p>\n<p>EOC：转换结束信号，输出，高电平有效。平时 EOC 为高电平，A/D 转换期间为低电平，A/D 转换结束后又变成高电平。EOC 可用作向主机申请中断的信号，或供主机查询 A/D 转换是否结束的信号。</p>\n<p>OE：输出允许信号，输入，高电平有效。该信号用来打开三态输出缓冲器，将 A/D 转换得到的 8 位数字量送到数据总线上。</p>\n<p>DO&lt;sub&gt;0&lt;/sub&gt;~DO&lt;sub&gt;7&lt;/sub&gt;：8 位数字量输出。DO&lt;sub&gt;0&lt;/sub &gt; 为最低位，DO&lt;sub&gt;7&lt;/sub &gt; 为最高位。由于有三态输出锁存，可与主机数据总线直接相连。</p>\n<p>CLOCK：外部时钟脉冲输入端。当脉冲频率为 640kHz 时，A/D 转换时间为 100us</p>\n<p>V&lt;sub&gt;R+&lt;/sub&gt;、V&lt;sub&gt;R-&lt;/sub&gt;：基准电压源正端、负端。取决于被转换的模拟电压范围。通常：V&lt;sub&gt;R+&lt;/sub&gt; = + 5V (DC)，V&lt;sub&gt;R-&lt;/sub&gt; = 0V (DC)</p>\n<p>GND：电源地</p>\n<p>了解 ADC0809 的内部转换时序十分重要，这是设计硬件与软件的主要依据。</p>\n<p>转换过程如下：首先 ALE 上升沿将地址代码锁存、译码后选通模拟开关中的某一路，使该路模拟量进入到 A/D 转换器中。同时 START 的上升沿将转换器内部清零，下降沿启动 A/D 转换器，即在时钟作用下，逐位逼近过程开始，转换结束信号 EOC 即变为低电平。</p>\n<p>当转换结束后，EOC 恢复高电平，此时，如果对输出允许 OE 输入一高电平命令，则可读出数据。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211201211838081.png\" alt=\"image-20211201211838081\" /></p>\n<p>上述过程中，判断 A/D 转换器是否完成一次转换，可以依据结束信号 EOC 电平的高低，或者根据输入时钟频率计算出转换芯片的转换时间。因此读取 A/D 转换数可以采用 **：程序查询、定时采样、中断采样和 CPU 等待 ** 等多种方式。</p>\n<p>另外，ADC0809 这种芯片输出端具有可控的缓冲锁存门，易于直接与主机进行接口。还有一类芯片内部没有缓冲锁存门，不能直接与主机相连。这样，在 A/D 转换器与主机之间也出现了直接连接、通过 8255 或锁存器间接连接几种情形。</p>\n<h4 id=\"adc0809接口电路\"><a class=\"anchor\" href=\"#adc0809接口电路\">#</a> ADC0809 接口电路</h4>\n<p>A/D 转换器的接口电路主要是解决主机如何分时采集多路模拟量输入信号的，即主机如何启动 A/D 转换（体现为对 START 和 ALE 引脚的控制），如何判断 A/D 完成一次模数转换（体现为是否读取 EOC 标志，如何读取），如何读入并存放转换结果的。下面仅介绍两种典型的接口电路。</p>\n<ul>\n<li>\n<p>查询方式读取 A/D 转换数</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202140055009.png\" alt=\"image-20211202140055009\" /></p>\n<p>组成：PC 总线、ADC0809、74LS138、74LS02、74LS126 三态缓冲器组成。启动转换的板址 PA = 01000000，每一路的口址分别为 000~111，故 8 路转换地址为 40H~47H。</p>\n<pre><code>\t\tMOV   BX，BUFF    ；置采样数据区首址\n\t\tMOV   CX，08H     ；８路输入\nSTART：OUT   PA，AL       ；启动A/D转换\nREOC： IN     AL，PB      ；读EOC\n\t\tRCR   AL，01      ；判断EOC\n\t\tJNC   REOC        ；若EOC=0，继续查询\n\t\tIN     AL，PA  ；若EOC=1，读A/D转换数\n\t\tMOV  [BX]，AL    ；存A/D转换数\n\t\tINC    BX        ；存A/D转换数地址加1\n\t\tINC    PA         ；接口地址加1\n\t\tLOOP  START       ；循环\n</code></pre>\n<p>现说明<strong>启动转换过程</strong>：首先主机执行一条启动第一路的输出指令，把 AL 中的数据送到地址为 PA 的接口电路中，此时 AL 中的内容无关紧要，而地址 PA = 40H，使 138 译码器的 Y&lt;sub&gt;0&lt;/sub&gt;(上划线) 输出一个低电平，连同 OUT 输出指令造成的 IOW (上划线) 低电平，从而使非与门 02 (3) 产生脉冲信号到引脚 ALE 和 START，ALE 的上升沿将通道地址代码 000 锁存并进行译码，选通模拟开关中的第一路 V&lt;sub&gt;IN0&lt;/sub&gt;，使该路模拟量进入到 A/D 转换器中；同时 START 的上升沿将 ADC0809 中的逐位逼近寄存器 SAR 清零，下降沿启动 A/D 转换，即在时钟的作用下，逐位逼近的 A/D 转换过程开始。</p>\n<p>接着，主机<strong>查询</strong>转换结束信号 EOC 的状态，通过执行输入指令，把地址为 PB 的转换接口电路的数据读入 AL，此时地址 PB = 01001000 (48H)，使 74LS138 译码器的 Y&lt;sub&gt;1&lt;/sub&gt;(上划线) 输出一个低电平，连同 IN 输入指令造成 IOR (上划线) 低电平，从而使非与门 02 (1) 产生脉冲信号并选通 126 三态缓冲器，使 EOC 电平状态出现在数据线 D&lt;sub&gt;0&lt;/sub &gt; 上。然后将读入的 8 位数据进行循环右移，以判断 EOC 的电平状态。如果 EOC 为 “0”，表示 A/D 转换正在进行，程序再跳回 REOC，反复查询；当 EOC 为 “1”，表示 A/D 转换结束。</p>\n<p>然后，主机执行一条输出指令，把接口地址为 PA 的转换数据读入 AL，Y&lt;sub&gt;0&lt;/sub&gt;(上划线) 输出一个低电平，连同 IN 输入指令造成 IOR (上划线) 低电平，从而使非与门 02 (1) 产生脉冲信号，并选通 126 三态缓冲器判断，使 EOC 电平状态出现在数据线 D&lt;sub&gt;0&lt;/sub &gt; 上。然后将读入的 8 位数据进行带进位的循环右移，以判断 EOC 状态。如果 EOC 为 “0”，表示 A/D 转换正在进行，程序跳回 REOC，反复查询；当 EOC 为 “1”，表示 A/D 转换结束。</p>\n<p>接下来，主机执行一条输入指令，把接口地址为 PA 的转换数据读入 AL 中，Y&lt;sub&gt;0&lt;/sub&gt;(输出一个低电平)，连同 IN 输入指令造成 IOR (低电平)，从而使非与门 02 (2) 产生脉冲信号，即产生输出允许信号到 OE，使 ADC0809 内部的三态输出锁存缓冲器释放转换到数据线上，并被读入到 AL 中。</p>\n<p>接下来，把 A/D 转换器数据存入寄存器 BX 所指的数据区首地址 0000H 中，数据区地址加 1，为第 2 路 A/D 转换数据的存放做准备；接口地址加 1，准备接通第 2 路模拟信号；计数器减 1，不为 0 则返回到 START，继续进行下一路的 A/D 转换。如此循环，直至完成 8 路 A/D 转换。</p>\n<p><strong>非与门 02 (3) 和 IOW (上划线) 控制 A/D 转换器启动；通过三态缓冲器读入 EOC 状态以判断是否转换结束。</strong></p>\n</li>\n<li>\n<p>定时方式读 A/D 转换数</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202150253618.png\" alt=\"image-20211202150253618\" /></p>\n<p>它与查询方式的不同仅仅在于 A/D 转换后，无需查询 EOC 引脚状态而只<strong>需要等待转换时间，然后读取 A/D 转换数</strong>。因此，硬件电路可以取消 126 三态缓冲器及其控制电路，软件上也相应地去掉查询 EOC 电平地 REOC 程序段，而换之以调用定时子程序 (CALL DELAY) 即可。</p>\n<p>这里定时时间应略大于 ADC0809 的实际转换时间。图中 ADC0809 的 CLOCK 引脚 (输入时钟频率) 为 640kHz，因此转换时间为 8×8 个时钟周期，相当于 100us。</p>\n<p>显然，定时方式比查询方式简单，但前提是必须预先精确地知道 A/D 转换芯片完成一次 A/D 转换所需要的时间。</p>\n<p>这两种方法的共同特点是硬件、软件接口简单，但在<strong>转换期间独占了 CPU 时间</strong>，好在这种逐位逼近式 A/D 转换时间只是在微秒数量级。当选用双积分式 A/D 转换器时，因其转换时间在毫秒级，因此采用<strong>中断法</strong>读 A/D 转换数的方式更为适宜。因此，在设计数据采集系统时，究竟采用何种接口方式要根据 A/D 转换器芯片而定。</p>\n<p>8 位 A/D 转换器的分辨率 0.0039，转换精度在 0.4% 以下，这对一些精度要求较高的控制系统时不够的，因此要采用更多位的 A/D 转换器，如 10 位、12 位、14 位等 A/D 转换器。下面以 AD574A 为例介绍 12 位 A/D 转换器及其接口电路。</p>\n</li>\n</ul>\n<h3 id=\"353-ad574a芯片及其接口电路\"><a class=\"anchor\" href=\"#353-ad574a芯片及其接口电路\">#</a> 3.5.3 AD574A 芯片及其接口电路</h3>\n<h4 id=\"1ad574a芯片介绍\"><a class=\"anchor\" href=\"#1ad574a芯片介绍\">#</a> 1.AD574A 芯片介绍</h4>\n<ul>\n<li>AD574A 是一种高性能的 12 位<strong>逐位逼近式 A/D 转换器</strong></li>\n<li>分辨率为 1 / 2&lt;sup&gt;12&lt;/sup&gt;≈0.024%</li>\n<li>转换时间为 25us，适合于在高精度快速采样系统中使用</li>\n<li>内部结构大体于 ADC0809 类似，由 12 位 A/D 转换器、控制逻辑、三态输出锁存缓冲器与 10V 基准电压源构成，可直接与主机数据总线连接，但只能输入一路模拟量。</li>\n<li>AD574A 也采用 28 脚双立式直插式封装。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202152637664.png\" alt=\"image-20211202152637664\" /></p>\n<p>10V&lt;sub&gt;IN&lt;/sub&gt;、20V&lt;sub&gt;IN&lt;/sub&gt;、BIP、OFF：模拟电压信号输入端。单极性应用时，将 BIP OFF 接 0V，双极性时接 10V。量程可以是 10V，也可以是 20V。输入信号在 10V 范围内变化时，将输入信号接至 10V&lt;sub&gt;IN&lt;/sub&gt;；在 20V 变化时，接至 20V&lt;sub&gt;IN&lt;/sub&gt;。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202153525037.png\" alt=\"image-20211202153525037\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202153551701.png\" alt=\"image-20211202153551701\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202153557601.png\" alt=\"image-20211202153557601\" /></p>\n<h4 id=\"2ad574接口电路\"><a class=\"anchor\" href=\"#2ad574接口电路\">#</a> 2.AD574 接口电路</h4>\n<p>12 位 A/D 转换器 AD574A 与 PC 总线的接口有多种方式。既可以与 PC 总线的 16 位数据总线直接相连，构成简单的 12 位数据采集系统；也可以只占用 PC 总线的低 8 位数据总线，将转换后的 12 位数字量分两次读入主机，以节省硬件投入。</p>\n<p>同样，在 A/D 转换器与 PC 总线之间的数据传送上也可以使<strong>用程序查询、软件定时或中断控制</strong>等多种方法。<strong>由于 AD574A 的转换速度很高，一般多采用查询或定时方式</strong>。其接口电路及其程序参见下一节。</p>\n<h2 id=\"36-ad转换模板\"><a class=\"anchor\" href=\"#36-ad转换模板\">#</a> 3.6 A/D 转换模板</h2>\n<p>A/D 转换模板也需要遵循 I/O 模板的通用性原则：符合总线标准，接口地址可选以及输入方式可选。输入方式可选主要是指模板既可以接受单端输入信号，也可以接受双端差动输入信号。</p>\n<p>A/D 转换模板结构组成：</p>\n<ul>\n<li>\n<p>I/O 电气接口：</p>\n<p>完成电平转换、滤波、隔离等信号调理作用。</p>\n</li>\n<li>\n<p>I/O 功能部分：实现采样、放大、模 / 数转换等功能。</p>\n</li>\n<li>\n<p>总线接口：完成数据缓冲、地址译码等功能。</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202155345077.png\" alt=\"image-20211202155345077\" /></p>\n<p>在 AD574A 芯片中：</p>\n<ul>\n<li>\n<p>STS (上划线)：转换结束信号，高电平表示正在转换，低电平表示已转换完毕。</p>\n</li>\n<li>\n<p>CE：片能用信号，输入，高电平有效。</p>\n</li>\n<li>\n<p>CS (上划线)：片选信号，输入，低电平有效。</p>\n</li>\n<li>\n<p>R/C (上划线)：读 / 转换信号，输入，高电平时读入 A/D 转换数据，低电平时启动 A/D 转换。</p>\n</li>\n<li>\n<p>12 / 8 (低电平)：数据输出方式选择信号，输入，高电平时输出 12 位数据，低电平时与 A&lt;sub&gt;0&lt;/sub &gt; 信号配合输出高 8 位或低 4 位数据。12 / 8 (低电平) 不能用 TTL 控制，必须直接接至 + 5V (引脚 1) 或数字 (引脚 15).</p>\n</li>\n<li>\n<p>A&lt;sub&gt;0&lt;/sub&gt;：字节信号，在转换状态，A&lt;sub&gt;0&lt;/sub &gt; 为低电平可使 AD574A 进行 12 位转换，A&lt;sub&gt;0&lt;/sub &gt; 为高电平可使 AD574A 进行 8 位转换。在读数据状态，如果 12/8 (上划线) 为低电平，A&lt;sub&gt;0&lt;/sub &gt; 为低电平时，则输出高 8 位数，而 A&lt;sub&gt;0&lt;/sub &gt; 为高电平时，则输出低 4 位数；如果 12 / 8 (上划线) 为高电平，则 A&lt;sub&gt;0&lt;/sub &gt; 状态不起作用。</p>\n</li>\n</ul>\n<p>CE、CS (上划线)、R/C (上划线)、12 / 8 (低电平)、A&lt;sub&gt;0&lt;/sub &gt; 各控制信号组合作用表：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202205122755.png\" alt=\"image-20211202205122755\" /></p>\n<p>模板采集数据的过程如下：</p>\n<ul>\n<li>通道选择：将模拟量输入通道号写入 8255A 端口 C 低 4 位 (PC3~PC0)，可依次选通 8 路。</li>\n<li>采样保持控制。把 AD574A 的 STS (上划线) 信号通过反相器连接到 LF398 的信号采样保持端，当 AD574A 未转换期间或转换结束时 STS (上划线) = 0，使 LF398 处于采样状态，当 AD574A 转换期间 STS (上划线) = 1，使 LF398 处于保持状态。</li>\n<li>启动 AD574A 进行 A/D 转换。通过 8255A 的端口 PC6~PC4 输出控制信号，启动 AD574A。</li>\n<li>查询 AD574A 是否转换结束。读 8255A 的端口 A，查询 STS (上划线) 是否已由高电平转换为低电平。</li>\n<li>读取转换结果：若 STS (上划线) 已由高电平转换为低电平，则读取 8255A 端口 A、B，便可以得到 12 位转换结果。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202161831658.png\" alt=\"image-20211202161831658\" /></p>\n<h2 id=\"考试要求-2\"><a class=\"anchor\" href=\"#考试要求-2\">#</a> 考试要求</h2>\n<p>不考程序汇编、不考 AD 转换器电路设计，只是分析电路</p>\n<p>三类 AD 转换器，抽一类出来分析阐述</p>\n<h2 id=\"课后习题-2\"><a class=\"anchor\" href=\"#课后习题-2\">#</a> 课后习题</h2>\n<p>1. 画图说明模拟量输入通道的功能、各组成部分及其作用？</p>\n<p>2. 分析说明 8 路模拟开关 CD4051 的结构原理图，结合真值表设 计出两个 CD4051 扩展为一个 8 路双端模拟开关的示意图。</p>\n<p>3．什么叫周期采样？采样时间？采样周期？（区分清楚）</p>\n<p>4．分析图 3-9 采样保持器的原理电路及工作过程。</p>\n<p>5．简述逐位逼近式、双积分式、电压 / 频率式的 A/D 转换原理。</p>\n<p>6．结合图 3-14 与图 3-15，分析说明 ADC0809 的结构组成及其引脚作用。</p>\n<p>7．试分析图 3-16、图 3-17 ADC0809 接口电路的启动、转换、查询或定时读入数据的工作过程。比较说明这两种接口电路在硬软件上的异同点。</p>\n<p>8．分析说明图 3-19 的 8 路 12 位 A/D 转换模板的工作原理。</p>\n<h1 id=\"第4-章-数字量输入输出通道\"><a class=\"anchor\" href=\"#第4-章-数字量输入输出通道\">#</a> 第 4 章 数字量输入 / 输出通道</h1>\n<h2 id=\"引言-2\"><a class=\"anchor\" href=\"#引言-2\">#</a> 引言</h2>\n<p>在微机控制系统中，除了要处理模拟量信号以外，还要处理<strong>数字信号</strong>，包括开关信号、脉冲信号。如开关触点的闭合和断开，指示灯的亮和灭，继电器或接触器的吸合和释放，马达的启动和停止，晶闸管的通和断，阀门的打开和关闭，仪器仪表的 BCD 码，以及脉冲信号的计数和定时等等 。</p>\n<h2 id=\"41-光电耦合隔离技术\"><a class=\"anchor\" href=\"#41-光电耦合隔离技术\">#</a> 4.1 光电耦合隔离技术</h2>\n<p>计算机控制系统的输入信号来自于现场的信号传感器，输出信号又送回现场的执行器。因此，现场的电磁干扰会通过输入 / 输出通道串入到计算机系统中，这就需要采用通道隔离技术。最常用的方法是光电耦合隔离技术。</p>\n<h3 id=\"411-光电耦合隔离器\"><a class=\"anchor\" href=\"#411-光电耦合隔离器\">#</a> 4.1.1 光电耦合隔离器</h3>\n<p>光电耦合隔离器的几种类型：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202171611623.png\" alt=\"image-20211202171611623\" /></p>\n<p>现以三极管型光电耦合隔离器为例来说明它的结构原理 ：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMTcxNzM5MTM2LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202171739136.png</span>&quot; alt=&quot;image-20211202171739136&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>三极管型光耦器件的发光二极管和光敏三极管封装在一个管壳内，发光二极管为光耦隔离器的信号输入端，光敏三极管的集电极和发射极为光耦隔离器的输出端，它们之间的信号传递是依靠发光二极管在信号电压的控制下发光，传送给光敏三极管的输入、输出特性，即存在着<strong>截止区、饱和区与线性区</strong>三部分。</p>\n<p><strong>利用光耦隔离器的开关特性（光敏三极管工作在截止区、饱和区）可传送数字信号而隔离电磁干扰</strong>，简称对数字信号进行隔离。例如：在数字量输入 / 输出通道中，以及在模拟量输入通道中的 A/D 转换器与 CPU 之间或模拟量输出通道中的 CPU 与 D/A 转换器之间的数字信号传送，都可以用光耦的这种开关特性。</p>\n<p><strong>利用光耦隔离器的线性放大区 (光敏三极管工作在线性区)，可传送模拟信号而隔离电磁干扰</strong>，简称对模拟信号进行隔离。例如：在现场，传感器与 A/D 转换器或 D/A 转换器与现场执行器之间的模拟信号传输，可利用光耦的这种线性区对模拟信号进行隔离。</p>\n<p>光耦的这两种隔离方法各有优点。模拟信号隔离方法的优点是：使用少量的光耦，成本低；缺点是：调试困难，如果光耦挑选得不合适，会影响 A/D 或 D/A 转换的精度和线性度。</p>\n<p>数字信号隔离方法优点是：调试简单，不影响系统的精度和线性度；缺点是：使用较多的光耦器件，成本较高。但是因为光耦器件越来越廉价，数字信号隔离方法的优势凸显出来，因而在工程中使用更多。</p>\n<p>需要注意的是，用于驱动发光管的电源与驱动光敏三极管的电源不应是共地的同一个电源，必须分开，单独供电，才能有效避免输出端与输出端相互之间的反馈和干扰；另外，发光二极管的动态电阻很小，也可以抑制系统内外的噪声干扰。因此，利用光耦隔离器可以有效隔离电磁场的干扰。</p>\n<h3 id=\"412-光电耦合隔离电路\"><a class=\"anchor\" href=\"#412-光电耦合隔离电路\">#</a> 4.1.2 光电耦合隔离电路</h3>\n<p>分类：数字量同相和数字量相反传递两种。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202174627736.png\" alt=\"image-20211202174627736\" /></p>\n<p>同相传递：光耦的输入输出同相，即输入为低（高）输出为低（高）</p>\n<p>反向传递：光耦的输入输出反相，即输入为高（低）输出为高。</p>\n<h2 id=\"42-数字量输入通道\"><a class=\"anchor\" href=\"#42-数字量输入通道\">#</a> 4.2 数字量输入通道</h2>\n<p>数字量输入通道（DI 通道）的任务：把生产过程中的数字信号转换成计算机易于接受的形式。</p>\n<p>信号调理电路：虽然都是数字信号，不需进行 A/D 转换，但对通道中可能引入的各种干扰必须采取相应的技术措施，即在外部信号与单片机之间要设置输入信号调理电路。</p>\n<h3 id=\"421-开关输入电流\"><a class=\"anchor\" href=\"#421-开关输入电流\">#</a> 4.2.1 开关输入电流</h3>\n<p>开关信号：凡在电路中起到通断作用的各种按钮、触点、开关，其端子引出均统称开关信号。</p>\n<p>在开关输入电路中，主要考虑信号调理技术，如：</p>\n<ul>\n<li>电平转换：用电阻分压法把电流信号转换为电压信号。</li>\n<li>RC 滤波：用 RC 滤波器滤出高频干扰</li>\n<li>过电压保护：用稳压管和限流电阻作过电压保护；用稳压管或压敏电阻把瞬态尖峰电压钳位在安全电平上。</li>\n<li>反电压保护：串联一个二极管防止反极性电压输入。</li>\n<li>光电隔离：用光耦隔离器实现计算机与外部的完全电隔离。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202192206617.png\" alt=\"image-20211202192206617\" /></p>\n<p>点画线右边是由开关 S 与电源组成的外部电路。(a) 为直流输入电路，(b) 为直流输入电路。</p>\n<p>交流电比直流电多一个降压电容和整流桥块，可把高压交流（如 380V (AC)）变换为电压直流（如 5V (AC)）。开关 S 的状态经 RC 滤波、稳压管 VD&lt;sub&gt;1&lt;/sub &gt; 钳位保护、电阻 R&lt;sub&gt;2&lt;/sub &gt; 限流、二极管 VD&lt;sub&gt;2&lt;/sub &gt; 防止反极性电压输入以及光耦隔离等措施后送至输入缓冲器，主机通过执行输入指令便可以读取开关 S 的状态。比如，当开关 S 闭合时，输入回路由电流流过，光耦中的发光二极管发光，光敏管导通，数据线上为低电平，即输入信号为 “0” 对应于开关 S 闭合；反之，开关 S 断开，光耦中的发光二极管无电流流过，光敏管截止，数据线上为高电平，即输入信号为 “1” 对应于外电路开关 S 的断开。</p>\n<h3 id=\"422-脉冲计数器\"><a class=\"anchor\" href=\"#422-脉冲计数器\">#</a> 4.2.2 脉冲计数器</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202193411935.png\" alt=\"image-20211202193411935\" /></p>\n<p>有些用于检测流量、转速的传感器发出的是脉冲频率信号，对于大量程可以设计一种定时计数输入接口，即在一定的时间内统计输入的脉冲个数，然后根据传感器的比例系数换算出所检测的物理量。</p>\n<p>上图为一种定时计数输入接口电路，传感器发出的脉冲频率信号，经过简单的信号调理，引到 8253/8254 芯片的计数通道 1 的 CLK&lt;sub&gt;1&lt;/sub &gt; 口。8254 是具有 3 个 16 位计数器通道的可编程计数器 / 定时器。计数通道 0 工作于模式 3，CLK&lt;sub&gt;0&lt;/sub &gt; 用于接收系统时钟脉冲，OUT&lt;sub&gt;0&lt;/sub &gt; 输出一个周期位系统时钟脉冲 N 倍（N 为通道 0 的计数初值）的连续方波脉冲，其高、低电平时段是计数通道 1 的采样时间和采样间隔时间，分别记为 T&lt;sub&gt;S&lt;/sub&gt;、T&lt;sub&gt;W&lt;/sub&gt;；计数通道 1 和通道 2 均选为工作模式 2，且 OUT&lt;sub&gt;1&lt;/sub &gt; 串接到 CLK&lt;sub&gt;2&lt;/sub&gt;，使两者构成一个计数长度 2&lt;sup&gt;32&lt;/sup &gt; 的脉冲计数器，以对 T&lt;sub&gt;S&lt;/sub &gt; 内的输入脉冲计数。</p>\n<p>如果获得 T&lt;sub&gt;S&lt;/sub &gt; 时间内的输入脉冲个数为 n，则单位时间内的脉冲个数即脉冲频率为 n/T&lt;sub&gt;S&lt;/sub&gt;，从而可换算出介质的流量或电机的转速值。比如，发出脉冲信号的是涡轮流量计或磁电式速度传感器，它们的脉冲当量（一个脉冲相当的流量或转速）为 K，则介质的流量或电机的转数就为 K * n / T&lt;sub&gt;S&lt;/sub&gt;。</p>\n<h2 id=\"43-数字量输出通道\"><a class=\"anchor\" href=\"#43-数字量输出通道\">#</a> 4.3 数字量输出通道</h2>\n<h3 id=\"引言-3\"><a class=\"anchor\" href=\"#引言-3\">#</a> 引言</h3>\n<p>数字量输出通道简称 DO 通道。</p>\n<p>任务：把计算机输出的微弱的数字信号转换成能对生产过程进行控制数字驱动信号。</p>\n<p>常用电路：三极管驱动输出电路、继电器输出驱动电路、晶闸管输出驱动电路、固态继电器输出驱动电路等。</p>\n<p>选择：根<strong>据现场负荷的不同</strong>，如指示灯、继电器、接触器、电机、阀门等，可以选用不同的功率放大器件构成不同的开关量驱动输出通道。</p>\n<h3 id=\"431-三极管驱动电路\"><a class=\"anchor\" href=\"#431-三极管驱动电路\">#</a> 4.3.1 三极管驱动电路</h3>\n<p>对于<strong>低压</strong>情况下的小电流开关量，用功率三极管就可以作为开关驱动组件，其<strong>输出电流就是输入电流与三极管增益的乘积</strong>。</p>\n<ul>\n<li>\n<p>普通三极管驱动电路</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjAwMTI2NTc1LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202200126575.png</span>&quot; alt=&quot;image-20211202200126575&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>当驱动电流只有<strong>几毫安</strong>时，如驱动发光二极管、小功率继电器等器件，只要采用一个普通的功率三极管就能构成驱动电路。</p>\n<p>上图为驱动 LED 数码管的小功率三极管导通，当 CPU 数据线 D&lt;sub&gt;i&lt;/sub &gt; 输出数字 “0” 即低电平时，经 7406 反相锁存器变为高电平，使 NPN 型三极管导通，集电极电流驱动 LED 数码管发光。</p>\n</li>\n<li>\n<p>达林顿驱动电路</p>\n<p>当驱动电流需要达到<strong>几百毫安</strong>时，如驱动中功率继电器，电磁开关等装置，输出电路必须采取多级放大或提高三极管增益的办法。</p>\n<p>构成：多对两个三极管组成的达林顿复合管构成</p>\n<p>特点：具有高阻抗、高增益、输出功率大及保护措施完善的特点，同时多对复合管适用于计算机控制系统中的多路负荷。</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202201000869.png\" alt=\"image-20211202201000869\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjAxMTA5NzY3LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202201109767.png</span>&quot; alt=&quot;image-20211202201109767&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>MC1416 内含有 7 对达林顿复合管，每个复合管的集电极电流可达 500mA，截止时能承受 100V 电压，其输入 / 输出端均有钳位二极管，输出钳位二极管 VD&lt;sub&gt;2&lt;/sub &gt; 抑制高电位上发生的正向过冲，VD&lt;sub&gt;1&lt;/sub&gt;、VD&lt;sub&gt;3&lt;/sub &gt; 可抑制低电平上的负向过冲。</p>\n<p>对于达林顿阵列驱动电路，当 CPU 数据线 D&lt;sub&gt;i&lt;/sub &gt; 输出数字 “0” 即低电平时，经过 7406 反相锁存器变为高电平，使达林顿复合管导通，产生的几百毫安集电极电流足以驱动负载线圈，而且利用符合管内的保护二极管构成了负荷线圈断电时产生的反向电动势的泄流回路。</p>\n<h3 id=\"432-继电器驱动电路\"><a class=\"anchor\" href=\"#432-继电器驱动电路\">#</a> 4.3.2 继电器驱动电路</h3>\n<p>电磁继电器主要由线圈、铁芯、衔铁和触点等部件组成，简称继电器，它分为<strong>电压继电器、电流继电器、中间继电器</strong>等几种类型。<strong>继电器方式的开关量输出是一种最常用的输出方式，通过弱电控制外界交流或直流的高电压、大电流设备。</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjAzNDUyMDkyLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202203452092.png</span>&quot; alt=&quot;image-20211202203452092&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>继电器驱动电路的设计要根据所用所用的继电器线圈的吸合电压和电流而定，** 控制电流一定要大于继电器的吸合电流才能使继电器可靠地工作。** 上图为经光耦隔离器的继电输出驱动电路，当 CPU 数据线 D&lt;sub&gt;i&lt;/sub &gt; 输出数字 “1” 即高电平时，经 7406 反相驱动器变为低电平，光耦隔离器的发光二极管导通且发光，使光敏三极管导通，继电器线圈 KA 得电，动合触电闭合，从而驱动大型符合设备。</p>\n<p>由于继电器线圈是电感性负载，当电路突然关断时，会出现较高的电感性浪涌电压，为了保护驱动器件，应在继电器线圈两端并联一个阻尼二极管，为电感线圈提供一个电路泄放回路。</p>\n<h3 id=\"443-晶闸管驱动电路\"><a class=\"anchor\" href=\"#443-晶闸管驱动电路\">#</a> 4.4.3 晶闸管驱动电路</h3>\n<p>晶闸管又称可控硅 SCR，是一种大功率的半导体器件，<strong>具有用小功率控制大功率、开关无触点</strong>等特点，在交流 / 直流电机调速系统、调功系统、随动系统中应用广泛。</p>\n<p>分类：单向晶闸管、双向晶闸管</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjA0ODA1NDk2LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202204805496.png</span>&quot; alt=&quot;image-20211202204805496&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>单向晶闸管：有阳极 A、阴极 K、控制极（门极）G 三个极。当阳、阴极之间加正向电压，控制极与阴极两端也施加正向电压使控制极电流增大到触发电流时，晶闸管由截止变为导通；只有在阳极、阴极间施加反向电压或阳极电流减小到维持电流以下，晶闸管才由导通变为截止。单向晶闸管具有单向导电功能 **，在控制系统中多用于直流大电流场合，也可在交流系统中用于大功率整流回路 **。</p>\n<p>双向晶闸管也叫三端双向可控硅，在结构上相当于两个单向晶闸管<strong>反向并联</strong>，但共享一个控制极。当两个电极 T&lt;sub&gt;1&lt;/sub&gt;、T&lt;sub&gt;2&lt;/sub &gt; 之间的电压大于 1.5V 时，不论极性如何，都可以利用控制极 G 触发电流控制其导通。<strong>因此特别适用于交流大电流场合</strong>。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAyMjEwNzUwOTYwLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202210750960.png</span>&quot; alt=&quot;image-20211202210750960&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>晶闸管常用于高电压大电流的负载，不适宜与 CPU 直接相连，在实际使用时要采用隔离措施。上图为经光耦隔离的双向晶闸管输出驱动电路，当 CPU 数据线 D&lt;sub&gt;i&lt;/sub &gt; 输出数字 “1” 时，经 7406 反相变为低电平，发光二级管导通，使光敏晶闸管导通，导通电流再触发双向晶闸管导通，从而驱动大型交流负荷设备 R&lt;sub&gt;L&lt;/sub&gt;。</p>\n<h3 id=\"434-固态继电器驱动电路\"><a class=\"anchor\" href=\"#434-固态继电器驱动电路\">#</a> 4.3.4 固态继电器驱动电路</h3>\n<p>固态继电器 SSR：是一种新型的无触点开关的电子继电器，它利用电子技术实现了控制回路与负载回路之间的电隔离和信号耦合，而且没有任何可动部件或触电，却能实现电磁继电器的功能。</p>\n<p>优点：体积小，开关速度快，无机械噪声、无抖动和回跳、寿命长。1</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211202211838862.png\" alt=\"image-20211202211838862\" /></p>\n<p>固态继电器是一个四端组件，有 2 个输入端、2 个输出端，其内部结构类似于晶闸管输出驱动电路。上图为其结构原理图，由五部分组成。</p>\n<p>光耦隔离的作用是在输入与输出之间起信号传递作用，同时使两端在电气上完全隔离；控制触发电路是为后级提供一个触发信号，使电子开关（三极管或晶闸管）能可靠地导通；电子开关电路用来接通或关断直流或交流负载电源；吸收保护电路的功能是防止电源的尖峰和浪涌对开关电路产生干扰造成开关的误动作或损害，一般由 RC 串联网络和压敏电阻组成；零压检测是为交流型 SSR 过零触发而设置的。</p>\n<p>SSR 的输入端与晶体管、TTL、CMOS 电路兼容，输出端利用器件内的电子开关来接通和断开负载。工作时只要在输入端施加一定的弱电信号，就可以控制输出端大电流负载的通断。</p>\n<p>SSR 的输出端可以是直流，也可以是交流，分别称为直流型 SSR 和交流型 SSR。** 直流型 SSR 内部的开关组件为功率三极管，交流型 SSR 内部的开关组件为双向晶闸管。** 而交流 SSR 按控制触发方式不同又可分为过零型和移相型两种，其中应用最广泛的是过零型。</p>\n<p>过零型交流 SSR 是指当输入端加入控制信号后，需等待负载电源电压过零时，SSR 才为导通状态；而断开控制信号后，也要等待交流电压过零时，SSR 才为断开状态。移相型交流 SSR 的断开条件同过零型交流 SSR，但其导通条件简单，只要加入控制信号，不管负载电源相位如何，立即导通。</p>\n<p>直流型 SSR 的输入控制信号与输出完全同步。直流型 SSR 主要用于直流大功率控制。一般取输入电压为 4V~32V，输入电流为 5mA~10mA。它的输出端为晶体管，输出工作电压为 30V~180V。</p>\n<p>交流型 SSR 主要用于交流大功率控制。一般输入电压为 4V~32V，输出电流小于 500mA。输出端为双向晶闸管，一般额定电流在 1A~500A 范围内，电压多为 380V 或 220V。下图为一种常用的固态继电器驱动电路，当数据线 D&lt;sub&gt;i&lt;/sub &gt; 输出数字 “0” 时，经 7406 反相变为高电平，使 NPN 型三极管导通，SSR 输入端得电，输出端接通大型交流负荷设备 R&lt;sub&gt;L&lt;/sub&gt;。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203125639042.png\" alt=\"image-20211203125639042\" /></p>\n<p>实际使用中，要特别注意固态继电器的过电流与过电压保护以及浪涌电流的承受等工程问题 **，在选用固态继电器的额定工作电流与额定工作电压时，一定要远大于实际负载的电流和电压 **，而且输出驱动电路中仍要考虑增加阻容吸收组件。</p>\n<h2 id=\"44-dido模板\"><a class=\"anchor\" href=\"#44-dido模板\">#</a> 4.4 DI/DO 模板</h2>\n<p>把上述数字量输入通道或数字量输出通道设计在一块模板上，就称为 DI 模板或 DO 模板。图中含有 DI 通道和 DO 通道的 PC 总线数字量 I/O 模板的结构框图。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203130246484.png\" alt=\"image-20211203130246484\" /></p>\n<p>PC 总线接口逻辑部分组成：8 位数据缓冲器、基址译码器、输入片址译码、输出片址译码。</p>\n<p>I/O 逻辑接口部分组成：输入缓冲器、输出缓冲器。其中，输入缓冲器起着对外部输入信号的缓冲、加强和选通作用；输出缓冲器锁存 CPU 输出的数据或控制信号，供外部设备使用。I/O 缓冲功能可以用可编程接口如 8255A 构成，也可以用 74LS240、74LS244、74LS373、74LS273 等芯片实现。</p>\n<p>I/O 电气接口部分的功能主要是：电平转换、滤波、保护、隔离、功率驱动等。</p>\n<p>各种数字量 I/O 模板的前两部分大同小异不同的主要在于 I/O 电气接口部分，即输入信号的调理和输出信号的驱动，这是由生产过程的不同需求所决定的。</p>\n<h2 id=\"考试要求-3\"><a class=\"anchor\" href=\"#考试要求-3\">#</a> 考试要求</h2>\n<p>主要考选择判断，概念了解</p>\n<p>不考大题</p>\n<h2 id=\"课后习题-3\"><a class=\"anchor\" href=\"#课后习题-3\">#</a> 课后习题</h2>\n<ol>\n<li>\n<p>画图分析说明三极管型光电耦合隔离器的工作原理。</p>\n</li>\n<li>\n<p>分析说明光耦隔离器的两种特性及其隔离电磁干扰的作用机理。</p>\n</li>\n<li>\n<p>结合图 4-4，简述信号调理电路的构成及其各元器件的作用。</p>\n</li>\n<li>\n<p>分析说明图 4-5 脉冲计数电路的工作过程及其用途。</p>\n</li>\n<li>\n<p>简述数字量输出通道的功能及其常用的输出驱动电路。</p>\n</li>\n<li>\n<p>对比分析说明三极管输出驱动与继电器输出驱动电路的异同点。</p>\n</li>\n<li>\n<p>对比分析说明晶闸管输出驱动与固态继电器输出驱动电路的异同点。</p>\n</li>\n<li>\n<p>结合图 4-14，简述数字量 I/O 模板电路的结构组成。</p>\n</li>\n</ol>\n<h1 id=\"第5章-键盘及其接口技术\"><a class=\"anchor\" href=\"#第5章-键盘及其接口技术\">#</a> 第 5 章 键盘及其接口技术</h1>\n<h2 id=\"引言-4\"><a class=\"anchor\" href=\"#引言-4\">#</a> 引言</h2>\n<p>键盘是一种最常见的输入设备，它是一组按键的集合，从功能上可分为<strong>数字键和功能键</strong>两种，作用是输入数据与命令，查询和控制系统的工作状态，实现简单的人机对话。</p>\n<p>键盘接口电路可分为<strong>编码键盘和非编码键盘</strong>两种类型。</p>\n<p>编码键盘采用硬件编码电路来实现键的编码，每按下一个键，键盘便自动产生一个按键代码。编码键盘主要有 BCD 码键盘、ASCII 码键盘等类型。</p>\n<p>非编码键盘仅提供按键的通或断状态，按键代码的产生与识别由软件完成。</p>\n<p>编码键盘的特点是使用方便，键盘码产生<strong>速度快，占用 CPU 时间少</strong>，但对按键的检测与抖动干扰的消除是靠硬件电路来完成的，因而硬件电路复杂、成本高。而非编码键盘硬件电路简单，成本低，<strong>但占用 CPU 时间较长</strong>。</p>\n<h2 id=\"51-键盘输入电路\"><a class=\"anchor\" href=\"#51-键盘输入电路\">#</a> 5.1 键盘输入电路</h2>\n<p>计算机控制系统中的键盘通常采用<strong>触点式按键</strong>，触点式按键是利用机械触点的闭合或断开来输入状态信息。</p>\n<h3 id=\"511-键盘的抖动干扰\"><a class=\"anchor\" href=\"#511-键盘的抖动干扰\">#</a> 5.1.1 键盘的抖动干扰</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203141325555.png\" alt=\"image-20211203141325555\" /></p>\n<p><strong>由于机械触点的弹性振动，按键在按下时不会马上稳定地接通，在弹起时也不能一下子完全地断开，因而在按键闭合和断开的瞬间均会出现一连串的抖动，这种抖动称为按键抖动。</strong></p>\n<p>如上图，当按下按键时会产生前沿抖动，当按键弹起时会产生后沿抖动。这是所有机械触点式按键在状态输出时的共性问题，<strong>抖动时间长短取决于按键的机械特性与操作状态</strong>，一般 10ms~100ms，这是键处理设计时要考虑的一个重要参数。</p>\n<h3 id=\"512-抖动干扰的消除\"><a class=\"anchor\" href=\"#512-抖动干扰的消除\">#</a> 5.1.2 抖动干扰的消除</h3>\n<p>按键的抖动会导致按一次键产生的开关状态被 CPU 误读几次。为了使 CPU 能正确地读取按键状态，必须在按键闭合或断开时，消除产生的前沿或后沿抖动，去抖动的方法有：硬件方法、软件方法</p>\n<h4 id=\"1硬件方法\"><a class=\"anchor\" href=\"#1硬件方法\">#</a> 1. 硬件方法</h4>\n<p><strong>设计一个滤波延时电路或单稳态电路</strong>等硬件电路来避开按键的抖动时间。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMTQyNDA2Njk3LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203142406697.png</span>&quot; alt=&quot;image-20211203142406697&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>上图由 R&lt;sub&gt;2&lt;/sub &gt; 和 C 组成的滤波延时电路，设置在按键 S 与 CPU 数据线 D&lt;sub&gt;i&lt;/sub &gt; 之间。按键 S 未按下时，电容两端电压为 0，即非与门 V&lt;sub&gt;i&lt;/sub &gt; 为 0，输出 V&lt;sub&gt;O&lt;/sub &gt; 为 1。当 S 按下时，由于 C 两端电压不能突变，充电电压 V&lt;sub&gt;i&lt;/sub &gt; 在充电时间内未达到非门的开启电压，输出 V&lt;sub&gt;O&lt;/sub &gt; 将不会变化，直到充电电压 V&lt;sub&gt;i&lt;/sub &gt; 大于门的开启电压时，其输出 V&lt;sub&gt;O&lt;/sub &gt; 才会变成 0，这段充电延时时间取决于 R&lt;sub&gt;1&lt;/sub&gt;、R&lt;sub&gt;2&lt;/sub &gt; 和 C 值的大小，电路设计时只要使之大于或等于 100ms 即可避开按键抖动的影响。同理，按键 S 断开时，即使出现抖动，由于 C 的放电延迟过程，也会消除按键抖动的影响。</p>\n<p>上图的图二中，V&lt;sub&gt;1&lt;/sub &gt; 是未施加滤波电路含有前沿抖动、后沿抖动的波形，V&lt;sub&gt;2&lt;/sub &gt; 是施加滤波电路后消除抖动的波形。</p>\n<h4 id=\"2软件方法\"><a class=\"anchor\" href=\"#2软件方法\">#</a> 2. 软件方法</h4>\n<p>编制一段时间大于 100ms 的延时程序。</p>\n<p>在第一次检测到有按键按下时，执行这段延时子程序使键的前沿抖动消失后再检测该键状态，如果该键仍保持闭合状态电平，则确认为该键已稳定按下，否则无键按下，从而消除了抖动的影响。同理，在检测到按键释放后，也同样要延迟一段时间，以消除后沿抖动，然后转入对该按键的处理。</p>\n<h2 id=\"52-非编码独立式键盘\"><a class=\"anchor\" href=\"#52-非编码独立式键盘\">#</a> 5.2 非编码独立式键盘</h2>\n<p>独立式键盘是非编码键盘中最简单的一种键盘结构形式。每个按键独立地占有一根 I/O 口线，一般通过上拉电阻保证按键断开时 I/O 口线有确定的高电平，而按键闭合时为低电平。可以把各个按键的 I/O 口线直接与 CPU 数据线相连，通过 CPU 对相关 I/O 口线状态的检测，即可知道键盘上是否有按键按下和哪个键按下，并可以根据各个按键的功能定义进行相关的键功能处理。根据 CPU 何时访问和怎样访问按键的 I/O 口线，就构成了两种独立式键盘接口电路。</p>\n<h3 id=\"521-查询法接口电路\"><a class=\"anchor\" href=\"#521-查询法接口电路\">#</a> 5.2.1 查询法接口电路</h3>\n<p>现在以 3 个按键为例，下图即为独立式键盘查询接口电路。按键 S&lt;sub&gt;0&lt;/sub&gt;、S&lt;sub&gt;1&lt;/sub&gt;、S&lt;sub&gt;2&lt;/sub &gt; 分别通过上拉电阻与 CPU 的数据线相连，当按键 S&lt;sub&gt;i&lt;/sub &gt; 闭合时，数据线直接接地，因而 CPU 读入 D&lt;sub&gt;i&lt;/sub&gt; = 0；当按键 S&lt;sub&gt;i&lt;/sub &gt; 断开时，数据线通过上拉电阻接到正电源，因而 CPU 读入 D&lt;sub&gt;i&lt;/sub&gt; = 1。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMTUxMjI1ODY0LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203151225864.png</span>&quot; alt=&quot;image-20211203151225864&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>该接口电路实现的功能：查询检测是否有按键按下，如有键闭合，则消除抖动，再判断键号，然后转入相应的键处理程序。流程如下：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMTUxNzMzMjkyLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203151733292.png</span>&quot; alt=&quot;image-20211203151733292&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>采用查询法，必须保证 CPU 每隔一定时间就主动地去扫描按键一次，该扫描时间间隔应小于两次按键的时间间隔，否则会有按键不响应的情形。显然这种方式占用 CPU 时间比较多。</p>\n<h3 id=\"522-中断法接口电路\"><a class=\"anchor\" href=\"#522-中断法接口电路\">#</a> 5.2.2 中断法接口电路</h3>\n<p>仍以 3 个键为例，下图为一个用于炉温控制系统的独立式键盘中断法接口电路，S&lt;sub&gt;0&lt;/sub&gt;、S&lt;sub&gt;1&lt;/sub&gt;、S&lt;sub&gt;2&lt;/sub &gt; 分别代表自动 / 手动切换、炉温参数显式和炉温参数打印功能。这是在上述查询法接口电路的基础上，再把按键 S&lt;sub&gt;0&lt;/sub&gt;、S&lt;sub&gt;1&lt;/sub&gt;、S&lt;sub&gt;2&lt;/sub &gt; 的数据输出线经过与非门和反相器后与 8255A 的选通输入信号 PC&lt;sub&gt;4&lt;/sub &gt; 相连，8255A 的 PC&lt;sub&gt;3&lt;/sub &gt; 发出中断请求信号经中断控制器 8259A 与 CPU 的中断请求引脚相连，这是一种典型的中断法键盘接口电路。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMTUyMTIwNjY4LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203152120668.png</span>&quot; alt=&quot;image-20211203152120668&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>工作过程：当 CPU 对 8255A 初始化（8255A 的 A 口工作于方式 1 选通输入）后，CPU 即执行主程序。当按下 S&lt;sub&gt;0&lt;/sub &gt; 键，即表示要进入自动控制状态，此时与之相连的 I/O 口线呈现低电平，使 8255A 端口 A 的选通输入信号 PC&lt;sub&gt;4&lt;/sub&gt;（STBa (上划线)）有效，则 PA&lt;sub&gt;0&lt;/sub&gt;~PA&lt;sub&gt;2&lt;/sub &gt; 引脚接收并存入 3 个按键的 “0” 或 “1” 状态，当 STBa (上划线) 恢复成高电平，经 T&lt;sub&gt;SIT&lt;/sub &gt; 时间，8255A 的 PC&lt;sub&gt;3&lt;/sub &gt; 发出 INTRa 中断请求信号，经中断控制器 8259A 向 CPU 申请中断，CPU 响应中断后，即转到中断服务程序中。中断服务程序依次查询按键的通断状态，当查询到是自动 / 手动控制子程序的入口地址，从而使系统进入自动控制状态。如果按键没有按下，则相应的 I/O 口线均为高电平，也不会产生中断信号，CPU 继续运行主程序。</p>\n<p>键盘中断服务子程序，与查询方式相似，在保护现场后，首先调用 100ms 延时子程序去除抖动，然后依次查键号，并转入键功能处理程序，最后恢复现场，中断返回。显然，查询顺序代表了按键的排队优先级。</p>\n<p>采用中断法，CPU 对按键而言是被动方式，在无键按下时，不占用 CPU 时间，因而 CPU 有更多时间执行其他程序。</p>\n<p>上述分析说明：独立式键盘接口电路简单灵活，软件结构简单，但每个按键必须占用一根 I/O 口线，在按键数量较多时，需要占用较多的 I/O 口线。比如：64 个键需要有 64 根线，不仅连线复杂，查询按键的时间也较长。<strong>故这种键盘电路只适合按键数量比较少的小型控制系统或智能控制仪表。</strong></p>\n<h2 id=\"53-非编码矩阵式键盘\"><a class=\"anchor\" href=\"#53-非编码矩阵式键盘\">#</a> 5.3 非编码矩阵式键盘</h2>\n<p>当按键数量较多时，为了少占用 CPU 的 I/O 口线，通常将按键排列成矩阵式结构。矩阵式结构也是非编码键盘中的一种形式。</p>\n<h3 id=\"531-矩阵式键盘的结构组成\"><a class=\"anchor\" href=\"#531-矩阵式键盘的结构组成\">#</a> 5.3.1 矩阵式键盘的结构组成</h3>\n<p>矩阵式键盘又叫行列式键盘，是用 I/O 口线组成的行、列线的交叉处，二线不能直接相通而是通过一个按键跨接接通。采用这种矩阵结构只需要 M 根行输出线和 N 根列输入线，就可以连接 M×N 个按键。通过键盘扫描程序的行输出与列输入就可以确认按键的状态，再通过键盘处理程序便可以识别按键值。</p>\n<p>当键盘中无任何键按下时，所有的行线和列线被断开且相互独立，输入线 Y&lt;sub&gt;0&lt;/sub&gt;~Y&lt;sub&gt;7&lt;/sub &gt; 列都为高电平；当有任意一键按下，则该键所在的行线与列线接通，因此，该列线的电平取决于该键所在的行线。基于此，产生了 “行扫描法” 和 “线扫描法” 两种识别方法。</p>\n<p>行扫描法又称逐行零扫描查询法，即逐行输出行扫描信号 “0”，使各行依次为低电平，然后分别读入列数据，检查此 (低电平) 行中是否有键按下。若读得某列线为低电平，则表示此 (低电平) 行线与此列线叫交叉处有有按键按下，再对该键进行译码计算出键值，然后转入该键的功能子程序入口地址；如果没有任何一根列线为低电平，则说明此 (低电平) 没有按键按下。接着进行下一行的 “0” 行扫描与列读入直到 8 行全部检查完毕为止，若无按键按下，则返回。</p>\n<p>有时为了快速判断键盘中是否有键按下，也可以将全部行线全部置为低电平，然后检测列线的状态；若所有列线均为高电平，则说明键盘中无键按下，立即返回；若要有一列的电平为低，则表示键盘中有按键被按下，然后在如上那样进行逐行扫描。</p>\n<h3 id=\"532-矩阵式键盘的程序设计\"><a class=\"anchor\" href=\"#532-矩阵式键盘的程序设计\">#</a> 5.3.2 矩阵式键盘的程序设计</h3>\n<p>在计算机控制系统中，键盘扫描只是 CPU 工作的一部分。因此在设计键盘扫描程序时，必须保证键盘操作的实时性，又不能占用太多的 CPU 时间，还要充分考虑到抖动干扰的消除。一般可根据情况选用<strong>编程扫描、定时扫描或中断扫描</strong>中的一种方式。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203190324518.png\" alt=\"image-20211203190324518\" /></p>\n<pre><code>KEY：  MOV  AL，0\nMOV  CL，AL          ；行值寄存器CL和列值寄存器DL清零\nMOV  DL，AL\nMOV  AL，0FFH\nOUT  PORT1，AL      ；使所有行线为低电平\nIN    AL，PORT1     ； 读列键值\nCMP  AL，0FFH       ； 检查是否有键按下\nJZ    DONE           ； 无键按下转返回\nCALL DELAY          ； 有键按下调延时100mA子程序\nMOV  AL，0FFH\nOUT  PORT1，AL      \nIN   AL，PORT1       ； 重复上述扫描,再次确认是否有键按下\n\nCMP  AL，0FFH\nJZ   DONE           ； 无键按下转返回\nMOV  AH，08         ； 行数08送计数器AH\nMOV  BL，01H        ；行扫描初值(即X0线)送BL\nKEY1： MOV  AL，BL\nOUT  PORT1，AL      ；输出使某行为低电平\nIN   AL，PORT1      ； 读入列值\nCMP  AL，0FFH       ； 判断此行是否有键按下\nJNZ  KEY2           ； 有键按下转KEY2\nMOV  AL，CL\nADD  AL，08         ； 无键按下,行值寄存器加08\nDAA               \nMOV  CL，AL\n\nRCL  BL，1           ； 求下一行为低电平的输出代码\nDEC  AH              ； 判8行全扫描完了吗\nJNZ  KEY1            ； 若未完转KEY1，继续扫描下一行\nDONE：IRET           ； 若全完则返回\nKEY2：INC  DL        ； 列值寄存器加1(与键值对应)\nRCR  AL，1           ； 列值循环右移1位\nJC   KEY2 ； 判断该列是否为1，为1则无键按下继查下一列\nMOV  AL，CL          ； 为0则有键按下,获得列值\nADD  AL，DL\nDAA                  ；求键值\nMOV  [BUFF]，AL      ；键值送缓冲单元暂存\nJMP  KEYADR          ；转查找功能键的入口地址\nEND  KEY             ；\n\n</code></pre>\n<p>对于键盘处理程序来说，求得键值并不是目的。如果该键是数字键，就应把该键直接送到显示缓冲区进行键值的数字显示；如果该按键是功能键，则应找到该键子程序的入口地址，转而执行该键的功能指令。</p>\n<h2 id=\"54-编码键盘\"><a class=\"anchor\" href=\"#54-编码键盘\">#</a> 5.4 编码键盘</h2>\n<p>上面所述的非编码键盘都是通过软件的方法来实现键盘扫描、键值处理和消除抖动干扰的。显然，这将占用较多的 CPU 时间。在一个较大的控制系统中，不允许主要用来执行键盘程序，这将严重影响系统的实时控制。下面以二进制编码键盘为例，介绍一种硬件方法来识别键盘和解决抖动干扰的键盘编码器及编码键盘接口电路。</p>\n<h3 id=\"541-二进制编码器\"><a class=\"anchor\" href=\"#541-二进制编码器\">#</a> 5.4.1 二进制编码器</h3>\n<p>具有优先级的二进制 8 位编码器 CD4532B 的真值表如下：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203192210095.png\" alt=\"image-20211203192210095\" /></p>\n<p>表示芯片优先级的输入允许端 E&lt;sub&gt;i&lt;/sub &gt; 为 “0” 时，无论编码器的信号输入 I&lt;sub&gt;7&lt;/sub&gt;~I&lt;sub&gt;0&lt;/sub &gt; 为何状态，编码器输出全为 “0”，芯片处于屏蔽状态，同时 E&lt;sub&gt;0&lt;/sub &gt; 为 “0”，也为 “0”，也屏蔽下一级芯片；当输入允许端 E&lt;sub&gt;i&lt;/sub &gt; 为 “1” 时，且编码器的信号输入 I<sub>7</sub>~I<sub>0</sub> 全为 “0”，时，编码输出也为 “0”，但输出允许端 E<sub>0</sub> 为 “1”，表明此编码器输入端无按键按下，却允许优先级低的相邻编码器处于编码状态。这两种情形下的工作状态端 GS 均为 “0”.</p>\n<p>该芯片的 8 个输入端当中，I<sub>0</sub> 的优先级最高，I<sub>7</sub> 的优先级最低。当有多个按键按下时，优先级高的被选中，同时自动屏蔽优先级低的各输入端和下一级芯片（使 E<sub>0</sub> 端为 “0”）。比如处于正常编码状态即 E<sub>i</sub> 为 “1” 时，当 I<sub>0</sub> 端为 “1”，其余输入端无论为 “1” 或 “0”，编码输出均为二进制 000；而当 I<sub>1</sub> 端为 “1” 时，编码输出则为二进制 001；…… 以此类推，输入端的键值号与二进制编码输出一一对应。</p>\n<h3 id=\"542-编码键盘接口电路\"><a class=\"anchor\" href=\"#542-编码键盘接口电路\">#</a> 5.4.2 编码键盘接口电路</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203192554797.png\" alt=\"image-20211203192554797\" /></p>\n<p>如图所示是一种采用两片 CD4532B 构成的 16 个按键的二进制编码接口电路。其中由于 U<sub>1</sub> 的 E<sub>0</sub> 作为 U<sub>2</sub> 的 E<sub>i</sub>，所以按键 S<sub>0</sub> 的优先级最高，S<sub>15</sub> 的优先级最低。U<sub>1</sub> 和 U<sub>2</sub> 的输出 O<sub>2</sub>~O<sub>0</sub> 经或门 A<sub>3</sub>~A<sub>1</sub> 输出，以形成低 3 位编码 D<sub>2</sub>~D<sub>0</sub>。而最高位 D<sub>3</sub> 则由 U<sub>2</sub> 的 GS 产生。当按键 S<sub>8</sub>~S<sub>15</sub> 中有一个闭合时，其输出为 “1”。从而 S<sub>0</sub>~S<sub>15</sub> 中任意一个按键被按下，由编码 D<sub>3</sub>~D<sub>0</sub> 均可以输出相应的 4 位二进制码。</p>\n<p>为了消除键盘按下时产生的抖动干扰，该接口电路还设置了由与非门 B<sub>1</sub>、B<sub>2</sub>、电阻 R<sub>2</sub>、电容 C<sub>2</sub> 组成的单稳电路和由或门 A<sub>4</sub>、电阻 R<sub>1</sub>、电容 C<sub>1</sub> 组成的延时电路，电路中 E、F、G、H 和 I 这五点的波形下图。由于 U<sub>1</sub> 和 U<sub>2</sub> 的 GS 接或门 A<sub>4</sub> 的输入端，所以当按下某键时，A<sub>4</sub> 为高电平，其输出经 R<sub>1</sub> 和 C<sub>1</sub> 延时后使 G 点也为高电位，作为与非门 B<sub>3</sub> 的输入之一。同时，U<sub>2</sub> 的输出信号 E<sub>O</sub> 触发单稳态（B<sub>1</sub> 和 B<sub>2</sub>），在暂稳态持续时间 ΔT 内，其输出 F 点为低电位，也作为与非门 B<sub>3</sub> 的输入之一。由于暂稳态期间（ΔT）E 点电位的变化（即按键的抖动）对其输出 F 点电位无影响，所以此时不论 G 点电位如何，与非门 B<sub>3</sub> 输出（H 点）均为高电位。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203192601701.png\" alt=\"image-20211203192601701\" /></p>\n<h2 id=\"考试要求-4\"><a class=\"anchor\" href=\"#考试要求-4\">#</a> 考试要求</h2>\n<p>5.3.1</p>\n<p>！！！！很重要</p>\n<p>大题：考察阐述矩阵式扫描键盘原理</p>\n<p>选择填空</p>\n<p>5.4.2</p>\n<p>可能考察按下不同开关输出的编码！！！</p>\n<h2 id=\"课后习题-4\"><a class=\"anchor\" href=\"#课后习题-4\">#</a> 课后习题</h2>\n<p>1．简述键盘的两种类型及其特点。</p>\n<p>2．简述何为键盘的抖动干扰及其消除的两种方法。</p>\n<p>3．对比分析说明图 5-3 与图 5-5 两种键盘接口电路的异同。</p>\n<p>4．结合图 5-6，分析说明矩阵式键盘电路的逐行零扫描法的工作过程。</p>\n<p>5．分析说明图 5-8 二进制编码键盘接口电路的工作原理。</p>\n<p>6．结合图 5-8 与图 5-9，分析说明硬件电路消除抖动干扰的过程。</p>\n<h1 id=\"第6章-显示器及其接口技术\"><a class=\"anchor\" href=\"#第6章-显示器及其接口技术\">#</a> 第 6 章 显示器及其接口技术</h1>\n<h2 id=\"引言-5\"><a class=\"anchor\" href=\"#引言-5\">#</a> 引言</h2>\n<p>显示装置：主要用来显示生产过程的工艺状况与运行结果。</p>\n<p>常用的显示期器件：</p>\n<ul>\n<li>显示记录仪：模拟方式连续显示和记录过程参数的动态变化，但其价格都很贵，在目前的计算机控制系统中已很少采用。</li>\n<li>发光二极管 LED：具有结构简单、体积小、功耗低、配置灵活、显示清晰、可靠性高等优点，已被微型计算机控制系统及智能化仪表广泛采用。</li>\n<li>液晶显示器 LCD：则以其功耗极低的特点，占据了从电子表到计算器，从袖珍仪表到便携式微型计算机等应用场合。</li>\n<li>阴极射线管 CRT 图形显示器终端：CRT 终端以其图文并茂的直观生动画面，可以显示生产过程中的各种画面及报表，如生产流程图、显示报警图、趋势曲线图、路查询图等，在很多微型计算机控制系统中，特别在 DDC，SCC 以及 DCS 控制系统中，大都采用 CRT 操作台进行监视和控制。</li>\n</ul>\n<h2 id=\"61-led显示器\"><a class=\"anchor\" href=\"#61-led显示器\">#</a> 6.1 LED 显示器</h2>\n<h3 id=\"611-led显示器的工作原理\"><a class=\"anchor\" href=\"#611-led显示器的工作原理\">#</a> 6.1.1 LED 显示器的工作原理</h3>\n<p>LED：是利用 PN 结把电能转换成光能的固体发光器件，根据制造材料的不同可以发出<strong>红、黄、绿、白</strong>等不同色彩的可见光来。</p>\n<p>伏安特性：类似普通二极管，正向压降约为 2 伏左右，工作电流一般在 10~20 mA。</p>\n<p>结构形式：单段的圆形或方形 LED 常用来显示设备的运行状态，8 段 LED 可以显示各种数字和字符。</p>\n<ul>\n<li>结构形式\n<ul>\n<li>共阴极：发光管的阴极并接成公共端 COM，加高电平灯亮；</li>\n<li>共阳极：发光管的阳极并接成公共端 COM，加低电平灯亮。</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMjEyMjExNzM1LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203212211735.png</span>&quot; alt=&quot;image-20211203212211735&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>实现方法： CPU 的数据线与 LED 各段引脚相连，控制输出的数据，点亮 8 段 LED 不同段的组合，显示等十六进制数。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjAzMjEyMzAwMTc0LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211203212300174.png</span>&quot; alt=&quot;image-20211203212300174&quot; style=&quot;zoom: 67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;C:/Users/LEGION/AppData/Roaming/Typora/typora-user-images/image-20211204105706512.png&quot; alt=&quot;image-20211204105706512&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h3 id=\"612-led显示器的显示方式\"><a class=\"anchor\" href=\"#612-led显示器的显示方式\">#</a> 6.1.2 LED 显示器的显示方式</h3>\n<p>在计算机控制系统中，常利用<em> n</em> 个 LED 显示器构成<em> n</em> 位显示。通常把点亮 LED 某一段的控制称为<strong>段选</strong>，而把点亮 LED 某一位的控制称为<strong>位选或片选</strong>。根据 LED 显示器的段选线、位选线与控制端口的连接方式不同，LED 显示器有<strong>静态显示与动态显示</strong>两种方式，下面以 4 个共阴极 LED 的组合为例进行说明。</p>\n<h4 id=\"1静态显示方式\"><a class=\"anchor\" href=\"#1静态显示方式\">#</a> 1. 静态显示方式</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204110906070.png\" alt=\"image-20211204110906070\" /></p>\n<ul>\n<li>\n<p>结构特点：</p>\n<p>4 个 COM 端连接在一起并接有效电平 ——<strong> 无位选</strong>；</p>\n<p>每个 LED 的段选各自与一个 8 位并行 I/O 口相连 ——<strong> 段选独立</strong>。</p>\n</li>\n<li>\n<p>工作特点：</p>\n<p>缺点是电路中占用 I/O 口资源多，电路复杂，硬件成本高；而且由于同时显示，功耗大</p>\n<p>优点是占用 CPU 机时少，显示稳定可靠</p>\n</li>\n<li>\n<p>适用：规模较大的实时控制系统。</p>\n</li>\n</ul>\n<h4 id=\"2动态显示方式\"><a class=\"anchor\" href=\"#2动态显示方式\">#</a> 2. 动态显示方式</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204110838022.png\" alt=\"image-20211204110838022\" /></p>\n<ul>\n<li>\n<p>结构特点：</p>\n<p>4 个 LED 显示器各自的段选线连在一起，与一个 8 位的 I/O 口相连；</p>\n<p>各自的 COM 端则由另一个 I/O 口进行位选。</p>\n</li>\n<li>\n<p>显示效果：</p>\n<p>要显示不同的字符，只能由 CPU 通过两个 I/O 口依次轮流输出段选码和位选码，循环扫描 LED，使其分时显示。动态显示利用了人的视觉惯性，虽然同一时间只能显示一个，但通过不断地分时轮流扫描显示，只要每个显示保持延时几毫秒，刷新周期不超过 20ms (刷新周期与 LED 工作电流有关)，就可以获得视觉稳定地显示效果。</p>\n</li>\n<li>\n<p>工作特点：</p>\n<p>优点是占用 I/O 资源少，线路简单，硬件成本低；分时显示，功耗略低。</p>\n<p>缺点是需用软件程序不断地循环扫描定时刷新，因而占用了 CPU 的大多数机时。</p>\n</li>\n<li>\n<p>适用：只适用于小型测控系统，特别是专用于状态显示的数字仪器仪表中。</p>\n</li>\n</ul>\n<h3 id=\"613-led显示器接口电路\"><a class=\"anchor\" href=\"#613-led显示器接口电路\">#</a> 6.1.3 LED 显示器接口电路</h3>\n<p>控制系统中的 LED 显示电路，除了要完成把字符串转换为对应的段选码的译码功能外，还要具有数据锁存和驱动的功能以外。其中，<strong>译码功能可以通过硬件译码器完成，也可以通过软件编程实现；而数据锁存与驱动只有依赖硬件电路来实现。</strong></p>\n<h4 id=\"静态显示接口电路\"><a class=\"anchor\" href=\"#静态显示接口电路\">#</a> 静态显示接口电路</h4>\n<p><strong>锁存、译码、驱动均由硬件实现</strong> ——CD4511B</p>\n<p>实现过程：74LS138 输出作为 LED 片选，每两个共用一个片选；每两个段选码共用一个字节。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204195035276.png\" alt=\"image-20211204195035276\" /></p>\n<p>4 片 CD4511B 和一片 74LS138</p>\n<pre><code>MOV     BX，OFFSET  DATA1MOV     AL，[BX]OUT      PORT0，AL    ；显示左2位INC       BXMOV     AL，[BX]OUT      PORT1，AL    ；显示右2位\n</code></pre>\n<h4 id=\"动态显示接口电路\"><a class=\"anchor\" href=\"#动态显示接口电路\">#</a> 动态显示接口电路</h4>\n<ul>\n<li>\n<p>锁存、驱动由硬件电路实现（两个 I/O 并行端口）</p>\n</li>\n<li>\n<p>段选码的译码由软件实现</p>\n</li>\n<li>\n<p>实现过程：各个 LED 段选线对应<strong>并接</strong>到一片 8D 触发器 74LS374（U1）进行段选控制，其间串有 8 个三极管以正向驱动 LED 的阳极；各个 LED 的 COM 端由另一片 74LS374（U2）进行位选控制，其间接有<strong>达林顿阵列驱动器 MC1413（内含 7 对复合三极管）对阴极进行反向驱动</strong>，构成了位选通道；74LS138：控制位选和段选的锁存器 74LS374，Y0=0，锁存 CPU 输出的段选码；</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204201111653.png\" alt=\"image-20211204201111653\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjAxMzU4NzMxLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204201358731.png</span>&quot; alt=&quot;image-20211204201358731&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>软件译码：略</p>\n<h2 id=\"62-lcd\"><a class=\"anchor\" href=\"#62-lcd\">#</a> 6.2 LCD</h2>\n<h3 id=\"引言-6\"><a class=\"anchor\" href=\"#引言-6\">#</a> 引言</h3>\n<p>液晶显示器 LCD (Liquid Crystal Display) 是一种利用液晶的扭曲 / 向列效应制成的新型显示器，它具有功耗极低、体积小、抗干扰能力强、价格廉等特点，目前已广泛应用在各种显示领域，尤其在袖珍仪表和低功耗应用系统中。LCD 可分为<strong>段位式、字符式和点阵式</strong>三种。如右图所示。</p>\n<h3 id=\"621-lcd显示器结构原理\"><a class=\"anchor\" href=\"#621-lcd显示器结构原理\">#</a> 6.2.1 LCD 显示器结构原理</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjAyMDE3NzU4LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204202017758.png</span>&quot; alt=&quot;image-20211204202017758&quot; style=&quot;zoom: 67%;&quot; /&gt;</p>\n<p>LCD 是借助外界光线照射液晶材料而实现显示的<strong>被动显示器件</strong>。液晶是一种介于液体与固体之间的热力学的中间稳定相，<strong>在一定的温度范围内既有液体的流动性和连续性，又有晶体的各向异性。</strong></p>\n<h3 id=\"622-lcd的驱动方式\"><a class=\"anchor\" href=\"#622-lcd的驱动方式\">#</a> 6.2.2 LCD 的驱动方式</h3>\n<ul>\n<li>直接驱动：显示器件只有一个背极（即下玻璃电极基板），但每个字符段都有独立的引脚；</li>\n<li>多极驱动：显示器具有多个背极，各字符段按点阵结构排列，这是<strong>显示字段较多时常采用的驱动方式</strong>。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204202813184.png\" alt=\"image-20211204202813184\" /></p>\n<ul>\n<li>上图总结：\n<ul>\n<li>电压相位相同，两电极相位差为 0，字段不显示；电压相位不相同，字段显示。</li>\n<li>交流电压驱动</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204203338433.png\" alt=\"image-20211204203338433\" /></p>\n<ul>\n<li>X 接地，显示与否取决于 Y，Y=1 正常显示</li>\n<li>从低到高：D C B A</li>\n</ul>\n<h3 id=\"623-段位式lcd接口电路\"><a class=\"anchor\" href=\"#623-段位式lcd接口电路\">#</a> 6.2.3 段位式 LCD 接口电路</h3>\n<p><img data-src=\"C:/Users/LEGION/AppData/Roaming/Typora/typora-user-images/image-20211204203743304.png\" alt=\"image-20211204203743304\" /></p>\n<ul>\n<li>组成：\n<ul>\n<li>一个 8 位并行 I/O 口作为译码驱动</li>\n<li>6 片 BCD 码 7 段译码驱动器 4056</li>\n<li>2 片 4 位液晶显示启动器 4054</li>\n<li>1 片单稳态多谐振荡器</li>\n</ul>\n</li>\n<li>由单片机 P1 口的低 4 位输出 LCD 的段选码而由高 4 位输出位选码</li>\n<li>4054、4056 的锁存输出功能，使该电路称为静态显示电路</li>\n<li>为了与液晶显示的低功耗相适应，全部芯片皆选用 CMOS 器件。</li>\n</ul>\n<p>显示程序略</p>\n<h3 id=\"624-点阵式lcd接口电路\"><a class=\"anchor\" href=\"#624-点阵式lcd接口电路\">#</a> 6.2.4 点阵式 LCD 接口电路</h3>\n<h4 id=\"引言-7\"><a class=\"anchor\" href=\"#引言-7\">#</a> 引言</h4>\n<p>** 点阵式 LCD 不但可以显示字符，而且可以显示各种图形及汉字。** 把点阵式 LCD 与配套或选定的驱动器、控制器集成在一起，就组成点阵式图形液晶显示模块，控制器的种类很多，比如日本东芝的 T6963, 日立的 HD61880, 精工的 SED1330/SED1335 等。现以 12864 点阵式 LCD 液晶显示模块为例加以说明。</p>\n<p>液晶显示模块 12864 主要由行 / 列驱动器及 128×64 全点阵液晶显示器组成。内部含有国标一级、二级简体中文字库和 128 个 16×8 点的 ASCII 字符集。可以同时显示 8×4 个（16×16 点阵）汉字和图形显<strong>示。它与 CPU 的接口连线可采用并行或串行两种方式。</strong></p>\n<h4 id=\"1液晶模块接线原理\"><a class=\"anchor\" href=\"#1液晶模块接线原理\">#</a> 1. 液晶模块接线原理</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjA1MTMxNTY0LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204205131564.png</span>&quot; alt=&quot;image-20211204205131564&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h4 id=\"2液晶模块指令说明\"><a class=\"anchor\" href=\"#2液晶模块指令说明\">#</a> 2. 液晶模块指令说明</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204205401338.png\" alt=\"image-20211204205401338\" /></p>\n<h4 id=\"3软件初始化\"><a class=\"anchor\" href=\"#3软件初始化\">#</a> 3. 软件初始化</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjA1NDMwMzczLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204205430373.png</span>&quot; alt=&quot;image-20211204205430373&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h4 id=\"4应用举例\"><a class=\"anchor\" href=\"#4应用举例\">#</a> 4. 应用举例</h4>\n<p>液晶字符显示使用时还应注意以下 3 点：</p>\n<ul>\n<li><strong>要在某一个位置显示中文字符时，应先设定显示字符位置，即先设定显示地址，再写入中文字符编码。</strong></li>\n<li>显示 ASCII 字符过程与显示中文字符过程相同。不过在<strong>显示连续字符时，只须设定一次显示地址</strong>，由模块自动对地址加 1 指向下一 个字符位置，否则，显示的字符中将会有一个空 ASCII 字符位置。</li>\n<li><strong>当字符编码为 2 字节时，应先写入高位字节，再写入低位字节。</strong></li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204205604927.png\" alt=\"image-20211204205604927\" /></p>\n<h2 id=\"63-图形显示器\"><a class=\"anchor\" href=\"#63-图形显示器\">#</a> 6.3 图形显示器</h2>\n<h3 id=\"631-图形显示器概述\"><a class=\"anchor\" href=\"#631-图形显示器概述\">#</a> 6.3.1 图形显示器概述</h3>\n<p>常用的图形显示器有两种：CRT 显示器和 TFT 平面显示器。</p>\n<ul>\n<li>\n<p>CRT 显示器</p>\n<ul>\n<li>\n<p>CRT（Cathod Ray Tube）显示器：由一个图形监示器和相应的控制电路组成。在工业计算机中，插入一块 VGA/TVGA 图形控制板即可实现功能很强的图象显示功能。目前是计算机控制系统应用最多的一种图形显示技术。</p>\n<p>分辨率要求很高，或者显示速度要求很高时，使用智能图形终端，含有图形显示控制器（GDC），但是价格较高</p>\n</li>\n<li>\n<p>优点：硬件技术成熟，软件支持丰富，价格较为低廉</p>\n</li>\n<li>\n<p>缺点：体积与功耗大，易受振动和冲击，容易受射线辐射、磁  场干扰，因此在恶劣工况下须采用特殊加固和屏蔽措施。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>TFT 显示器</p>\n<ul>\n<li>体积小，耗电省，如最薄的壁挂式机型厚度仅为 5cm (2in)；</li>\n<li>可靠性高，寿命长，不易受振动、冲击和射线的干扰影响；</li>\n<li>显示颜色 256 种基色，可扩展至 25600 种组合。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"632-图形显示画面\"><a class=\"anchor\" href=\"#632-图形显示画面\">#</a> 6.3.2 图形显示画面</h3>\n<h4 id=\"引言-8\"><a class=\"anchor\" href=\"#引言-8\">#</a> 引言</h4>\n<p>图形显示器作用：直观形象地监视和操作工业生产过程。</p>\n<p>显示画面功能： 反映出整个生产的工艺流程，便于单元操作控制；要有实时动态数据，又要有历史记忆功能。</p>\n<p>显示画面功能内容：调节器、指示仪、记录仪、报警仪、模拟屏以及开关按钮、指示灯等。</p>\n<p>设计语言： 早期用汇编语言来编写，后来多采用高级语言，现在采用组态软件，诸如美国的 Intouch、Fix 和德国的 Wincc，国内的组态王、力控、MCGS 和 Controx 等。</p>\n<p>常用的显示画面：有总貌画面、分组画面、点画面、流程图画面、趋势曲线画面、报警显示画面、操作指导画面等</p>\n<h4 id=\"总貌画面\"><a class=\"anchor\" href=\"#总貌画面\">#</a> 总貌画面</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA0MjExMDUxNTgwLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204211051580.png</span>&quot; alt=&quot;image-20211204211051580&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h4 id=\"分组画面\"><a class=\"anchor\" href=\"#分组画面\">#</a> 分组画面</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204211950917.png\" alt=\"image-20211204211950917\" /></p>\n<p>可控制回路进行必要操作</p>\n<h4 id=\"点画面\"><a class=\"anchor\" href=\"#点画面\">#</a> 点画面</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204212112822.png\" alt=\"image-20211204212112822\" /></p>\n<p>点画面可以进行参数调节</p>\n<h4 id=\"趋势曲线画面\"><a class=\"anchor\" href=\"#趋势曲线画面\">#</a> 趋势曲线画面</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204212250882.png\" alt=\"image-20211204212250882\" /></p>\n<p>实时记录趋势与历史记录趋势</p>\n<h4 id=\"报警显示画面\"><a class=\"anchor\" href=\"#报警显示画面\">#</a> 报警显示画面</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211204212655911.png\" alt=\"image-20211204212655911\" /></p>\n<h4 id=\"操作指导画面\"><a class=\"anchor\" href=\"#操作指导画面\">#</a> 操作指导画面</h4>\n<p>为了安全方便地操作，设计者<strong>按操作顺序预先将各项操作指令存入计算机</strong>，实际操作时，再以操作指导画面形式显示出来，用以指导操作。如果出现误操作，计算机会拒绝接收并显示出错标志，从而保证了安全操作。</p>\n<h2 id=\"考试要求-5\"><a class=\"anchor\" href=\"#考试要求-5\">#</a> 考试要求</h2>\n<p>共阴共阳电路工作原理</p>\n<p>静态显示方式、动态显示方式</p>\n<p>可以出大题</p>\n<p>LED 电路给出，写出完整工作原理 / 阐述原理</p>\n<p>6.1.3</p>\n<p>设计显示器接口不考察</p>\n<p>分析可能会考察</p>\n<p>实际应用，不会去考程序设计，考察工作大致流程</p>\n<p>6.2</p>\n<p>不必过多了解，LCD 本身的显示原理，不考大题，选填判</p>\n<h2 id=\"课后习题-5\"><a class=\"anchor\" href=\"#课后习题-5\">#</a> 课后习题</h2>\n<p>1. 结合图 6-1，简述 8 段 LED 显示器的结构与工作原理。</p>\n<p>2. 结合图 6-2，说明 8 段 LED 显示器段选码的概念及其 0~F 的段选码表。</p>\n<p>3．以 4 位 LED 为例，说明 LED 的静态显示原理及其显示效果、特点及适用场合。</p>\n<p>4．以 4 位 LED 为例，说明 LED 的动态显示原理及其显示效果、特点及适用场合。</p>\n<p>5．结合图 6-5，简述 LED 静态显示硬件译码电路的工作过程。</p>\n<p>6．结合图 6-6，简述 LED 动态显示软件译码电路的工作过程。</p>\n<p>7．LCD 液晶显示器有哪几种类型？简述其作用。</p>\n<p>8．结合图 6-9、图 6-10，分析说明 7 段 LCD 液晶显示器的译码驱动电路。</p>\n<p>9．在计算机控制系统中，常用的监控显示画面有哪些？</p>\n<h1 id=\"第7章数据处理技术\"><a class=\"anchor\" href=\"#第7章数据处理技术\">#</a> 第 7 章数据处理技术</h1>\n<h2 id=\"引言-9\"><a class=\"anchor\" href=\"#引言-9\">#</a> 引言</h2>\n<p>数据采集：在计算机控制系统中，是最基本的一种模式。一般是通过传感器、变送器把生产过程的各种物理参数转换成电信号，然后经 A/D 通道或 DI 通道，把数字量送入计算机中。</p>\n<p>数据处理：计算机在对这些数字量进行显示和控制之前，还必须根据需要进行相应的数值计算即数据处理。为了满足不同系统的需要，设计出了许多有效的数据处理技术方法，如<strong>预处理，数字滤波，标度变换，查表和越限报警</strong>等。</p>\n<h2 id=\"71-数据预处理技术\"><a class=\"anchor\" href=\"#71-数据预处理技术\">#</a> 7.1 数据预处理技术</h2>\n<p>对数据的预处理是计算机控制系统数据处理的基础，这包括：数字凋零、系统校准技术以及输入、输出数据的极性与字长的预处理技术。</p>\n<h3 id=\"711-系统误差的自动校准\"><a class=\"anchor\" href=\"#711-系统误差的自动校准\">#</a> 7.1.1 系统误差的自动校准</h3>\n<p>系统误差：在控制系统的测量输入通道中，一般均存在放大器等器件的<strong>零点偏移和漂移</strong>，会造成放大电路<strong>的增益误差及器件参数的不稳定等现象</strong>。</p>\n<p>特点：是在一定的测量条件下，其变化规律是可以掌握的，产生误差的原因一般也是知道的。</p>\n<p>处理方法：通过适当的技术方法如数字调零、系统校准来确定并加以校正的，一般采用<strong>软件程序</strong>进行处理。</p>\n<h4 id=\"1数字凋零\"><a class=\"anchor\" href=\"#1数字凋零\">#</a> 1. 数字凋零</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205134744967.png\" alt=\"image-20211205134744967\" /></p>\n<p>数字调零：处理由零点偏移造成系统误差，通过软件进行零点的调整</p>\n<p>电路：多路开关、前置放大器、A/D 转换器、CPU</p>\n<p>原理：CPU 分时巡回采集 1 路<strong>校准电路</strong>至 n 路传感变送器送来的电压信号。</p>\n<p>①寻找零点偏移值：第 0 路为校准信号即接地信号，理论上电压＝0，CPU 采样值＝零，而实际上产生了一个不等于零的数值，此值零点偏移值<em> N</em>0；</p>\n<p>②然后依次采集 1、2、… <em>n</em> 路，采样值<em> N</em>1、<em>N</em>2、… <em>N</em>n 值就是实际值＋零点偏移值<em> N</em>0。计算机要进行的数字调零恢复本次测量的实际值＝（<em>Ni- N</em>0）。</p>\n<ul>\n<li>特点：此方法，可去掉放大电路、A/D 转换电路本身的偏移及随时间与温度而发生的各种漂移的影响，从而大大降低对这些电路器件的偏移值的要求，降低硬件成本。</li>\n<li>缺点：不能校正由传感器本身引入的误差。</li>\n</ul>\n<h4 id=\"2系统校准\"><a class=\"anchor\" href=\"#2系统校准\">#</a> 2. 系统校准</h4>\n<p>原因：克服由传感器本身引入的误差。</p>\n<ul>\n<li>\n<p>VR ：标准输入信号；</p>\n<p>NR： VR 对应采样值</p>\n<p>V：实际被测输入信号；</p>\n<p>N： V 对应采样值</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205140124878.png\" alt=\"image-20211205140124878\" /></p>\n</li>\n<li>\n<p>适用场合：传感器特性随时间会发生变化的场合</p>\n</li>\n</ul>\n<h3 id=\"712-数字字长的预处理\"><a class=\"anchor\" href=\"#712-数字字长的预处理\">#</a> 7.1.2 数字字长的预处理</h3>\n<p>为了满足不同精度的要求，数据在进行数字滤波、标度变换和控制运算后，必须对数字量的位数加以处理。</p>\n<h4 id=\"1输入位数大于输出位数\"><a class=\"anchor\" href=\"#1输入位数大于输出位数\">#</a> 1. 输入位数大于输出位数</h4>\n<p>处理方法：<strong>忽略高位数</strong>的最低几位。如：10 位 A/D 转换器的输 入值为 0011111010，此值经处理后送入 8 位 D/A 转换 器的值就变为 00111110。这在计算机中通过向<strong>右移位</strong>的方法是很容易实现的。</p>\n<h4 id=\"2输入位数小于输出位数\"><a class=\"anchor\" href=\"#2输入位数小于输出位数\">#</a> 2. 输入位数小于输出位数</h4>\n<p>处理方法：将 8 位数左移两位构成 10 位数，最低两位用 “0” 填充</p>\n<p>如：转换前的 8 位输入值为：××××××××；</p>\n<p>转换后的 10 位输出值为：××××××××00。</p>\n<h2 id=\"72-数字滤波方法\"><a class=\"anchor\" href=\"#72-数字滤波方法\">#</a> 7.2 数字滤波方法</h2>\n<h3 id=\"引言-10\"><a class=\"anchor\" href=\"#引言-10\">#</a> 引言</h3>\n<p>数字滤波：就是计算机系统对输入信号采样多次，然后用某种计算方法进行数字处理，以削弱或滤除干扰噪声造成的随机误差，从而获得一个真实信号的过程。</p>\n<p>这种滤波方法只是根据预定的滤波算法编制相应的程序，实质上是一种程序滤波，因而可靠性高，稳定性好，修改滤波参数也容易，而且一种滤波子程序可以被多个通道所共用，成本很低。</p>\n<p>不足是需要占用 CPU 的机时。</p>\n<h3 id=\"721-平均值滤波\"><a class=\"anchor\" href=\"#721-平均值滤波\">#</a> 7.2.1 平均值滤波</h3>\n<p>种类：算术平均、去极值平均、加权平均、滑动平均</p>\n<h4 id=\"1算数平均\"><a class=\"anchor\" href=\"#1算数平均\">#</a> 1. 算数平均</h4>\n<p>算术平均滤波：在采样周期 T 内，对测量信号<em> y</em> 进行<em> m</em> 次采 样， 把<em> m</em> 个采样值相加后的算术平均值作为本次的有效采样值，即：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTQyNDU1MTI1LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205142455125.png</span>&quot; alt=&quot;image-20211205142455125&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>缺点：不能将明显的偶然的脉冲干扰消除，只是把其平均到采样结果中，从而降低了测量精度。</p>\n<p><strong>适用于周期性干扰的信号滤波。</strong></p>\n<h4 id=\"2去极值滤波\"><a class=\"anchor\" href=\"#2去极值滤波\">#</a> 2. 去极值滤波</h4>\n<p>连续采样的<em> m</em> 个数据去掉其中的最大值与最小值，然后计算余下的<em> m</em>-2 个数据的算术平均值。</p>\n<p>适用场合：工业场合经常遇到的<strong>尖脉冲干扰</strong>的信号滤波。</p>\n<p>** 缺点：算数平均和取极值平均滤波均存在平滑性和灵敏度的矛盾。** 采样次数太少则平滑效果差，次数较多则灵敏度下降，对测量参数变化趋势不敏感。</p>\n<h4 id=\"3加权平均滤波\"><a class=\"anchor\" href=\"#3加权平均滤波\">#</a> 3. 加权平均滤波</h4>\n<p>加权平均滤波：对每次采样值不以相同的权系数而以增加新鲜采样值的权重相加。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTQzNDUxMjcwLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205143451270.png</span>&quot; alt=&quot;image-20211205143451270&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<ul>\n<li>\n<p>C<sub>i</sub> 为加权系数，<strong>先小后大，且均为小于 1 但总和等于 1 的小数</strong>，既满足：</p>\n<ul>\n<li>\n<p><em>C1 + C2 +</em> <em>… + Cm</em> = 1</p>\n<p><em>Cm &gt; Cm-1 &gt;</em> <em>…C1</em> &gt; 0</p>\n</li>\n</ul>\n</li>\n<li>\n<p>C<sub>i</sub> 的取值应视具体情况选取，并通过调试确定。</p>\n</li>\n<li>\n<p>例如，某纯滞后时间为<em> τ</em> 被控对象，采用<em> m</em> =4 的加权平均滤波算式为：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205143931154.png\" alt=\"image-20211205143931154\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205144309162.png\" alt=\"image-20211205144309162\" /></p>\n</li>\n</ul>\n<h4 id=\"4滑动平均滤波\"><a class=\"anchor\" href=\"#4滑动平均滤波\">#</a> 4. 滑动平均滤波</h4>\n<p>适用场合：前三种的平均滤波算法有一个共同点：即每取得一个有效采样值必须连续进行若干次采样。系统的采样速度较慢或采样信号变化较快时，系统的实时性就无法得到保证。</p>\n<p>滑动平均滤波：在每个采样周期只采样一次，将这一次采样值和过去的若干次采样值一起求平均，所得结果即为有效采样值。</p>\n<p>滑动平均滤波算法优势：实时性好，提高了系统响应速度。</p>\n<p>具体做法：可由循环队列结构方式来实现数据的存放，比如 m 个采样求滑动平均，只要在 RAM 中开辟 m 个数据暂存区，每次采集一个数据便存入暂存区的队尾，同时冲掉队首的一个数据，这样在存储器的队列中始终保持有 m 个最新的数据。</p>\n<h3 id=\"722-中值滤波\"><a class=\"anchor\" href=\"#722-中值滤波\">#</a> 7.2.2 中值滤波</h3>\n<ul>\n<li>\n<p>将信号<em> y</em> 的连续<em> m</em> 次采样值按大小进行排序，取其中间值作为本次的有效采样值。本算法为取中值，故采样次数<em> m</em> 应为奇数，一般 3~5 次即可。</p>\n</li>\n<li>\n<p>编制中值滤波的算法程序：首先把<em> m</em> 个采样值从小到大（或从大到小）进行排队，这可采用几种常规的排序算法如<strong>冒泡算法</strong>，然后再取中间值。</p>\n</li>\n<li>\n<p>适用场合：中值滤波对<strong>缓变过程中的偶然因素</strong>引起的波动或采样器不稳定造成的误差所引起的脉动干扰比较有效，而对快速变化过程 (如流量) 的信号采样则不适用。</p>\n</li>\n</ul>\n<h3 id=\"723-限幅滤波\"><a class=\"anchor\" href=\"#723-限幅滤波\">#</a> 7.2.3 限幅滤波</h3>\n<ul>\n<li>\n<p>把两次相邻的采样值相减，求其增量的绝对值，再与两次采样所允许的最大差值 Δ<em>Y</em> 进行比较，如果小于或等于 Δ<em>Y</em>，表示本次采样值 <em>y</em>(<em>k</em>) 是真实的，则取<em> y</em>(<em>k</em>) 为有效采样值；反之，<em>y</em>(<em>k</em>) 是不真实的， 则取上次采 样值<em> y</em>(<em>k</em>-1) 作为本次有效采样值。</p>\n</li>\n<li>\n<p>当 |<em>y</em>(<em>k)-y(k-1)</em> |≤ Δ<em>Y</em> 时，则取 <em>y</em>(k)=<em>y(k)</em></p>\n<p>当 |<em>y</em>(<em>k)-y(k-1)</em> | ＞Δ<em>Y</em> 时，则取<em> y</em>(<em>k</em>)=<em>y</em>(k-1)</p>\n<ul>\n<li>式中：\n<ul>\n<li><em>y</em>(<em>k</em>)──t=kT 时的采样值；</li>\n<li><em>y</em> (K-1) ──t=(k-1) T 时的采样值；</li>\n<li>Δ<em>Y</em>──相邻两次采样值所允许的最大偏差，其大小取决于控制系统采样周期 T 和信号 Y 的正常变化率。</li>\n</ul>\n</li>\n</ul>\n<p>适用场合：对随机干扰或采样器不稳定引起的失真有良好的滤波效果。</p>\n</li>\n</ul>\n<h3 id=\"724-惯性滤波\"><a class=\"anchor\" href=\"#724-惯性滤波\">#</a> 7.2.4 惯性滤波</h3>\n<p>不考</p>\n<h2 id=\"73-标度变换技术\"><a class=\"anchor\" href=\"#73-标度变换技术\">#</a> 7.3 标度变换技术</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>生产中的各种参数都有着不同的量纲和数值，但在计算机控制系统的采集、A/D 转换过程中已变为无量纲的数据，当系统进行显示、记录、打印和警报等操作时，<strong>必须把这些测得的参数还原为无量纲的物理量，这就需要进行标度变换</strong>。</p>\n<p>标度：衡量某种物理量或参数的量纲。</p>\n<p>变换：从一种物理量转换为另一种物理量。</p>\n<p>标度变换的任务：把计算机系统检测的对象参数的二进制数值还原变换为原物理量的工程实际值。</p>\n<ul>\n<li>\n<p>下图为温度测控系统标度变换原理图：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205151616981.png\" alt=\"image-20211205151616981\" /></p>\n</li>\n<li>\n<p>标度变换方法：线性式变换、非线性式变换、多项式变换查表法</p>\n</li>\n<li>\n<p>方法选择依据：<strong>被测参数的工程量与转换后数字量间的函数关系</strong>；<strong>通常传感器的输入输出特性</strong>决定了此函数关系，从而决定标度变换方法。</p>\n</li>\n</ul>\n<h3 id=\"731-线性式变换\"><a class=\"anchor\" href=\"#731-线性式变换\">#</a> 7.3.1 线性式变换</h3>\n<p>线性标度变换：最常用的标度变换方式。</p>\n<p>前提条件：传感器输出信号与被测参数间呈<strong>线性关系</strong>。</p>\n<ul>\n<li>\n<p>数组量 N<sub>X</sub> 对应的工程量 A<sub>X</sub> 的线性标度变换公式：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205152347677.png\" alt=\"image-20211205152347677\" /></p>\n<p>A<sub>0</sub>：一次测量仪表的下限（测量范围最小值）</p>\n<p>A<sub>m</sub>：一次测量仪表的上限（测量范围最大值）</p>\n<p>A<sub>X</sub>：实际测量值（工程量）</p>\n<p>N<sub>0</sub>：仪表下限所对应的数字量</p>\n<p>N<sub>m</sub>：实际测量值所对应的数字量</p>\n<p>N<sub>x</sub>：实际测量值所对应的数字量</p>\n</li>\n<li>\n<p>N<sub>0</sub> = 0 时的方程</p>\n</li>\n<li>\n<p>A<sub>0</sub> = 0 时的方程</p>\n</li>\n<li>\n<p>例 7-1 !!!</p>\n</li>\n</ul>\n<h3 id=\"732-非线性式变换\"><a class=\"anchor\" href=\"#732-非线性式变换\">#</a> 7.3.2 非线性式变换</h3>\n<p>条件：传感器的输出信号与被测参数之间呈<strong>非线性关系</strong>，但函数关系可用解析式来表示。</p>\n<p>例如，在差压法测流量中，流量与差压间的关系为：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTU0MDIzOTEwLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205154023910.png</span>&quot; alt=&quot;image-20211205154023910&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>式中：</p>\n<p><em>Q</em>—— 流体流量；</p>\n<p><em>K</em> —— 刻度系数，与流体的性质及节流装置的尺寸有关；</p>\n<p>ΔP —— 节流装置前后的差压。</p>\n<ul>\n<li>\n<p>非线式标度变换公式：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205155421634.png\" alt=\"image-20211205155421634\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205155427801.png\" alt=\"image-20211205155427801\" /></p>\n</li>\n</ul>\n<h3 id=\"733-多项式变换\"><a class=\"anchor\" href=\"#733-多项式变换\">#</a> 7.3.3 多项式变换</h3>\n<p>适用场合：传感器输出信号与被测参数间呈非线性关系</p>\n<p>应用条件：<strong>非线性函数关系不可用解析式来表示</strong></p>\n<p>采用方法：插值多项式来进行标度变换</p>\n<p>插值多项式－用一个<em> n</em> 次多项式来代替某种非线性函数关系。</p>\n<p>插值原理－被测参数<em> y</em> 与传感器输出值<em> x</em> 具有函数关系为       <em>y</em>=<em>f</em>( <em>x</em> )，若已知<em> n</em>+1 个相异点处的函数值 为： f ( x<sub>0</sub> ) = y<sub>0</sub>，f( x<sub>1</sub> ) = y<sub>1</sub>，…， f( x<sub>n</sub> ) = y<sub>n</sub></p>\n<p>现构造一个<em> n</em> 次多项式 P<sub>n</sub>( x ) = a<sub>n</sub>x<sup>n</sup>+ a<sub>n-1</sub>x<sup>n-1</sup>+ …+ a<sub>1</sub>x + a<sub>0</sub></p>\n<p>去逼近函数<em> y</em> = <em>f</em>( <em>x</em> )，把<em> n</em>+1 个测量值代入<em> Pn</em>( <em>x</em> )，可获得<em> n</em>+1 个一次方程组：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTU1OTQ0Nzg0LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205155944784.png</span>&quot; alt=&quot;image-20211205155944784&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>举例 用热敏电阻测量温度的例子</p>\n<p>热敏电阻的阻值与温度之间的关系是非线性的，而且无法用确切函数式表示。现构造一个三阶多项式 P3 (R) 来逼近这种函数关系。n+1 测量点如下表：</p>\n<p>举例 用热敏电阻测量温度的例子</p>\n<p>热敏电阻的阻值与温度之间的关系是非线性的，而且无法用确切函数式表示。现构造一个三阶多项式 P3 (R) 来逼近这种函数关系。n+1 测量点如下表：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205160147105.png\" alt=\"image-20211205160147105\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTYwMjMzMDI0LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205160233024.png</span>&quot; alt=&quot;image-20211205160233024&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTYwMzAyODIzLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205160302823.png</span>&quot; alt=&quot;image-20211205160302823&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>插值法中插值点的选择对于逼近的精度有很大影响，通常在函数 y = f (x) 的曲线上曲率大的地方适当加密插值点。</p>\n<p>CPU 影响：增加插值点和多项式的次数能提高逼近精度，但是会增加计算时间。</p>\n<p>较好的方法：采用分段插值法。将逼近的函数根据其变换情况分为几段，然后将每一段区间分别用直线或抛物线去逼近。分段插值的分段点的选取可以按照实际曲线的情况灵活决定，既可以采用等距分段法，又可以采用非等距分段法。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205161203575.png\" alt=\"image-20211205161203575\" /></p>\n<p>分段数越多，线性化精度越高，软件开销也相应增加。</p>\n<p>当分段数多到线段缩成一个点时，实际上就是另一种方法 —— 查表法。</p>\n<h3 id=\"734-查表法\"><a class=\"anchor\" href=\"#734-查表法\">#</a> 7.3.4 查表法</h3>\n<p>查表法：就是把事先计算或测得的数据按照一定顺序编制成表格</p>\n<p>查表程序的任务：就是根据被测参数的值或者中间结果，查出最终所需要的结果。</p>\n<p>具体的查表方法：顺序查表法，计算查表法，对分搜索法等。</p>\n<h4 id=\"1顺序查表法\"><a class=\"anchor\" href=\"#1顺序查表法\">#</a> 1. 顺序查表法</h4>\n<p>顺序查表法是<strong>针对无序排列表格</strong>的一种方法。其查表方法类似人工查表。因为无序表格中所有各项的<strong>排列均无一定的规律</strong>，所以只能按照顺序从第一项开始逐项寻找，直到找到所要查找的关键字为止。顺序查表法虽然比较 “笨”，但对于<strong>无序表格或较短表格</strong>而言，仍是一种比较常用的方法。</p>\n<h4 id=\"2计算查表法\"><a class=\"anchor\" href=\"#2计算查表法\">#</a> 2. 计算查表法</h4>\n<p>根据所给的数据元素 X<sub>i</sub> ，通过一定的计算，求出元素 Xi 所对应的数值的地址，然后将该地址单元的内容取出即可。</p>\n<p>这种<strong>有序表格</strong>要求各元素在表中的排列格式及所占用的空间必须一致，而且各元素是严格按顺序排列。其关键在于找出一个计算表地址的公式，<strong>只要公式存在，查表的时间与表格的长度无关</strong>。正因为它对表格的要求比较严格，并非任何表格均可采用。<strong>通常它适用于某些数值计算程序、功能键地址转移程序以及数码转换程序等。</strong></p>\n<h4 id=\"3对分搜索法\"><a class=\"anchor\" href=\"#3对分搜索法\">#</a> 3. 对分搜索法</h4>\n<p>先取数组的中间值 D=<em>n</em>/2 进行查找，与要搜索的<em> X</em> 值进行比较，若相等，则查到。对于从小到大的顺序来说，如果 X＞<em>n</em>/2 项，则下一次取<em> n</em>/2-<em>n</em> 间的中值，即 3<em>n</em>/4 与 X 进行比较；若 X＜<em>n</em>/2 项，则取 0~<em>n</em>/2 的中值，即<em> n</em>/4 与 X 进行比较。如此比较下去，则可逐次逼近要搜索的关键字，直到找到为止。</p>\n<h2 id=\"74-越界警报处理\"><a class=\"anchor\" href=\"#74-越界警报处理\">#</a> 7.4 越界警报处理</h2>\n<h3 id=\"741-越限报警程序\"><a class=\"anchor\" href=\"#741-越限报警程序\">#</a> 7.4.1 越限报警程序</h3>\n<p>上限报警：若<em> XK</em> ＞ <em>X</em>H 则发出上限报警，否则继续执行原定操作。</p>\n<p>下限报警：若<em> XK</em> ＜ <em>X</em>L ，则下限报警，否则继续执行原定操作。</p>\n<p>上下限报警：若<em> XK</em> ＞ <em>X</em>H，则上限报警，否则判断<em> XK</em> ＜ <em>X</em>L 否？若是则下限报警，否则继续执行原定操作。</p>\n<p>具体设计报警程序时，为了避免测量值在极限值一点处来回摆动造成频繁报警，一般应在极限值附近设置一个<strong>回差带</strong>。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162520736.png\" alt=\"image-20211205162520736\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162645265.png\" alt=\"image-20211205162645265\" /></p>\n<h3 id=\"742-越限报警方式\"><a class=\"anchor\" href=\"#742-越限报警方式\">#</a> 7.4.2 越限报警方式</h3>\n<h4 id=\"1普通声光报警\"><a class=\"anchor\" href=\"#1普通声光报警\">#</a> 1. 普通声光报警</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162858496.png\" alt=\"image-20211205162858496\" /></p>\n<h4 id=\"2模拟声光报警\"><a class=\"anchor\" href=\"#2模拟声光报警\">#</a> 2. 模拟声光报警</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162949538.png\" alt=\"image-20211205162949538\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205162958377.png\" alt=\"image-20211205162958377\" /></p>\n<h4 id=\"3语音声光报警\"><a class=\"anchor\" href=\"#3语音声光报警\">#</a> 3. 语音声光报警</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205163533852.png\" alt=\"image-20211205163533852\" /></p>\n<h2 id=\"考试要求-6\"><a class=\"anchor\" href=\"#考试要求-6\">#</a> 考试要求</h2>\n<p>总体</p>\n<p>填空选择</p>\n<p>大题：各种滤波方法，给一种滤波方法，让你处理数据</p>\n<p>7.1 选填判</p>\n<p>7.2 7.2.1 7.2.2 7.2.3 为重点，7.2.4 不考，只看前三种</p>\n<p>7.3.1 标出显示结果或者的根据显示情况反推，千万写一下 7-1，背好公式</p>\n<p>主要是掌握线性变换，非线性及其后面了解为主</p>\n<h2 id=\"课后习题-6\"><a class=\"anchor\" href=\"#课后习题-6\">#</a> 课后习题</h2>\n<p>1．在计算机控制系统中，一般要对测量数据进行哪些予处理技</p>\n<p>术？</p>\n<p>2．何为数字调零？何为系统校准？</p>\n<p>3．简述数字滤波及其特点。</p>\n<p>4．简述各种数字滤波方法的原理或算法及适用场合。</p>\n<p>5．结合图 7-3，分析说明标度变换的概念及其变换原理。</p>\n<p>6．某温度测量系统（假设为线性关系）的测温范围为 0~150℃，</p>\n<p>经 ADC0809 转换后对应的数字量为 00H~FFH，试写出它的标</p>\n<p>度变换算式。</p>\n<p>7．在数据处理中，何为查表法？它能完成哪些功能？一般有哪</p>\n<p>些查表方法？</p>\n<p>8．在计算机控制系统中，为什么要设置越限报警？有哪些情况</p>\n<p>需要报警？</p>\n<h1 id=\"第8章-抗干扰技术\"><a class=\"anchor\" href=\"#第8章-抗干扰技术\">#</a> 第 8 章 抗干扰技术</h1>\n<h2 id=\"引言-11\"><a class=\"anchor\" href=\"#引言-11\">#</a> 引言</h2>\n<p>计算机控制系统的被控变量分布在生产现场的各个角落，因而计算机是处于干扰频繁的恶劣环境中 **，干扰是有用信号以外的噪声，这些干扰会影响系统的测控精度，降低系统的可靠性，甚至导致系统的运行混乱，造成生产事故。**</p>\n<p>但干扰是客观存在的，所以，人们必须研究干扰，以采取相应的抗干扰措施。本章主要讨论干扰的来源、传播途径及抗干扰的措施。</p>\n<h2 id=\"81干扰的来源与传播途径\"><a class=\"anchor\" href=\"#81干扰的来源与传播途径\">#</a> 8.1 干扰的来源与传播途径</h2>\n<h3 id=\"811-干扰的来源\"><a class=\"anchor\" href=\"#811-干扰的来源\">#</a> 8.1.1 干扰的来源</h3>\n<p>分为外部干扰和内部干扰。</p>\n<p>外部干扰：<strong>由使用条件和外部环境因素决定</strong>。有：天体干扰、天电干扰、电气设备的干扰、具有瞬变过程的设备的干扰、电源的工频干扰。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205165809717.png\" alt=\"image-20211205165809717\" /></p>\n<p>内部干扰：由系统的结构布局、制造工艺所引入的。有分布电容、分布电感引起的耦合感应，电磁场辐射感应，<strong>长线传输</strong>造成的波反射；<strong>多点接地</strong>造成的电位差引入的干扰；装置及设备中各种寄生振荡引入的干扰以及热噪声、闪变噪声、尖峰噪声等引入的干扰；甚至元器件产生的噪声。</p>\n<h3 id=\"812-干扰的传播途径\"><a class=\"anchor\" href=\"#812-干扰的传播途径\">#</a> 8.1.2 干扰的传播途径</h3>\n<p>干扰传播的途径主要有三种：静电耦合，磁场耦合，公共阻抗耦合。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTcwNjMwNzkwLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205170630790.png</span>&quot; alt=&quot;image-20211205170630790&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>连根并排导线之间会构成分布电容。</p>\n<p>&lt;img src=&quot;C:/Users/LEGION/AppData/Roaming/Typora/typora-user-images/image-20211205170641266.png&quot; alt=&quot;image-20211205170641266&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>空间的磁场耦合是通过导体间的<strong>互感耦合</strong>进来的。在任何载流导体周围空间都会产生磁场，而交变磁场则对其周围闭合电路产生感应电动势。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MTcwNjQ4MDI1LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205170648025.png</span>&quot; alt=&quot;image-20211205170648025&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>公共阻抗耦合发生在两个电路的电路流经一个公共阻抗时，一个电路在该阻抗上的电压将会影响到另一个电路，从而产生干扰噪声的影响。</p>\n<h2 id=\"82硬件抗干扰措施\"><a class=\"anchor\" href=\"#82硬件抗干扰措施\">#</a> 8.2 硬件抗干扰措施</h2>\n<h3 id=\"引言-12\"><a class=\"anchor\" href=\"#引言-12\">#</a> 引言</h3>\n<p>了解了干扰的来源与传播途径，我们就可以采取相应的抗干扰措施。在硬件抗干扰措施中，除了按照干扰的三种主要作用方式 ——<strong> 串模、共模及长线传输干扰</strong>来分别考虑外，还要从<strong>布线、电源、接地</strong>等方面考虑。</p>\n<h3 id=\"821-串模干扰抑制\"><a class=\"anchor\" href=\"#821-串模干扰抑制\">#</a> 8.2.1 串模干扰抑制</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205191022817.png\" alt=\"image-20211205191022817\" /></p>\n<p>串模干扰：叠加在被测信号上的干扰噪声，即干扰源串联在信号回路中。</p>\n<p>U<sub>s</sub> 为信号源电压，U<sub>n</sub> 为串模干扰电源，临近导线（干扰线）有交变电流 I<sub>a</sub> 流过，由 I<sub>a</sub> 产生的电磁干扰信号就会通过分布电容 C<sub>1</sub> 和 C<sub>2</sub> 的耦合，引至计算机控制系统的输入端。</p>\n<p>目前常采用双绞线与滤波器两种措施。</p>\n<h4 id=\"1双绞线做信号引线\"><a class=\"anchor\" href=\"#1双绞线做信号引线\">#</a> 1. 双绞线做信号引线</h4>\n<p>双绞线抗干扰原因：外界电磁场会在双绞线相邻的小环路上形成相反方向的感应电势，从而互相抵消减弱干扰作用。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205201728563.png\" alt=\"image-20211205201728563\" /></p>\n<p>应用场合：可用来<strong>传输模拟信号和数字信号</strong>，用于点对点连接和多点连接应用场合，传输距离为几公里，数据传输速率可达 2Mbps。</p>\n<p>双绞线相邻的扭绞处之间为双绞线的节距，双绞线不同的节距，双绞线不同节距会对串模干扰起到不同的抑制效果：节距越小，干扰的衰减比越大，抑制干扰的屏蔽效果越好。</p>\n<h4 id=\"2引入滤波电路\"><a class=\"anchor\" href=\"#2引入滤波电路\">#</a> 2. 引入滤波电路</h4>\n<p>根据串模干扰频率与被测信号频率，可以选用低通、高通、带通等滤波器。</p>\n<ul>\n<li>\n<p>低通滤波器－适用干扰频率比被测信号频率高；</p>\n</li>\n<li>\n<p>高通滤波器－干扰频率比被测信号频率低；</p>\n</li>\n<li>\n<p>带通滤波器－干扰频率落在被测信号频率的两侧；</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205202115604.png\" alt=\"image-20211205202115604\" /></p>\n<h3 id=\"822-共模干扰抑制\"><a class=\"anchor\" href=\"#822-共模干扰抑制\">#</a> 8.2.2 共模干扰抑制</h3>\n<p>共模干扰：计算机控制系统输入通道中信号放大器两个输入端上共有的干扰电压，可以是交流电压，其幅值达几伏甚至更高，这取决于现场产生干扰的环境条件和计算机等设备的接地情况。</p>\n<p>产生原因：不同 “地” 之间存在的电压，以及模拟信号系统对地漏阻抗。</p>\n<p>措施：变压器隔离、光电隔离、浮地屏蔽。</p>\n<h4 id=\"1变压器隔离\"><a class=\"anchor\" href=\"#1变压器隔离\">#</a> 1. 变压器隔离</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205203634431.png\" alt=\"image-20211205203634431\" /></p>\n<h4 id=\"2光电隔离\"><a class=\"anchor\" href=\"#2光电隔离\">#</a> 2. 光电隔离</h4>\n<p>数字信号隔离</p>\n<h4 id=\"image-20211205203922685\"><a class=\"anchor\" href=\"#image-20211205203922685\">#</a> <img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205203922685.png\" alt=\"image-20211205203922685\" /></h4>\n<p>模拟信号隔离</p>\n<p>利用光耦隔离器的<strong>线性放大区</strong>，也可传送模拟信号而隔离电磁干扰，即在模拟信号通道中进行隔离。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjA0NjQ4ODQyLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205204648842.png</span>&quot; alt=&quot;image-20211205204648842&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<ul>\n<li>模拟信号隔离\n<ul>\n<li>优点：使用少量的光耦，成本低</li>\n<li>缺点：光耦挑选得不合适，会影响系统的精度</li>\n</ul>\n</li>\n<li>数字信号隔离\n<ul>\n<li>优点：调试简单，不影响系统的精度</li>\n<li>缺点：适用较多光耦器件，成本高</li>\n</ul>\n</li>\n<li>光耦价格越来越低廉，目前实际工程中主要使用光耦隔离器的数字信号隔离方法。</li>\n</ul>\n<h4 id=\"3浮地屏蔽\"><a class=\"anchor\" href=\"#3浮地屏蔽\">#</a> 3. 浮地屏蔽</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205205504648.png\" alt=\"image-20211205205504648\" /></p>\n<p>浮地屏蔽：利用屏蔽层使输入信号的 “模拟地” 浮空，使共模输入阻抗大为提高，共模电压在输入回路中引起的共模电流大为减少，从而抑制了共模干扰的来源，使共模干扰降至很低。</p>\n<h3 id=\"823-长线传输干扰抑制\"><a class=\"anchor\" href=\"#823-长线传输干扰抑制\">#</a> 8.2.3 长线传输干扰抑制</h3>\n<p>信号在长线中传输除了会受到外界干扰和引起信号延迟外，还可能会产生波反射现象。</p>\n<p>当信号在长线中传输时，由于传输线的分布电容和分布电感的影响，信号会在传输线内部产生正向前进的电压波和电流波，称为入射波。</p>\n<p>如果传输线的终端阻抗与传输线的阻抗不匹配，入射波达到终端时会引起发射；同样，反射波达到传输线始端时，如果始端阻抗不匹配，又会引起新的反射。多次反射后，使信号波形严重地畸变。</p>\n<h4 id=\"1波阻抗的测量\"><a class=\"anchor\" href=\"#1波阻抗的测量\">#</a> 1. 波阻抗的测量</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205210901330.png\" alt=\"image-20211205210901330\" /></p>\n<h4 id=\"2终端阻抗匹配\"><a class=\"anchor\" href=\"#2终端阻抗匹配\">#</a> 2. 终端阻抗匹配</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205211117730.png\" alt=\"image-20211205211117730\" /></p>\n<h4 id=\"3始端阻抗匹配\"><a class=\"anchor\" href=\"#3始端阻抗匹配\">#</a> 3. 始端阻抗匹配</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjExNTU1NTE1LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205211555515.png</span>&quot; alt=&quot;image-20211205211555515&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h3 id=\"824-信号线的选择与敷设\"><a class=\"anchor\" href=\"#824-信号线的选择与敷设\">#</a> 8.2.4 信号线的选择与敷设</h3>\n<h4 id=\"1信号线的选择\"><a class=\"anchor\" href=\"#1信号线的选择\">#</a> 1. 信号线的选择</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjExODUwOTE1LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205211850915.png</span>&quot; alt=&quot;image-20211205211850915&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h4 id=\"2信号线的敷设\"><a class=\"anchor\" href=\"#2信号线的敷设\">#</a> 2. 信号线的敷设</h4>\n<p>信号线的敷设要注意以下事项：</p>\n<p><strong>（1）模拟信号线与数字信号线不能合用同一根电缆，要绝对避免信号线与电源线合用同一根电缆。</strong></p>\n<p><strong>（2）屏蔽信号线的屏蔽层要一端接地，同时要避免多点接地。</strong></p>\n<p><strong>（3）信号线的敷设要尽量远离干扰源。如避免敷设在大容量变压器、电动机等电器设备的附近。</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjEyMjE5NTc3LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205212219577.png</span>&quot; alt=&quot;image-20211205212219577&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p><strong>4）信号电缆与电源电缆必须分开，并尽量避免平行敷设。</strong></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205212318039.png\" alt=\"image-20211205212318039\" /></p>\n<h3 id=\"825-电源系统的抗干扰\"><a class=\"anchor\" href=\"#825-电源系统的抗干扰\">#</a> 8.2.5 电源系统的抗干扰</h3>\n<p>计算机控制系统一般是由交流电网供电，电网电压与频率的波动将直接影响到控制系统的可靠性与稳定性。电源的干扰是计算机控制系统的一个主要干扰。</p>\n<h4 id=\"1交流电源系统\"><a class=\"anchor\" href=\"#1交流电源系统\">#</a> 1. 交流电源系统</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205212706251.png\" alt=\"image-20211205212706251\" /></p>\n<p>措施：</p>\n<ul>\n<li>\n<p>选用供电比较稳定的进线电源</p>\n</li>\n<li>\n<p>利用干扰抑制器消除尖峰干扰</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205213053797.png\" alt=\"image-20211205213053797\" /></p>\n</li>\n<li>\n<p>利用交流稳压器稳定电网电压</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205213151888.png\" alt=\"image-20211205213151888\" /></p>\n</li>\n<li>\n<p>利用不间断电源（UPS）保证不间断供电</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205213200645.png\" alt=\"image-20211205213200645\" /></p>\n</li>\n<li>\n<p>掉电保护电路</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205213354211.png\" alt=\"image-20211205213354211\" /></p>\n</li>\n</ul>\n<h4 id=\"2直流电源系统\"><a class=\"anchor\" href=\"#2直流电源系统\">#</a> 2. 直流电源系统</h4>\n<ul>\n<li>\n<p>交变电源变压器的屏蔽</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205214208447.png\" alt=\"image-20211205214208447\" /></p>\n</li>\n<li>\n<p>采用直流开关电源</p>\n</li>\n<li>\n<p>采用 DC-DC 变换器</p>\n</li>\n<li>\n<p>为每块电路板设立独立的直流电源</p>\n</li>\n<li>\n<p>集成电路块的 VCC 加路旁电容</p>\n</li>\n</ul>\n<h3 id=\"826-接地系统的抗干扰\"><a class=\"anchor\" href=\"#826-接地系统的抗干扰\">#</a> 8.2.6 接地系统的抗干扰</h3>\n<p>接实地是指与大地连接；接虚地指的是与电位基准点连接，当这个基准点与大地电气绝缘，则称为福地连接。</p>\n<p>工作接地、保护接地，本节讨论工作接地技术。</p>\n<ul>\n<li>\n<p>计算机控制系统中的地线：</p>\n<p>数字地</p>\n<p>系统地</p>\n<p>交流地</p>\n<p>模拟地</p>\n<p>保护地</p>\n</li>\n</ul>\n<h4 id=\"1单点接地与多点接地\"><a class=\"anchor\" href=\"#1单点接地与多点接地\">#</a> 1. 单点接地与多点接地</h4>\n<p>低频电路应单点接地，主要是避免形成产生干扰的地环路；</p>\n<p>高频电路应该就近多点接地，主要是为了避免 “长线传输” 引入干扰。</p>\n<h4 id=\"2分别回流法单点接地\"><a class=\"anchor\" href=\"#2分别回流法单点接地\">#</a> 2. 分别回流法单点接地</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjIwMDI5NDk2LnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205220029496.png</span>&quot; alt=&quot;image-20211205220029496&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h4 id=\"3输入系统的接地\"><a class=\"anchor\" href=\"#3输入系统的接地\">#</a> 3. 输入系统的接地</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205215705221.png\" alt=\"image-20211205215705221\" /></p>\n<h4 id=\"4印制电路板的地线分布\"><a class=\"anchor\" href=\"#4印制电路板的地线分布\">#</a> 4. 印制电路板的地线分布</h4>\n<p>设计印制线路板应遵守下列原则，以免系统内部地线产生干扰。</p>\n<p>（1）TTL，CMOS 器件的地线要呈辐射状，不能形成环形。</p>\n<p>（2）印制线路板上的地线要根据通过的电流大小决定其宽 度，不要小于 3mm，在可能的情况下，<strong>地线越宽越好</strong>。</p>\n<p>（3）旁路电容的地线不能长，应尽量缩短。</p>\n<p>（4）大电流的零电位地线应尽量宽，而且必须和小信号的地分开。</p>\n<h4 id=\"5主机系统的接地\"><a class=\"anchor\" href=\"#5主机系统的接地\">#</a> 5. 主机系统的接地</h4>\n<ul>\n<li>\n<p>全机一点接地</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205220241006.png\" alt=\"image-20211205220241006\" /></p>\n</li>\n<li>\n<p>主机外壳接地，机芯浮地</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA1MjIwMzQ5NDMzLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205220349433.png</span>&quot; alt=&quot;image-20211205220349433&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n</li>\n<li>\n<p>多机系统接地</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205220433008.png\" alt=\"image-20211205220433008\" /></p>\n<p>对于远距离的计算机网络，多台计算机之间的数据通信，通过隔离的办法把地分开。例如，采用变压器隔离技术、光电隔离技术或无线通信技术。</p>\n</li>\n</ul>\n<h2 id=\"83软件抗干扰措施\"><a class=\"anchor\" href=\"#83软件抗干扰措施\">#</a> 8.3 软件抗干扰措施</h2>\n<p>在控制系统的输入输出通道中，采用数字滤波方法，即采用某种计算方法对通道的信号进行数字处理，以削弱或滤除干扰噪声。</p>\n<p>而对于那些可能穿过通道而进入 CPU 的干扰，可采取<strong>指令冗余、软件陷阱以及程序运行监视</strong>等措施来使 CPU 恢复正常工作。</p>\n<h3 id=\"831-指令冗余技术\"><a class=\"anchor\" href=\"#831-指令冗余技术\">#</a> 8.3.1 指令冗余技术</h3>\n<p>要解决的问题：程序跑飞</p>\n<p>解决方法：采用指令冗余技术</p>\n<p>原则：在对程序流向起决定作用的指令之前以及影响系统工作状态的重要指令之前都应插入两、三条 NOP 指令，还可以每隔一定数目的指令插入 NOP 指令，以保证跑飞的程序迅速纳入正确轨道。</p>\n<p>优点：指令冗余技术可以减少程序出现错误跳转的次数。</p>\n<p>指令冗余技术可以减少程序出现错误跳转的次数，但不能保证在失控期间不干坏事，更不能保证程序纳入正常轨道后就太平无事。</p>\n<h3 id=\"832-软件陷阱\"><a class=\"anchor\" href=\"#832-软件陷阱\">#</a> 8.3.2 软件陷阱</h3>\n<p>指令冗余使飞跑的程序安定下来是有条件的，首先跑飞的程序必须落到程序区，其次必须要执行到冗余指令。当跑飞的程序落到非程序区时，对此情况的措施就是设立软件陷阱。</p>\n<p>软件陷阱：在非程序区设置拦截措施，使程序进入陷阱，即通过一条引导指令，强行将跑飞的程序引向一个指定的地址。</p>\n<p>举例：若我们把这段程序的入口标号称为 ERROR 的话，软件陷阱即为一条 JMP ERROR 指令。软件陷阱是由 3 条指令构成：</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NOP</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NOP</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>JMP ERROR</pre></td></tr></table></figure><h2 id=\"84程序运行监视系统\"><a class=\"anchor\" href=\"#84程序运行监视系统\">#</a> 8.4 程序运行监视系统</h2>\n<p>程序跑飞到一个临时的死循环中，指令冗余和软件陷阱技术也无能为力，此时必须强制系统复位，摆脱死循环。</p>\n<p>由于操作者不可能一直监视系统，所以需要一个独立于 CPU 之外的监视系统，<strong>在程序陷入死循环时，能及时发现并自动复位系统，这就是看守大门作用的程序运行监视系统。</strong></p>\n<h3 id=\"841-watchingdog-timer工作原理\"><a class=\"anchor\" href=\"#841-watchingdog-timer工作原理\">#</a> 8.4.1 Watchingdog Timer 工作原理</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205225553822.png\" alt=\"image-20211205225553822\" /></p>\n<p>T1&lt;T2</p>\n<h3 id=\"842-watchingdog-timer实现方法\"><a class=\"anchor\" href=\"#842-watchingdog-timer实现方法\">#</a> 8.4.2 Watchingdog Timer 实现方法</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211205225559118.png\" alt=\"image-20211205225559118\" /></p>\n<h2 id=\"考试要求-7\"><a class=\"anchor\" href=\"#考试要求-7\">#</a> 考试要求</h2>\n<p>考察选填判，不考大题</p>\n<h2 id=\"课后习题-7\"><a class=\"anchor\" href=\"#课后习题-7\">#</a> 课后习题</h2>\n<p>1．简述干扰的来源与传播途径。</p>\n<p>2．串模干扰的成因是什么？如何抑制串模干扰？</p>\n<p>3．共模干扰的成因是什么？如何抑制共模干扰？</p>\n<p>4．结合图 8-11，分析说明利用光耦隔离器的开关特性也可以应用在模拟量输入或输出通道中。</p>\n<p>5．在计算机控制系统中，敷设信号线时应注意哪些问题？</p>\n<p>6．在计算机控制系统中，大致有哪几种地？最终如何接地？</p>\n<p>7．结合图 8-30，简述程序运行监视系统的工作原理。</p>\n<h1 id=\"第9章-数字控制器\"><a class=\"anchor\" href=\"#第9章-数字控制器\">#</a> 第 9 章 数字控制器</h1>\n<h2 id=\"引言-13\"><a class=\"anchor\" href=\"#引言-13\">#</a> 引言</h2>\n<p><strong>自动化控制系统的核心是控制器。</strong></p>\n<p>控制器的任务是按照一定的控制规律，产生满足工艺要求的控制信号，以输出驱动执行器，达到自动控制的目的。</p>\n<p>在传统的模拟控制系统中，控制器的控制规律或控制作用是由仪表或电子装置的硬件电路完成的，而在计算机控制系统中，除了计算机装置以外，更主要的体现在软件算法上，即数字控制器的设计上。</p>\n<p><strong>数字控制器的设计主要有连续化设计和直接离散化设计两种设计方法。</strong></p>\n<p>复杂的过程控制系统，如串级控制、前馈 - 反馈控制和数字程序控制也可以通过计算机实现其控制算法。</p>\n<h2 id=\"91-数字控制系统的数学描述\"><a class=\"anchor\" href=\"#91-数字控制系统的数学描述\">#</a> 9.1 数字控制系统的数学描述</h2>\n<p>Z 变换</p>\n<p>Z 逆变换</p>\n<p>差分方程求解</p>\n<h2 id=\"92-数字控制器的连续化设计\"><a class=\"anchor\" href=\"#92-数字控制器的连续化设计\">#</a> 9.2 数字控制器的连续化设计</h2>\n<h3 id=\"911-数字控制器的连续化设计步骤\"><a class=\"anchor\" href=\"#911-数字控制器的连续化设计步骤\">#</a> 9.1.1 数字控制器的连续化设计步骤</h3>\n<p>设计思想：将整个系统看作模拟系统，设计模拟控制器后再进行控制器的离散化。这种设计方法又称为间接设计法。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207233103506.png\" alt=\"image-20211207233103506\" /></p>\n<ul>\n<li>\n<p>设计步骤：</p>\n<ul>\n<li>\n<p>设计假想的连续控制器 D (s)</p>\n<p>一种方法是事先确定控制器的结构，如后面将要重点介绍的 PID 算法等，然后通过其控制参数的整定完成设计。</p>\n<p>另一种设计方法是应用连续控制系统的设计方法如频率特性法、根轨迹法等，来设计出控制器的结构和参数。</p>\n</li>\n<li>\n<p>将 D (s) 离散化为 D (z)</p>\n<ul>\n<li>\n<p>双线性变换法</p>\n<p>D (s) 稳定，D (z) 也稳定</p>\n</li>\n<li>\n<p>差分变化法</p>\n<ul>\n<li>前向差分法</li>\n<li>后向差分法</li>\n</ul>\n<p>可由数值微分转化成差分方程求得</p>\n</li>\n</ul>\n</li>\n<li>\n<p>设计由计算机实现的控制算法</p>\n</li>\n<li>\n<p>校验</p>\n<p>需按<strong>闭环系统性能</strong>进行校验，可采用<strong>数字仿真方法</strong>验证。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"912-pid控制规律\"><a class=\"anchor\" href=\"#912-pid控制规律\">#</a> 9.1.2 PID 控制规律</h3>\n<p>PID 控制即是对偏差信号按<strong>比例、积分、微分</strong>的函数关系进行运算，其运算结果用以输出控制。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207234423591.png\" alt=\"image-20211207234423591\" /></p>\n<h4 id=\"1比例控制\"><a class=\"anchor\" href=\"#1比例控制\">#</a> 1. 比例控制</h4>\n<p>作用：使控制器的输出与输入偏差成比例关系。</p>\n<p>比例系数越大，控制作用越强，控制系统的动态特性越好；比例系数越小，控制作用越弱。</p>\n<p>优点：调节及时</p>\n<p>缺点：系统存在余差</p>\n<p>对于扰动较大、惯性较大的系统，若采用单纯的比例控制器，难于兼顾动态和静态特性，因此需要配合其他控制规律。</p>\n<h4 id=\"2积分控制\"><a class=\"anchor\" href=\"#2积分控制\">#</a> 2. 积分控制</h4>\n<p>作用：使控制器的输出与输入偏差的积分成比例关系。</p>\n<p>特点：控制器的输出不仅与输入的偏差的大小有关，还与偏差存在的时间相关。</p>\n<p>效果：消除余差。</p>\n<p>缺点：控制作用不能及时克服扰动的影响，致使被调参数的动态偏差大，稳定性下降，因此很少单独使用。</p>\n<h4 id=\"3微分控制\"><a class=\"anchor\" href=\"#3微分控制\">#</a> 3. 微分控制</h4>\n<p>作用：使控制器的输出与输入偏差的变化速度成比例关系。</p>\n<p>工业上实际采用的都是一种近似的实际微分作用，也称不完全微分作用。</p>\n<p>效果：提前给出较大的调节作用，从而加快系统的动作速度，减小了调节时间，具有超前控制作用。</p>\n<p>缺点：对于一个固定的偏差，不管其他数值多大，都不会产生微分作用，即不能消除余差；所以微分作用不宜单独使用。</p>\n<h4 id=\"4比例积分微分控制\"><a class=\"anchor\" href=\"#4比例积分微分控制\">#</a> 4. 比例积分微分控制</h4>\n<p>即：PID 控制，将比例、积分、微分作用综合起来。</p>\n<p>阶跃信号也是比例、积分、微分三者响应曲线的叠加。</p>\n<p>当偏差阶跃信号刚一出现，微分作用最大，使控制器</p>\n<h2 id=\"93-数字控制器离散化设计\"><a class=\"anchor\" href=\"#93-数字控制器离散化设计\">#</a> 9.3 数字控制器离散化设计</h2>\n<h2 id=\"94-数字串级控制器的设计\"><a class=\"anchor\" href=\"#94-数字串级控制器的设计\">#</a> 9.4 数字串级控制器的设计</h2>\n<h2 id=\"95-数字程序控制器的设计\"><a class=\"anchor\" href=\"#95-数字程序控制器的设计\">#</a> 9.5 数字程序控制器的设计</h2>\n<h2 id=\"考试要求-8\"><a class=\"anchor\" href=\"#考试要求-8\">#</a> 考试要求</h2>\n<p>重点，但是不太好考大题，要求掌握各种 PID 控制是什么东西，每一种变形有什么特点（积分分离，非积分分离，抗积分饱和特点含义）</p>\n<p>9.1.4 考察差别、特点</p>\n<p>9.2 直接或间接设计，考察了解的概念</p>\n<h1 id=\"第10章-控制网络技术\"><a class=\"anchor\" href=\"#第10章-控制网络技术\">#</a> 第 10 章 控制网络技术</h1>\n<h2 id=\"101-数据通信基础\"><a class=\"anchor\" href=\"#101-数据通信基础\">#</a> 10.1 数据通信基础</h2>\n<p>计算机网络就是利用通信线路和通信设备，把分布在不同地理位置上的具备独立功能的多台计算机、终端及其附属设备连接起来的一种网络。</p>\n<p>数据通信是计算机控制网络的基础。</p>\n<h3 id=\"1011-数据通信系统\"><a class=\"anchor\" href=\"#1011-数据通信系统\">#</a> 10.1.1 数据通信系统</h3>\n<h4 id=\"1通信系统的构成\"><a class=\"anchor\" href=\"#1通信系统的构成\">#</a> 1. 通信系统的构成</h4>\n<p>数据通信：计算机与计算机之间的数据交换被称为数据通信。</p>\n<p>数据通信实质：以计算机为中心，通过某些通信线路与设备，对二进制编码的字母、数字、符号以及数字化的声音、图像信息进行的传输、交换和处理。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206132854645.png\" alt=\"image-20211206132854645\" /></p>\n<ul>\n<li>组成：\n<ul>\n<li>报文：即需要传输的数据</li>\n<li>发送设备</li>\n<li>接收设备</li>\n<li>传输介质：发送设备与接收设备之间的物理通路。</li>\n<li>协议：控制数据通信的一系列规则。</li>\n</ul>\n</li>\n<li>数据通信过程：\n<ul>\n<li>数据打包</li>\n<li>数据转换与编码</li>\n<li>数据传输</li>\n<li>数据转换与译码</li>\n<li>数据解包</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2数据通信方式\"><a class=\"anchor\" href=\"#2数据通信方式\">#</a> 2. 数据通信方式</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206133356691.png\" alt=\"image-20211206133356691\" /></p>\n<p>数据通信的基本传输方式：并行通信和串行通信两种。</p>\n<p>并行通信：指所传输数据的各位同时发送或接收数据。</p>\n<p>串行通信：传送数据的各位按顺序一位一位地发送或接收。</p>\n<p>波特率：串行通信中的一个重要指标。定义为每秒钟传送二进制数码的位数，单位是位每秒，用 b/s 表示。</p>\n<p>在串行异步通信中，波特率为每秒钟传送的字符数与每个字符位数的乘积。</p>\n<h4 id=\"3数据通信制式\"><a class=\"anchor\" href=\"#3数据通信制式\">#</a> 3. 数据通信制式</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206134123671.png\" alt=\"image-20211206134123671\" /></p>\n<p>按通信线路上信息传输方向与时间的关系，可分为 3 种通信制式：单工通信、半双工通信、全双工通信。</p>\n<h3 id=\"1012-数据传输编码\"><a class=\"anchor\" href=\"#1012-数据传输编码\">#</a> 10.1.2 数据传输编码</h3>\n<p>数据通信中需要传输数据信息，而信息必须转换为数字的或模拟的信号后才能通过通信线路传送，这种信息转换被称为传输编码。</p>\n<h4 id=\"1数字信息的数字信号编码\"><a class=\"anchor\" href=\"#1数字信息的数字信号编码\">#</a> 1. 数字信息的数字信号编码</h4>\n<ul>\n<li>\n<p>常用的：</p>\n<ul>\n<li>\n<p>单极性编码：单极性码用一种电平代表 “1”，用另一种电平代表 “0”，而且通常 “0” 对应的电平 0V。</p>\n<p>具有直流成分，且不含同步信息。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206135155573.png\" alt=\"image-20211206135155573\" /></p>\n</li>\n<li>\n<p>双极性编码：如图 (b) 所示，它使用正、负两种电平，因此有效地减小了传输线上的直流分量，但不归零码仍然没有彻底解决信号同步问题。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206135352057.png\" alt=\"image-20211206135352057\" /></p>\n</li>\n<li>\n<p>归零编码方法</p>\n<p>如图 (c) 所示，它使用正、负、零三种电平，信号在数据位的中间发生跳变，位中间的跳变既作为同步时钟，也作为数据：归零码较好地解决了信号同步问题，<strong>但由于每一位数据都要产生两次跳变，因此占用更多的带宽。</strong></p>\n<ul>\n<li>\n<p>曼彻斯特码</p>\n<p>如图 (d) 所示，用数据位的中间产生跳变的方向表示数值。“负” 到 “正” 的跳变代表 “1”，“正” 到 “负” 的跳变代表 “0”。<strong>该跳变还被用作信号同步</strong>，即编码数据中自带时钟信息，保证了发双方的绝对同步。<strong>以太网中就使用了曼彻斯特码。</strong></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206135732221.png\" alt=\"image-20211206135732221\" /></p>\n</li>\n<li>\n<p>差动曼彻斯特码</p>\n<p>如图 (e) 所示，它用数据位中间的跳变携带同步信息，<strong>由数据位起始处是否有跳变来传递数值</strong>。有跳变表示 “0”，无跳变表示 “1”。<strong>令牌环网中就使用了差动曼彻斯特码。</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>图 (f)、(g) 分别表示接收端从编码数据中分离出的解码时钟与解码数据。</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206140036363.png\" alt=\"image-20211206140036363\" /></p>\n</li>\n</ul>\n<h4 id=\"2数字信息的模拟信息编码\"><a class=\"anchor\" href=\"#2数字信息的模拟信息编码\">#</a> 2. 数字信息的模拟信息编码</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206140131919.png\" alt=\"image-20211206140131919\" /></p>\n<p>信号调制：采用数字信息的模拟信号转换技术将数字信号传输变为模拟信号传输。</p>\n<p>将数字信号调制为模拟信号有三种方式：<strong>调幅、调频与调相。</strong></p>\n<h4 id=\"3基带传输与频带传输\"><a class=\"anchor\" href=\"#3基带传输与频带传输\">#</a> 3. 基带传输与频带传输</h4>\n<p>按传输线上信号的种类，数据通信可分为：基带传输与频带传输。</p>\n<ul>\n<li>\n<p>基带传输：是指直接用电脉冲信号代表数字信号 0 或 1 进行传输。基带，是指<strong>电信号所固有的频带</strong>。</p>\n<p>优缺点：不需要调制解调器，安装、维护投资小，但存在信息传送容量小，每条传输线只可传送一路信号且传送距离短的缺点。</p>\n</li>\n<li>\n<p>频带传输：用基带信号对载波信号调制后进行传输。</p>\n<p>优缺点：利用载波传输信号可以减小线路干扰对传输信号的影响，实现远距离传输。用这种传输技术，可以在一条通信线路上，通过频分复用 (FDM) 将其划分为几个信道，从而支持多路信号的传输。频带传输的安装维护费用较基带传输时高，但是它具有较高的信息传递量，且可覆盖较大的范围。</p>\n</li>\n</ul>\n<h3 id=\"1013-多路复用技术\"><a class=\"anchor\" href=\"#1013-多路复用技术\">#</a> 10.1.3 多路复用技术</h3>\n<p>多路复用技术：把多路独立信号在一条信道上进行传输的技术，其作用相当于将单条传输信道划分为多个子信道，以实现网络中若干节点共享通信信道的目的，提高通信线路的利用率。</p>\n<h4 id=\"1频分多路复用fdm\"><a class=\"anchor\" href=\"#1频分多路复用fdm\">#</a> 1. 频分多路复用（FDM）</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206143631767.png\" alt=\"image-20211206143631767\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206145251161.png\" alt=\"image-20211206145251161\" /></p>\n<h4 id=\"2时分多路复用tdm\"><a class=\"anchor\" href=\"#2时分多路复用tdm\">#</a> 2. 时分多路复用（TDM）</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206145336003.png\" alt=\"image-20211206145336003\" /></p>\n<p>时分多路复用技术：把信道的传输时间分隔成许多时间段，在一个时间段内，一路信号占用整个信道的带宽进行传输。</p>\n<p>信号传输按位、按符号、按组的方式进行。</p>\n<p>为了在接受端能够对复合信号进行正确地分离，接收端与发送端的时序必须严格同步，否则将造成信号之间的混淆。</p>\n<h4 id=\"3两种复用技术比较\"><a class=\"anchor\" href=\"#3两种复用技术比较\">#</a> 3. 两种复用技术比较</h4>\n<ul>\n<li>TDM 设备比 FDM 设备易于实现，而随着大规模集成电路的发展，TDM 价格会有明显的下降。</li>\n<li>TDM 较 FDM 具有较高的传输速度。因为 TDM 可以充分利用信道的全部带宽。</li>\n<li>TDM 中，只需要一个 MODEM 就可以了；而在 FDM 中，每个通道都需要一个 MODEM。</li>\n<li>TDM 能混合不同速率和同步方式的终端，能适应新型数据通信网络。</li>\n<li>进行数据传输的差错控制和校正操作时，TDM 比 FDM 会产生较多的时间延迟。</li>\n<li>FDM 主要用于模拟通信系统，TDM 主要用于数字通信系统。</li>\n</ul>\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h4>\n<ul>\n<li>优点：\n<ul>\n<li>成本低</li>\n<li>时间延迟较少（线路中使用的缓冲部件较少）</li>\n<li>透明性较好，从主机或通信处理机到终端是透明的，用户并未感到多路器的存在</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>采用多路器后，线路的带宽和传送速率未能充分利用。</li>\n<li>对主机 I/O 端口的要求并未减少。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1014-通信同步技术\"><a class=\"anchor\" href=\"#1014-通信同步技术\">#</a> 10.1.4 通信同步技术</h3>\n<h4 id=\"1通过控制线实现收发双方同步\"><a class=\"anchor\" href=\"#1通过控制线实现收发双方同步\">#</a> 1. 通过控制线实现收发双方同步</h4>\n<p>并行同步通信方式：指在并行通信中，通过控制线实现收发双方同步。数据收发双方除了数据线相连外，还有若干控制信号线，用来传送发送与接收装置的状态。</p>\n<p>并行通信进行一次数据传送的过程如下：</p>\n<p>（1）发送装置在发送前，首先检查接收装置的状态。</p>\n<p>（2）若接收装置处于非就绪状态，返回（1）继续等待；若接收装置处于就绪状态，表示可以接收数据，发送装置将数据放到数据线上，并发出控制信号，告诉接收装置数据已准备好。</p>\n<p>（3）接收装置收到控制信号后，从数据线上将数据取走。取数据过程中，状态线置为非就绪状态，取数完成后，状态线重新处于就绪状态，等待下一次接收数据。</p>\n<p>（4）发送装置将控制信号撤回，准备发送下一次数据。</p>\n<p>串行通信中的同步方式又有两种：一种是启停同步方式，与其对应的传输方式称为异步通信方式；另一种是自同步方式，与其对应的传输方式为同步通信方式。</p>\n<h4 id=\"2串行异步通信async\"><a class=\"anchor\" href=\"#2串行异步通信async\">#</a> 2. 串行异步通信（ASYNC）</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206151919372.png\" alt=\"image-20211206151919372\" /></p>\n<p>串行异步通信：一个字符接一个字符地按帧传送数据，上图为格式。</p>\n<p>一帧信息的组成：1 个起始位、5~8 个数据位，1 个奇偶校验位、1~2 个停止位。</p>\n<p>停止位到起始位的电平转换，即为同步信息。</p>\n<ul>\n<li>进行异步通信时，收发双方必须有两项约定：\n<ul>\n<li>帧信息格式，即字符的编码格式、奇偶检验形式、起始位、停止位格式</li>\n<li>传送速率</li>\n</ul>\n</li>\n<li>由于字符串的首尾分别附加了一个起始位和停止位，因此，传输效率较低，传送速率较慢。</li>\n<li>能完成异步通信的器件称为异步收发器（UART），Intel8250</li>\n</ul>\n<h4 id=\"3串行同步通信sync\"><a class=\"anchor\" href=\"#3串行同步通信sync\">#</a> 3. 串行同步通信（SYNC）</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206152847116.png\" alt=\"image-20211206152847116\" /></p>\n<p>串行同步通信是一种连续传送数据块的方式，每次传送 n 个字节的数据块。用 1 个～2 个同步字符表示数据传输的开始接着是 n 个字节的数据块，字符之间不允许留有空隙，当没有字符可以发送时，则连续发送同步字符。</p>\n<p>为保证收发双方同步，收发双方必须使用相同的同步字符，而且往往采用可以生成解码时钟的编码方式。</p>\n<p>串行同步通信的传送速率高于串行异步通信，且传送的数据块越长，越显示其优越性。</p>\n<p>能完成同步通信的硬件称为同步收发器 USRT。</p>\n<p>既能完成同步通信，又能完成异步通信的硬件称为通用同步异步收发器 USART，如 Intel8251</p>\n<h3 id=\"1015-image-20211206154013310\"><a class=\"anchor\" href=\"#1015-image-20211206154013310\">#</a> 10.1.5 <img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206154013310.png\" alt=\"image-20211206154013310\" /></h3>\n<p>目前主要的传输介质：双绞线、同轴电缆、光纤</p>\n<h2 id=\"102-通信网络技术\"><a class=\"anchor\" href=\"#102-通信网络技术\">#</a> 10.2 通信网络技术</h2>\n<p>计算机通信网络属于分布在一定区域中的局域网。</p>\n<p>决定局域网特性的要素有：传输介质、拓扑结构、介质访问控制方法</p>\n<h3 id=\"1021网络拓扑技术\"><a class=\"anchor\" href=\"#1021网络拓扑技术\">#</a> 10.2.1 网络拓扑技术</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206154351663.png\" alt=\"image-20211206154351663\" /></p>\n<h3 id=\"1022-网络控制方法\"><a class=\"anchor\" href=\"#1022-网络控制方法\">#</a> 10.2.2 网络控制方法</h3>\n<p>1. 查询法</p>\n<p>2.CSMA/CD</p>\n<p>3. 令牌传送</p>\n<p>4. 存储转发式</p>\n<h3 id=\"1023-差错控制技术\"><a class=\"anchor\" href=\"#1023-差错控制技术\">#</a> 10.2.3 差错控制技术</h3>\n<p>差错控制技术包括检验错误与纠正错误。</p>\n<h4 id=\"1检验错误\"><a class=\"anchor\" href=\"#1检验错误\">#</a> 1．检验错误</h4>\n<p>常有技术：冗余技术。常用的校验方法有垂直冗余码校验或奇偶校验 (VRC)、纵向冗余码校验 (LRC)、循环冗余校验 (CRC) 以及校验和 (checksum) 等几种。</p>\n<h4 id=\"2纠正错误\"><a class=\"anchor\" href=\"#2纠正错误\">#</a> 2. 纠正错误</h4>\n<p>常用的纠错方式有三种：重发纠正错误、自动纠正错误、混合纠正错误</p>\n<h2 id=\"103-网络体系结构\"><a class=\"anchor\" href=\"#103-网络体系结构\">#</a> 10.3 网络体系结构</h2>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206161415441.png\" alt=\"image-20211206161415441\" /></p>\n<p>应用层、表示层、会话层、传输层、网络层、链路层、物理层</p>\n<h2 id=\"104-串行通信总线\"><a class=\"anchor\" href=\"#104-串行通信总线\">#</a> 10.4 串行通信总线</h2>\n<h3 id=\"1041-rs-232c通信总线\"><a class=\"anchor\" href=\"#1041-rs-232c通信总线\">#</a> 10.4.1 RS-232C 通信总线</h3>\n<p>①<strong>RS-232C 总线</strong>是由美国电子工业协会 EIA 于 1969 年修定的一种通信接口标准，专门用于数据终端设备 DTE 和数据通信设备 DCE 之间的串行通信。</p>\n<p>②<strong>数据终端设备 DTE</strong>（Data Terminal Equipment）是数据的源点或归宿，通常是指输入、输出设备和传输控制器或者计算机等数据处理装置及其通信控制器。</p>\n<p>③<strong>数据通信设备 DCE</strong> (Data Communication Equipment) 的任务是实现由源点到目的点的传输，通常是指自动呼叫应答设备、调制解调器以及其它一些中间装置的集合。目前 RS—232C 接口已成为计算机的标准配置，如串行口 COM1、COM2 均为 RS-232C 总线接口标准。</p>\n<h4 id=\"1信号定义\"><a class=\"anchor\" href=\"#1信号定义\">#</a> 1. 信号定义</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162016104.png\" alt=\"image-20211206162016104\" /></p>\n<h4 id=\"2电气特性\"><a class=\"anchor\" href=\"#2电气特性\">#</a> 2. 电气特性</h4>\n<p>RS-232C 采用了较高的传输电平，且为双极性、公共地和负逻辑，即规定逻辑 “1” 状态电平为 - 15- -5V，逻辑 “0” 状态电平为 + 5- +15V，其中 - 5- +5V 用作信号状态的变迁区。</p>\n<h4 id=\"3接口电路\"><a class=\"anchor\" href=\"#3接口电路\">#</a> 3. 接口电路</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162103439.png\" alt=\"image-20211206162103439\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162110231.png\" alt=\"image-20211206162110231\" /></p>\n<h4 id=\"4rs-232c的应用\"><a class=\"anchor\" href=\"#4rs-232c的应用\">#</a> 4.RS-232C 的应用</h4>\n<p>RS-232C 通信主要有以下几种连接方式：</p>\n<p>（1）PC 机与 PC 机之间使用 MODEM 连接</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162242155.png\" alt=\"image-20211206162242155\" /></p>\n<p>（2）PC 机与 PC 机之间直接连接</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162307081.png\" alt=\"image-20211206162307081\" /></p>\n<p>（3）PC 机与 PC 机之间三线连接法</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162311218.png\" alt=\"image-20211206162311218\" /></p>\n<p>（4）PC 机与单片机之间的通信网络</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vemhhbmdqaWFsaW5femh1bGFuL215aW1hZ2VyZXBvL3Jhdy9tYXN0ZXIvaW1hZ2VzL2ltYWdlLTIwMjExMjA2MTYyMzIzMzEwLnBuZw==\">https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206162323310.png</span>&quot; alt=&quot;image-20211206162323310&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h3 id=\"1042-rs-422485通信总线\"><a class=\"anchor\" href=\"#1042-rs-422485通信总线\">#</a> 10.4.2 RS-422/485 通信总线</h3>\n<p>RS-232C 缺点：传送速率不够快；传送距离不够远；</p>\n<p>解决方法：EIA 在 1977 年作了部分改进，制定了新标准 RS-449：</p>\n<p>特点：除了保留与 RS-232C 兼容外，还在提高传输速率、增加传输距离、改进电气特性等方面做了很多努力，增加了 RS—232C 没有的环测功能，明确规定了连接器，解决了机械接  口问题。</p>\n<p>延伸：在 RS-449 标准下，推出的子集有 RS-423A/RS-422A，以及 RS-422A 的变型 RS-485。</p>\n<h4 id=\"1rs-423ars-422a\"><a class=\"anchor\" href=\"#1rs-423ars-422a\">#</a> 1.RS-423A/RS-422A</h4>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184307912.png\" alt=\"image-20211206184307912\" /></p>\n<h4 id=\"2rs-485\"><a class=\"anchor\" href=\"#2rs-485\">#</a> 2.RS-485</h4>\n<p>传送方式：半双工、全双工</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184523187.png\" alt=\"image-20211206184523187\" /></p>\n<p>接口电路：</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184554326.png\" alt=\"image-20211206184554326\" /></p>\n<p>RS-485 应用： AT89C52 单片机与 RS-485 接口电路</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184620147.png\" alt=\"image-20211206184620147\" /></p>\n<p>通信网络</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206184644438.png\" alt=\"image-20211206184644438\" /></p>\n<h2 id=\"105-工业以太网\"><a class=\"anchor\" href=\"#105-工业以太网\">#</a> 10.5 工业以太网</h2>\n<p>工业以太网是以太网（甚至互联网）系列技术延伸到工业应用环境的产物，<strong>既属于信息网络技术，也属于控制网络技术</strong>，是一揽子解决方案的集合，是一系列技术的总称。</p>\n<h3 id=\"1051-以太网及其优势\"><a class=\"anchor\" href=\"#1051-以太网及其优势\">#</a> 10.5.1 以太网及其优势</h3>\n<p>以太网是 IEEE802.3 所支持的局域网标准，最早由 Xerox 公司创建，后经 DEC 和 Inter 的联合开发扩展，按照 ISO、OSI 的 7 层结构，以太网标准只定义了链路层和物理层，而作为一个完整的通信系统，它需要高层协议的支持。APARNET 在制定了 TCP/IP 高层通信协议之后，以太网便和 TCP/IP 紧密地捆绑在一起了。以后，由于国际互联网采用了以太网和 TCP/IP 协议，人们甚至把如超文本链接 HTTP 等与 TCP/IP 协议组放在一起，俗称为以太网技术。</p>\n<ul>\n<li>\n<p>与现场总线相比，以太网具有以下的优点：</p>\n<ul>\n<li>\n<p><strong>应用广泛</strong> —— 几乎所有的编程语言都支持以太网的应用开发，如果采用以太网作为现场总线，可以保证有多种开发工具、开发环境可供选择。</p>\n</li>\n<li>\n<p><strong>成本低廉</strong> —— 目前以太网网卡的价格只有 PROFIBUS、FF 等现场总线网卡的 1/10，而且随着集成电路技术的发展，其价格还会进一步下降。</p>\n</li>\n<li>\n<p><strong>通信速率高</strong> —— 目前以太网的通信速率为 10Mb/s，100Mb/s 的快速以太网已开始广泛应用，1000Mb/s 以太网技术也逐渐成熟，10Gb/s 以太网也正在研究。</p>\n</li>\n<li>\n<p><strong>软硬件资源丰富</strong> —— 由于多年的应用，积累了丰富的软件资源和设计经验。</p>\n</li>\n<li>\n<p><strong>可持续发展潜力大</strong> —— 企业的生存与发展很大程序上依赖于一个快速而有效的通信管理网络，信息技术与通信技术的发展将更加迅速，也更加成熟，这保证了以太网技术不断地持续向前发展。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1052工业以太网的关键技术\"><a class=\"anchor\" href=\"#1052工业以太网的关键技术\">#</a> 10.5.2 工业以太网的关键技术</h3>\n<ul>\n<li>为了满足工业控制现场的特殊性，工业以太网需要解决的问题包括：\n<ul>\n<li>1 通信实时性</li>\n<li>2 网络生存性</li>\n<li>3 网络安全性</li>\n<li>4 总线供电</li>\n<li>5 互操作性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1053-基于以太网的控制网络系统\"><a class=\"anchor\" href=\"#1053-基于以太网的控制网络系统\">#</a> 10.5.3 基于以太网的控制网络系统</h3>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206185745375.png\" alt=\"image-20211206185745375\" /></p>\n<ul>\n<li>信息管理层</li>\n<li>过程监控层</li>\n<li>现场设备层</li>\n</ul>\n<h3 id=\"1054几种典型的实时以太网\"><a class=\"anchor\" href=\"#1054几种典型的实时以太网\">#</a> 10.5.4 几种典型的实时以太网</h3>\n<p>1）<strong>Modbus/TCP</strong> ——MODICON 公司在 20 世纪 70 年代提出 ，用于 PLC 之间的通信的协议；</p>\n<p>2）<strong>Ethernet/IP</strong> —— 由国际控制网络 CI 和开放设备网络供应商协会 ODVA 在工业以太网协会 IEA 的协助下联合开发 。</p>\n<p>3**）PROFInet** —— 是由西门子公司和 Profibus 用户协会开发的基于以太网的自动化标准 ；</p>\n<p>4）<strong>EPA</strong> —— 是在国家科技部 “863” 计划的支持下，由浙江大学、浙大中控、中科院沈阳自动化所、清华大学、大连理工大学等单位联合组成的工作组制定的我国拥有自主知识产权的实时以太网标准，由现场设备级和过程监控级两级网络组成。</p>\n<h2 id=\"考试要求-9\"><a class=\"anchor\" href=\"#考试要求-9\">#</a> 考试要求</h2>\n<p>主要选择填空判断题</p>\n<p>波特率（以及比特率的概念）考计算题，起始位和停止位，数据位多少可能不一样</p>\n<p>选填，波特率</p>\n<p>奇偶校验与 CRC 循环冗余校验</p>\n<h2 id=\"课后习题-8\"><a class=\"anchor\" href=\"#课后习题-8\">#</a> 课后习题</h2>\n<p>1．数据通信的实质是什么？比较说明并行通信和串行通信的概念及其特点。</p>\n<p>2．画图说明串行通信的三种制式。</p>\n<p>3．串行异步通信和同步通信如何实现收、发双方的同步，两者有何区别？</p>\n<p>4．CSMA/CD 和令牌传送在原理和控制策略上有什么不同？</p>\n<p>5．频分多路与时分多路是如何实现多路复用的？试比较两种方式的特点。</p>\n<p>6．设要发送的基本信息位为 11010111，附加 16 位 CRC 校验信息位，生成多项式为，求发送代码多项式。</p>\n<p>7．OSI 参考模型的各曾分别是什么？完成什么功能？</p>\n<p>8．对比说明 RS-232C 总线标准与 TTL 逻辑电平的电气特性，它们之间如何进行接口？</p>\n<p>9．RS-232C 总线在实际应用中有几种接线方式？都应用在何种场合？</p>\n<p>10．结合图 10-16 与图 10-20，分析说明 PC 机与多个单片机构成的 RS-232C 通信网络。</p>\n<p>11．结合图 10-24 与图 10-25，分析说明 PC 机与多个单片机构成的 RS-485 通信网络。</p>\n<p>12．借助于以太网的控制系统有什么优点？</p>\n<p>13．工业以太网的关键技术是什么？</p>\n<p>14．新型控制网络系统可分为哪三个层次？简述每层的功能作用。</p>\n<h1 id=\"第-11-14-章-略\"><a class=\"anchor\" href=\"#第-11-14-章-略\">#</a> 第 11 - 14 章 略</h1>\n<h1 id=\"z变换重点\"><a class=\"anchor\" href=\"#z变换重点\">#</a> Z 变换（重点）</h1>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207204744628.png\" alt=\"image-20211207204744628\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207204804926.png\" alt=\"image-20211207204804926\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207204821726.png\" alt=\"image-20211207204821726\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211207204837920.png\" alt=\"image-20211207204837920\" /></p>\n<h2 id=\"考试要求-10\"><a class=\"anchor\" href=\"#考试要求-10\">#</a> 考试要求</h2>\n<p>傅里叶和拉式变换不需要考，Z 变换考一到两个大题</p>\n<p>Z 变换的定义</p>\n<p>求某个函数的 Z 变换</p>\n<p>定义式定义求法、根据性质（线性定理、初值和终值定理也要掌握，后两者求解方程、正变换时域位移性质掌握、频域不需要掌握）求解，考察较为基础</p>\n<p>指数函数的变换</p>\n<p>逆变换掌握分解为两个式子的和，然后再求解</p>\n<p>求差分方程，某一时刻和他前后的点组成方程求解 / 用通式：Z 变换求解的原理，用到在时域里的位移，利用时域位移求解</p>\n<p>10.2 定义、逆变换的求解方式</p>\n<p>例题 10-22</p>\n<p>10.4 后后面涉及 Z 变换具体应用，只需要掌握前面的部分</p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206212753219.png\" alt=\"image-20211206212753219\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206212810972.png\" alt=\"image-20211206212810972\" /></p>\n<p><img data-src=\"https://gitee.com/zhangjialin_zhulan/myimagerepo/raw/master/images/image-20211206212818845.png\" alt=\"image-20211206212818845\" /></p>\n",
            "tags": [
                "智能控制"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/29/computer-science/course_1/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%98%BE%E7%A4%BA%E5%99%A8%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/",
            "url": "http://zhanglin233.github.io/2021/11/29/computer-science/course_1/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%98%BE%E7%A4%BA%E5%99%A8%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/",
            "title": "显示器及其接口技术",
            "date_published": "2021-11-29T11:05:48.118Z",
            "content_html": "<h1 id=\"常用的显示器件\"><a class=\"anchor\" href=\"#常用的显示器件\">#</a> 常用的显示器件</h1>\n<h2 id=\"显示记录仪\"><a class=\"anchor\" href=\"#显示记录仪\">#</a> 显示记录仪</h2>\n<p>是以模拟方式连续显示和记录过程参数的动态变化，但其价格都很贵，在目前的计算机控制系统中已很少采用。</p>\n<h2 id=\"led数码管\"><a class=\"anchor\" href=\"#led数码管\">#</a> LED 数码管</h2>\n<p>具有结构简单、体积小、功耗低、配置灵活、显示清晰、可靠     性高等优点，已被微型计算机控制系统及智能化仪表广泛采用。</p>\n<h3 id=\"led显示器的工作原理\"><a class=\"anchor\" href=\"#led显示器的工作原理\">#</a> LED 显示器的工作原理</h3>\n<p><strong>LED</strong>(<strong>Light Emitting Diode</strong>) 是利用 PN 结把电能 转换成光能的固体发光器件，根据制造材料的不同可以发 出红、黄、绿、白等不同色彩的可见光来。LED 的伏安特性类似普通二极管，正向压降约为 2 伏左右，工作电流 一般在 10 -20 mA。单段的圆形或方形 LED 常用来显示设备的运行状态，8 段 ED 可以显示各种数字和字符。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129150846.png\" alt=\"\" /></p>\n<p>8 段 LED 显示器的结构与工作原理如上图所示，它是由个发光二极管组成，各段依次记为 a,b,c,d,e,f,g,dp, 其中 dp 表示小数点（不带小数点的称为 7 位 LED）。8 段 LED 显示器有共阴极和共阳极两种结构。共阴极 LED 的所有发光管的阴极并接成公共端 COM，而共阳极的所有发光管的阳极并接成公共端 COM。当共阴极 LED 的 COM 端接地，某个发光二极管的阳极加上高电平时，则该管有电流流过而点亮发光；当共阳极 LED 的 COM 端接高电平，某个发光二极管的阴极加上低电平时时，则该管有电流流过而点亮发光；</p>\n<p>CPU 的数据线与 LED 各段引脚相连，控制输出的数据，点亮 8 段 LED 不同段的组合，显示等 0~9、A~F 十六进制数。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129151805.png\" alt=\"\" /></p>\n<p>当引脚 dp~a 与 CPU 数据位 D&lt;sub&gt;7&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 一一对应相连时，共阴极 8 段 LED 显示器的段选码如下图所示</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129153620.png\" alt=\"\" /></p>\n<p>以显示字符 “3” 的段选码为例，“3” 的段选码为 16 进制的 4AH, 也就是二进制的 01001111，所以 CPU 输出的数据位 D&lt;sub&gt;7&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 为 01001111，则显示器的 dp,f,e 端接地，g,d,c,d,a 接高电平，COM 端接地时，显示器就显示出数字 &quot;3&quot;。</p>\n<p>数码管共阳极的段选码恰好与共阴极的段选码相反，如共阳极数码管 “3” 的段选码（10110000）是共阴极数码管 “3” 的段选码（01001111）的反码。</p>\n<p><strong>上图只是基于段引脚 dp~a 与数据位 D&lt;sub&gt;7&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 对应相连，如果连线改变，则段选码也随之改变。</strong></p>\n<h3 id=\"led显示器的显示方式\"><a class=\"anchor\" href=\"#led显示器的显示方式\">#</a> LED 显示器的显示方式</h3>\n<p>在计算机控制系统中，常利用 n 个 LED 显示器构成 n 位显示。通常把点亮 LED 某一段的控制称为段选，而把点亮 LED 某一位的控制称为位选或片选。根据 LED 显示器的段选线、位选线与控制端口的连接方式不同，LED 显示器有静态显示与动态显示两种方式，下面以 4 个共阴极 LED 的组合为例进行说明。</p>\n<h4 id=\"静态显示方式\"><a class=\"anchor\" href=\"#静态显示方式\">#</a> 静态显示方式</h4>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129154903.png\" alt=\"\" /></p>\n<p>4 个 LED 显示器的所有 COM 连在一起并接地（无位选），每个 LED 的段选线 dp~a 都各自与一个 8 位并行 I/O 口相连（段选独立）。</p>\n<p>因此 CPu 通过 I/O 口（具有锁存功能）对某个 LED 输出一次段选码之后，该 LED 就能一直保持显示结果直到下次送入新的段选码为止。</p>\n<p>这种静态显示的效果是每一位独立显示，同一时间内每一位都能稳定地显示各自不同的字符。其缺点是电路中占用 I/O 口资源多，如 4 个 LED 显示器需要有 4 个 8 位并行口芯片，线路复杂，硬件成本高；又因为同时显示，功耗大；优点是占用 CPU 时间少，显示稳定可靠。适用于大规模的实时控制系统。</p>\n<h4 id=\"动态显示方式\"><a class=\"anchor\" href=\"#动态显示方式\">#</a> 动态显示方式</h4>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129163955.png\" alt=\"\" /></p>\n<p>4 个 LED 显示器各自的各段选线对应并接在一起，由一个 8 位 I/O 口（1）进行统一段选控制，而各自的 COM 端则由另外一个 I/O 口进行位选控制（共阴极 LED 送低电平，共阳极 LED 送高电平）。因此，要显示不同的字符，只能由 CPu 通过两个 I/O 口依次轮流输出段选码和位选码，循环扫描 LED, 使其显示分时。缺点是电路中占用 I/O 口资源多；优点是占用 CPU 机时少，显示稳定可靠 。</p>\n<h3 id=\"led显示器的接口电路\"><a class=\"anchor\" href=\"#led显示器的接口电路\">#</a> LED 显示器的接口电路</h3>\n<h4 id=\"静态显示接口电路\"><a class=\"anchor\" href=\"#静态显示接口电路\">#</a> 静态显示接口电路</h4>\n<h4 id=\"动态显示接口电路\"><a class=\"anchor\" href=\"#动态显示接口电路\">#</a> 动态显示接口电路</h4>\n<h2 id=\"lcd\"><a class=\"anchor\" href=\"#lcd\">#</a> LCD</h2>\n<p>以其功耗极低的特点，占据了从电子表到计算器，从袖珍仪表到便携式微型计算机等应用场合。</p>\n<h2 id=\"crt终端\"><a class=\"anchor\" href=\"#crt终端\">#</a> CRT 终端</h2>\n<p>CRT 终端以其图文并茂的直观生动画面，可以显示生产过程中的各种画面及报表，如生产流程图、显示报警图、趋势曲线图、     路查询图等，在很多微型计算机控制系统中，特别在 DDC，SCC 以及 DCS 控制系统中，大都采用 CRT 操作台进行监视和控制。</p>\n",
            "tags": [
                "智能控制"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/28/computer-science/course_1/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E9%94%AE%E7%9B%98%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/",
            "url": "http://zhanglin233.github.io/2021/11/28/computer-science/course_1/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E9%94%AE%E7%9B%98%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/",
            "title": "键盘及其接口技术",
            "date_published": "2021-11-27T18:24:07.211Z",
            "content_html": "<h1 id=\"键盘输入电路\"><a class=\"anchor\" href=\"#键盘输入电路\">#</a> 键盘输入电路</h1>\n<p>计算机控制系统中的键盘通常采用触点式按键，触点式按键是利用机械触点的闭合或断开来输入信息</p>\n<h2 id=\"键盘的抖动干扰\"><a class=\"anchor\" href=\"#键盘的抖动干扰\">#</a> 键盘的抖动干扰</h2>\n<p>由于机械触点的弹性振动，按键在按下时不会马上稳定地接通，在谈起时也不能一下子完全断开，因而在按键闭合和断开的瞬间均会出现一连串的抖动，这种抖动称为按键的抖动干扰，其产生的波形如图所示<br />\n<img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128020838.png\" alt=\"\" /></p>\n<p>当按键按下时会产生前沿抖动，当按键弹起时会产生后沿抖动。这是所有机械触点式按键在状态输出时的共性问题，抖动的时间长短取决于按键的机械特性与操作状态，一般为 10 ms~100 ms, 这是键处理设计时要考虑的一个重要参数。</p>\n<h2 id=\"抖动干扰的消除\"><a class=\"anchor\" href=\"#抖动干扰的消除\">#</a> 抖动干扰的消除</h2>\n<p>按键的抖动会造成按一次产生的开关状态被 CPU 误读几次。为了使 CPU 能正确地读取按键状态，必须在按键闭合或断开时，消除产生的前沿或后沿抖动，去抖动的方法有硬件方法与软件方法。</p>\n<h3 id=\"硬件方法\"><a class=\"anchor\" href=\"#硬件方法\">#</a> 硬件方法</h3>\n<p>​\t硬件方法是设计一个滤波延时电路或单稳态电路等硬件电路来避开按键的抖动时间。滤波延时消抖电路如图所示</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128021627.png\" alt=\"\" /></p>\n<p>设置在按键 s 与 CPU 数据线 Di 之间。按键 S 未按下时，电容两端电压为 0，即非门输入 Vi 为 0，输出 V0 为 1。当 S 按下时，由于 C 两端电压不能突变，充电电压 Vi 在充电时间内未达到非门的开启电压，输出 V0 将不会改变，直到充电电压 Vi 大于门的开启电压，其输出 Vi 才变为 0，这段充电延迟时间取决于 R1、R2 和 C 值得大小，电路设计时只需要使之大于等于 100 ms 即可避开按键抖动的影响。同理，按键 S 断开时，即使出现抖动，由于 C 的放电延迟过程，也会消除按键抖动的影响。</p>\n<p>下图中 V1 是未施加滤波电路含有前沿抖动、后沿抖动的波形，V2 是施加滤波电路后消除抖动的波形。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128022924.png\" alt=\"\" /></p>\n<h3 id=\"软件方法\"><a class=\"anchor\" href=\"#软件方法\">#</a> 软件方法</h3>\n<p>​\t软件方法是指编制一段时间大于 100 ms 的延时程序，在第一次检测到有键按下时，执行这段延时子程序使键的前沿抖动消失后再检测该键状态，如果该键仍保持闭合状态电平，则确认为该键已经按下，否则无键按下，从而消除了抖动的影响。同理，在检测到按键释放后，页同样要延迟一段时间，以消除后沿抖动，然后转入对该按键的处理。</p>\n<h1 id=\"非编码矩阵式键盘\"><a class=\"anchor\" href=\"#非编码矩阵式键盘\">#</a> 非编码矩阵式键盘</h1>\n<p>​\t当按键数量较多时，为了少占用 CPU 的 I/O 口线，通常将键排列成矩阵式结构。矩阵式结构也是非编码键盘中的一种形式。</p>\n<h2 id=\"矩阵式键盘的结构构成\"><a class=\"anchor\" href=\"#矩阵式键盘的结构构成\">#</a> 矩阵式键盘的结构构成</h2>\n<p>​\t矩阵式键盘又叫行列式键盘，是用 I/O 口线组成的行、列矩阵结构，在每根行线与列线的交叉处，二线不直接相通而是通过一个按键跨接接通。采用这种矩阵结构只需要 M 根行输出线和 N 根列输入线，就可连接 MxN 个按键，再通过键盘处理程序便可识别键值。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128024347.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128024421.png\" alt=\"\" /></p>\n<p>​\t在键盘中无任何键按下时，所有的行线和列线被断开且相互独立，输入线 Y 0~Y 7 列都为高电平，当有一键按下时，则该键所在的行线与列线接通，因此，该列线的电平取决于该键所在的行线。基于此，产生了 “行扫描法” 与 “线反转法” 两种识别方法.</p>\n<p>​\t行扫描法又称逐行零扫描法，即逐行输出行扫描信号 “0”，使各行依次为低电平，然后分别读入列数据检测，检查此（低电平）行中是否有键按下。如果读得某列线为低电平，则表示此（低电平）行线与此列线的交叉处有键按下，再对该键进行编码计算出键值，然后转入该建的功能子程序入口地址；如果没有任何一根列线为低电平，则说明此（低电平）行没有键按下。接着进行下一行的 “0” 行扫描与列读入，直到 8 行全部查完，若无键按下则返回。</p>\n<p>​\t有时为了快速判断键盘中是否有键按下，也可先将全部行线同时置为低电平，然后检测列线的电平状态，若所有列线均为高电平，则说明键盘中无键按下，立即返回；若要有一列的电平为低，则表示键盘中有键按下，然后再如上那样逐行扫描。</p>\n<h2 id=\"矩阵式键盘的程序设计\"><a class=\"anchor\" href=\"#矩阵式键盘的程序设计\">#</a> 矩阵式键盘的程序设计</h2>\n<p>​\t在计算机控制系统中，键盘扫描只是 CPU 工作的一部分。因此在设计键盘扫描程序时，必须保证键盘操作的实时性，又不能占用 CPU 太多的时间，还要充分考虑到抖动干扰的消除，一般可根据情况选用编程扫描、定时扫描或中断扫描中的一种方式。</p>\n<h3 id=\"扫描程序的编写\"><a class=\"anchor\" href=\"#扫描程序的编写\">#</a> 扫描程序的编写</h3>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128212635.png\" alt=\"\" /></p>\n<pre><code class=\"language-basH\">key:  # 行值寄存器CL和列值寄存器DL清零\n      MOV AL, 0\n      MOV CL, AL\n      MOV DL, AL\n      # 使所有行线为低电平\n      MOV AL, 0FFH\n      OUT PORT1, AL\n      # 读列均值\n      IN AL, PORTQ\n      # 检查是否有键按下\n      CMP AL, 0FFH\n      # 无键按下转返回\n      JZ DONE\n      # 有键按下调延时100 ms子程序\n      CALL DELAY\n      # 重复上述扫描\n      MOV AL, 0FFH\n      OUT PORT1, AL\n      IN AL, 0FFH\n      CMP AL, 0FFH\n      # 无键按下转返回\n      JZ DONE\n      # 行数08送AH\n      MOV AH, 08\n      # 行扫描初值（即X0线）送BL\n      MOV BL, 01H\n      \nkey1: # 输出使某行为低电平\n\t  MOV AL, BL\n\t  OUT PORT1, AL  \n\t  # 读入列值\n\t  IN AL, PORT1   \n\t  # 判断此行是否有键按下\n\t  CMP AL, 0FFH\n\t  # 有键按下转KEY2\n\t  JNZ KEY2\n\t  # 无键按下，行值寄存器加08\n\t  MOV AL, CL\n\t  ADD AL, 08H\n\t  DAA\n\t  MOV CL, AL\n\t  # 求下一行为低电平的输出代码\n\t  RCL\tBL, 1\n\t  DEC AH\n\t  JNZ KEY1\n\t\t\nDONE: IRET\nKEY2: INC DL\n\t  RCR AL, 1\n\t  JC KEY2\n\t  MOV AL, CL\n\t  ADD AL, DL\n\t  DAA\n\t  MOV [BUFF], AL\n\t  JMP KEYADR\n\t  END KEY\n</code></pre>\n<h1 id=\"编码键盘\"><a class=\"anchor\" href=\"#编码键盘\">#</a> 编码键盘</h1>\n<p>​\t上面所述的非编码都是通过软件方法来实现键盘扫描、键值处理和消除抖动干扰的。</p>\n<p>​\t显然，这将占用较多的 CPU 时间。在一个较大的控制系统中，不允许 CPU 主要用来执行键盘程序，这将严重影响系统的实时控制。下面以二进制编码键盘为例，介绍一种用硬件方法来识别和解决抖动干扰的键盘编码器及编码键盘接口电路。</p>\n<h2 id=\"二进制编码\"><a class=\"anchor\" href=\"#二进制编码\">#</a> 二进制编码</h2>\n<p>​\t具有优先级的二进制 8 位编码器 CD4532B 的真值表如下图所示</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128235658.png\" alt=\"\" /></p>\n<p>​\t表示芯片优先级的输入允许端 E&lt;sub&gt;i&lt;/sub &gt; 为 0 时，无论编码器的信号输入 I&lt;sub&gt;7&lt;/sub&gt;~I&lt;sub&gt;0&lt;/sub &gt; 为何状态，编码器输出全为 0，芯片处于屏蔽状态，同时 E&lt;sub&gt;0&lt;/sub &gt; 为 0，也屏蔽下一级芯片；当输入允许端 E&lt;sub&gt;i&lt;/sub &gt; 为 1 时，且编码器的 I&lt;sub&gt;7&lt;/sub&gt;~I&lt;sub&gt;0&lt;/sub &gt; 全为 0 时，编译输出也为 0，但输出允许端 E&lt;sub&gt;0&lt;/sub &gt; 为，表明此编码器输入端无键按下，却允许优先级低的相邻编码器处于编码状态。这两种情形下的工作状态端 GS 均为 “0”。</p>\n<p>​\t该芯片的 8 个输入端中，I&lt;sub&gt;0&lt;/sub &gt; 的优先级最高，I&lt;sub&gt;7&lt;/sub &gt; 优先级最低。当有多个按键按下时，优先级高的被选中，同时自动屏蔽优先级低的各输入端和下一级芯片（使 E0 端为 0）。比如处于正常编码状态即 Ei 为 1，当 I&lt;sub&gt;0&lt;/sub &gt; 端为 1 时，其余各输入端无论为 1 或 0，编码输出端均为二进制 000，同时 GS 端为 1，E&lt;sub&gt;0&lt;/sub &gt; 端为 0，而当 I&lt;sub&gt;0&lt;/sub &gt; 端为 0，I&lt;sub&gt;1&lt;/sub &gt; 端为 1 时，编码输出则为二进制 001；以此类推・・・・・・，输入端的键值号与二进制编码输出一一对应。</p>\n<h2 id=\"编码键盘接口电路\"><a class=\"anchor\" href=\"#编码键盘接口电路\">#</a> 编码键盘接口电路</h2>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129000949.png\" alt=\"\" /></p>\n<p>​\t如图是一种采用两片 CD4532B 构成的 16 个按键的二进制编码接口电路。其中，由于 U&lt;sub&gt;1&lt;/sub &gt; 的 E&lt;sub&gt;0&lt;/sub &gt; 作为 U2 的 Ui, 所以按键 S0 的优先级最高，S&lt;sub&gt;15&lt;/sub &gt; 的优先级最低。U&lt;sub&gt;1&lt;/sub &gt; 和 U&lt;sub&gt;2&lt;/sub &gt; 的输出 O&lt;sub&gt;2&lt;/sub&gt;~O&lt;sub&gt;0&lt;/sub &gt; 经或门 A&lt;sub&gt;3&lt;/sub&gt;~A&lt;sub&gt;1&lt;/sub &gt; 输出，已形成低 3 位编码 D&lt;sub&gt;2&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub&gt;。而最高位 D&lt;sub&gt;3&lt;/sub &gt; 则有 U&lt;sub&gt;2&lt;/sub &gt; 的 GS 产生。当按键 S&lt;sub&gt;8&lt;/sub&gt;~S&lt;sub&gt;3&lt;/sub &gt; 中有一个闭合时，其输出为 1。从而 S&lt;sub&gt;0&lt;/sub&gt;~S&lt;sub&gt;15&lt;/sub &gt; 任意一个键被按下，由编码位 D&lt;sub&gt;3&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 均可消除相应的 4 位二进制码。</p>\n<p>​\t为了消除按键按下时产生的抖动干扰，该接口电路还设置了由与非门 B&lt;sub&gt;1&lt;/sub&gt;、B&lt;sub&gt;2&lt;/sub&gt;、电阻 R&lt;sub&gt;1&lt;/sub&gt;、R&lt;sub&gt;2&lt;/sub&gt;、电容 C&lt;sub&gt;2&lt;/sub &gt; 组成的单稳电路和由或门 A&lt;sub&gt;4&lt;/sub&gt;、电阻 R&lt;sub&gt;1&lt;/sub&gt;、电容 C&lt;sub&gt;1&lt;/sub &gt; 组成的延时电路，电路中 E、F、G 、H 和 I 这五点的波形如图所示。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129003055.png\" alt=\"\" /></p>\n",
            "tags": [
                "智能控制"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-18-pixiv2/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-18-pixiv2/",
            "title": "爬取p站(pixiv)的图片（二）",
            "date_published": "2021-11-26T17:22:09.574Z",
            "content_html": "<h3 id=\"成功爬取pixiv上的图片\"><a class=\"anchor\" href=\"#成功爬取pixiv上的图片\">#</a> 成功爬取 pixiv 上的图片</h3>\n<p>在经过了三天的奋战之后，我终于成功的爬取到了 pixiv 上的图片，看着文件夹里的众多好看的图片的感觉真不错，以后再也不缺壁纸和头像了（hiahiahia）。接下来言归正传，分享一下我是如何爬取到这些图片的。</p>\n<h3 id=\"爬取pixiv上的图片的具体步骤\"><a class=\"anchor\" href=\"#爬取pixiv上的图片的具体步骤\">#</a> 爬取 pixiv 上的图片的具体步骤</h3>\n<h4 id=\"获取不同照片的id\"><a class=\"anchor\" href=\"#获取不同照片的id\">#</a> 获取不同照片的 id</h4>\n<p>我在我的<span class=\"exturl\" data-url=\"aHR0cDovL3poYW5nbGluLnNwYWNlLzIwMjAvMTEvamVreWxsLw==\">爬取 pixiv 的第一篇博客</span>中描述了我的初次尝试的爬取思路，虽然思路并没有问题，但是最终因为网站反扒的原因，我并没有成功的将图片爬取下来，本来我是打算等我再看点如何反 “反爬” 的教程之后再动手，但是昨天晚上回去的时候我随机点了几张图片观察它们的详细信息时，才发现他的域名是通过改变图片的 id 值来链接不同的照片，大体都是相同的 (我还是太年轻了，经验不够), 如 https://pixivic.com/illusts/64952228?VNK=f1808200, 其中的 '64952228' 就是图片的 id 值，当我们将它换成其他照片的 id 值就可以访问其他的照片，而我昨天通过访问'<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waXguaXB2NC5ob3N0L2lsbHVzdHJhdGlvbnM/aWxsdXN0VHlwZT1pbGx1c3QmYW1wO3NlYXJjaFR5cGU9b3JpZ2luYWwmYW1wO21heFNhbml0eUxldmVsPTQmYW1wO3BhZ2U9NSZhbXA7a2V5d29yZD0lRTYlQTElOUMlRTMlODElQUUlRTglOEElQjEmYW1wO3BhZ2VTaXplPTMw\">https://pix.ipv4.host/illustrations?illustType=illust&amp;searchType=original&amp;maxSanityLevel=4&amp;page=5&amp;keyword = 桜の花 &amp; pageSize=30</span>' 信息得到了一大串网址，虽然我们不能通过这些网址直接访问到相应的图片，但是我们可以发现这些网址之中也包含了相应的图片的 id 信息，所以如果我们能够将其中的 id 信息提取出来，并套到上面的那个网址中，这样我们就能通过代码批量的访问这些图片的地址并进而进行后面的操作。  (如图所示，只要输入类似图中的网址，我们就可以访问到不同的图片)<br />\n![](/images/20-11-18_pixiv5.png)</p>\n<p>我们将得到的一大串不能直接访问的网址保存到本地，得到如图所示的结果<br />\n！[](/images/20-11-18_pixiv1.png) 要提取・其中的 id 信息最好用的当然是用正则表达式了。<br />\n![](/images/20-11-18_pixiv2.png)(其中 i 为当前访问的是第几页的内容，后面讲)，这样我们就的到了所有图片的 id 信息，这个时候我们只需要将 id 信息填写到基本 url 中就可以组成能够直接访问到图片的链接。<br />\n![](/images/20-11-18_pixiv3.png)(其中 idtag 为 id + 页数，所以提取的时候只需要取前 8 位就行 (id 观察后能发现都是 8 位))，这个时候就完成了我们的第一步。</p>\n<h4 id=\"尝试访问图片链接\"><a class=\"anchor\" href=\"#尝试访问图片链接\">#</a> 尝试访问图片链接</h4>\n<p>正常来说我们获得了可以通过点击便访问到的链接，接下来就是通过代码访问这些链接、获取他们的 html 信息、并提取到其中能够直接下载的图片的链接，</p>\n<p>![](/images/20-11-18_pixiv6.png)</p>\n<p>你是不是也是这么想的呢，如果是的话，恭喜你也错了 (hhh), 我们运行一下这部分代码，便会发现它报错了，然后我用 selenium 模仿搜索了一下，便发现无论输入的是什么网址，打开的都是这个网站的首页，所以我们为了访问到图片的地址，应该伪装成我们是登陆状态，但是我在 xhr 翻啊翻，只找到了一个'set-cookie' 信息，并没有找到 cookie 信息，而且当我将 set-cookie 信息加入到 headers 之中后，还是无法访问到图片 (就离谱)，这个时候我实在是没办法了，只能先用 selenium 登录进这个网站之后再进行后续的操作，操作流程为找到登录按钮的标签 -&gt; 点击登录按钮 -&gt; 填写账号、密码和验证码，之后在访问图片的链接。接下来的事情就更离谱了 (我是真不知道一个非赢利的图片网站为什么在反爬上下这么大功夫)，我们用 selenium 打开 pixiv 首页，</p>\n<p>![](/images/20-11-18_pixiv11.png)</p>\n<p>直接打开的界面为：<br />\n![](/images/20-11-19_pixiv5.png)</p>\n<p>如果这时我们直接用代码寻找登录按钮时找不到的。<br />\n我们必须手动叉掉广告和二维码后，代码才能找到登录按钮，而且几秒钟之内不点掉的话，你就叉不掉了 (????, 我是懵逼了)。<br />\n找到之后，我们就将开始输入的账号和密码自动填入，至于验证码自动识别，我还不是很熟，暂且偷下懒，反正输验证码也不要多久。<br />\n![](/images/20-11-18_pixiv7.png)</p>\n<h4 id=\"下载图片\"><a class=\"anchor\" href=\"#下载图片\">#</a> 下载图片</h4>\n<p>成功登陆之后，那事情就简单了，获取网页的 html 信息并提取出图片可下载的地址：</p>\n<p>![](/images/20-11-18_pixiv9.png)</p>\n<p>保存图片到本地：</p>\n<p>![](/images/20-11-18_pixiv10.png)</p>\n<p>接下来打开文件夹就可以找到照片了</p>\n<hr />\n<h3 id=\"20-11-19的补充代码的部分细节改进\"><a class=\"anchor\" href=\"#20-11-19的补充代码的部分细节改进\">#</a> 20-11-19 的补充（代码的部分细节改进）</h3>\n<h4 id=\"页数的选取\"><a class=\"anchor\" href=\"#页数的选取\">#</a> 页数的选取</h4>\n<p>![](/images/20-11-19_pixiv3.png)<br />\n 可以选取下载的初始与终止页，不用每次从第一页下载，但是这种我感觉还是不太好，我是打算在本地再建立一个新文件，自动记录下载过的主题、页数和 id，以后再弄。</p>\n<h4 id=\"id的提取与挑选\"><a class=\"anchor\" href=\"#id的提取与挑选\">#</a> id 的提取与挑选</h4>\n<p>原来选取出来的 id 值既包括了作品的 id 值，还包括了部分作者的 id，这次改进之后只剩下了作品的 id。但是这样还是存在另一个问题：</p>\n<p>![](/images/20-11-19_pixiv1.png)</p>\n<p>我们可以考到这样提取出来的有些是重复的，如果我们每一个 id 的图片都要检查一下是否已经存在了就会浪费很多时间，所以我就又改进了一下，在组成网址前去掉重复值，最终代码为：</p>\n<p>![](/images/20-11-19_pixiv4.png)</p>\n<h4 id=\"关键字判断\"><a class=\"anchor\" href=\"#关键字判断\">#</a> 关键字判断</h4>\n<p>当输入的关键字找不到相关图片时，提醒用户换个关键字查找并中断程序</p>\n<p>![](/images/20-11-19_pixiv2.png)</p>\n<h3 id=\"完结撒花\"><a class=\"anchor\" href=\"#完结撒花\">#</a> 完结撒花</h3>\n<p>花了四天的时间终于将这个爬虫程序及博客写好了  (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3poYW5nbGluMjMzL2NvZGUvYmxvYi9tYXN0ZXIvLnZzY29kZS9weXRob24vJUU3JTg4JUFDJUU1JThGJTk2cGl4aXYlRTUlOUIlQkUlRTclODklODcvJUU3JTg4JUFDJUU1JThGJTk2JUU1JTlCJUJFJUU3JTg5JTg3LnB5\">代码地址</span>)<br />\n，真是痛并快乐着，这几天既学到了一些新知识，又复习了一些快忘掉的知识，收获还是很大滴，不枉我这几天没日没夜的改代码、敲博客弄得人都不好了，坐太久了现在脖子都稍微有点痛，这一两天就先休息一下想想下个任务写什么。</p>\n",
            "tags": [
                "Python 爬虫"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-17-pixiv1/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-17-pixiv1/",
            "title": "爬取p站(pixiv)的图片（一）",
            "date_published": "2021-11-26T17:22:09.572Z",
            "content_html": "<p>pixiv(<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGl4aXYubmV0Lw==\">地址 1</span>，翻不了墙的可以通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waXhpdmljLmNvbS8=\">地址 2</span> 访问) 上面有很多非常好看的图片，我也经常在上面寻找一些好看的图片，但自己一个一个下载又太慢了，然后刚好自己学的爬虫忘的差不多了，所以就想写个爬虫自动爬取 pixiv 上的图片，顺带复习一下以前学的知识。</p>\n<h3 id=\"一些图片这谁扛得住呀太好看了\"><a class=\"anchor\" href=\"#一些图片这谁扛得住呀太好看了\">#</a> 一些图片 (这谁扛得住呀，太好看了)</h3>\n<p>![](/images/3.jpg)<br />\n![](/images/2.jpg)<br />\n![](/images/4.jpg)</p>\n<h3 id=\"第一次尝试失败\"><a class=\"anchor\" href=\"#第一次尝试失败\">#</a> 第一次尝试失败</h3>\n<p>因为我的梯子是白嫖的，直接从原网站下载的话可能速度会过慢，所以我选择从国内地址上下载。<br />\n打开网站先输入自己喜欢的类型，我找的是樱花类型。打开了网页之后便开始分析网页结构，为后面的编写代码做准备。打开开发者工具 (F12) 后便可以看到整个网页的 html 代码，<br />\n![](/images/11-17-pixiv.png) 使用工具栏中的小箭头随便点击一张图片便可在结构中定位到该图片的位置，<br />\n![](/images/11-17-pixiv2.png) 我们仔细观察之后就可以发现所有的图片都是位于 class='cell-container' 的 div 盒子中，而图片则是位于这个 div 标签下的 img 标签中，而每张图片的链接都储存在 img 标签的，所以理论上接下来我们只需找到每一个 img 标签并取得所有图片的链接就可以批量下载图片。但是这个网页跟一般的网页不同，一般的的网页可以根据改变页数而选择不同的图片，而这个网页采取的是动态刷新的方式来刷新图片，随着滚动条的滚动图片不断发生改变，而整个网页并不会刷新，网址并不会改变，这就给给我们的工作带来了一定的麻烦。<br />\n这个时候为了能够正常的获取我们所需要的数目的照片，我们就需要继续分析网页。在开发者工具中找到 “网络”（'networks'）, 我们可以观察到随着我们往下滑动页面，网络中的数据也是不断改变的。本来我是打算先找到 post 请求，然后就可以找到真正的请求网址，结果他竟然没有 post 请求！！！networks 中直接给出了返回的照片信息，但是我不知道如何收集开发者工具中的 img 信息，所以只能换个方法。<br />\n随着我们不断地滑动，networks 中的内容不断改变，通过观察可以观察到每滑动几下，刷新的数据中除了 jpg 信息，还有 2 个'<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waXguaXB2NC5ob3N0L2lsbHVzdHJhdGlvbnM/aWxsdXN0VHlwZT1pbGx1c3QmYW1wO3NlYXJjaFR5cGU9b3JpZ2luYWwmYW1wO21heFNhbml0eUxldmVsPTQmYW1wO3BhZ2U9NSZhbXA7a2V5d29yZD0lRTYlQTElOUMlRTMlODElQUUlRTglOEElQjEmYW1wO3BhZ2VTaXplPTMw\">https://pix.ipv4.host/illustrations?illustType=illust&amp;searchType=original&amp;maxSanityLevel=4&amp;page=5&amp;keyword = 桜の花 &amp; pageSize=30</span>' 信息，一个是 get 请求，一个是 options 请求 (虽然我不知道这个请求有什么用)。<br />\n![](/images/20-11-17_pixiv3.png) 我们选中其中一个可以发现一个请求 url, 我通过代码爬取了一下这个网址的源代码 (直接点击这个网址是无用的，我是通过在代码添加请求头访问)，发现其中包含了很多的照片的网址，然后再观察一下这个网址的组成，可以大胆猜测我们只要改变网址中 'page' 的属性值就可以访问到不同的图片组，然后我用代码爬了一下不同的 page 值的网页发现返回值确实不同，就在我以为我要成功的时候，现实又严重的打击了我的自信心。我试着用代码访问获得的众多的图片网址中的一个时，返回了失败的信息，估计是爬虫做的伪装的还不够，还是被认出来了。但是我暂时并不知道如何改进，所以这种方式我就暂时放弃了。<br />\n接下来继续观察网页返回的信息，可以发现在参数栏中也包含了 page 信息<br />\n！[](/images/20-11-17_pixiv4.png), 所以我就打算将这些信息打包成 data 信息并作为参数传入请求中</p>\n<pre><code>import requests\nfrom lxml import etree\n\n# 网址\nurl = 'https://pixivic.com/keywords?tag=樱花&amp;illustType=illust&amp;VNK=3fa7b1f4'\n\n# 反爬\nheader = &#123;\n    'accept':\n    'application/json, text/plain, */*',\n    'accept-encoding':\n    'gzip, deflate, br',\n    'accept-language':\n    'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',\n    'authorization':\n    'eyJhbGciOiJIUzUxMiJ9.eyJwZXJtaXNzaW9uTGV2ZWwiOjIsInJlZnJlc2hDb3VudCI6MSwiaXNCYW4iOjEsInVzZXJJZCI6NTk3NTIyLCJpYXQiOjE2MDU1MzA4ODEsImV4cCI6MTYwNTcwMzY4MX0.yPa-vDYWgMtp6Mer_Ycgyf4r6i6ZQoHFZJGi1v9CjYH7Q7T9Kz_Coa5PwbtZC0j-AvhRFEWaa5D5jxD8WujxBA',\n    'dnt':\n    '1',\n    'origin':\n    'https://pixivic.com',\n    'referer':\n    'https://pixivic.com/',\n    'sec-fetch-dest':\n    'empty',\n    'sec-fetch-mode':\n    'cors',\n    'sec-fetch-site':\n    'cross-site',\n    'cookie':\n    '__cfduid=d9b53ec0583ae0dc116fee426d77c30891605603315; expires=Thu, 17-Dec-20 08:55:15 GMT; path=/; domain=.cheerfun.dev; HttpOnly; SameSite=Lax',\n    'user-agent':\n    'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36 Edg/86.0.622.69'\n&#125;\n# 提交的数据\ndat = &#123;\n    'illustType': 'illust',\n    'searchType': 'original',\n    'maxSanityLevel': '4',\n    'page': '2',\n    'keyword': '樱花',\n    'pageSize': '30',\n&#125;\n\nr = requests.get(url, data= dat,headers=header, timeout=30)\nprint(r.status_code)\nr.raise_for_status()  # 如果状态不是200，则引发HTTPERROE异常\ntext = r.content.decode(encoding='utf-8', errors='ignore')\nprint(text)\nhtml = etree.HTML(text)\n</code></pre>\n<p>运行完整代码后，我们可以看到成功返回了信息，<br />\n![](/images/20-11-17_pixiv5.png), 但是这些都是没用的，一个有用的东西都没有！！！明显这是又被认出来是爬虫了，这次人家还客气点没有直接拒绝请求访问，只是给了假的页面而已。</p>\n<p>所以在折腾了将近一天的时间后还是没有成功的爬取下来图片，只能再去看一些相关的网课来学学怎么更好的伪装骗过系统，太难受了💔。</p>\n",
            "tags": [
                "Python 爬虫"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/nginx/2021-11-20-Nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/nginx/2021-11-20-Nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "title": "Nginx的反向代理与负载均衡",
            "date_published": "2021-11-26T17:22:09.563Z",
            "content_html": "<h1 id=\"nginx的反向代理与负载均衡\"><a class=\"anchor\" href=\"#nginx的反向代理与负载均衡\">#</a> Nginx 的反向代理与负载均衡</h1>\n<h2 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h2>\n<h3 id=\"什么是反向代理\"><a class=\"anchor\" href=\"#什么是反向代理\">#</a> 什么是反向代理</h3>\n<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 Internet 上的连接请求，然 后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202450.png\" alt=\"\" /></p>\n<h4 id=\"反向代理的作用\"><a class=\"anchor\" href=\"#反向代理的作用\">#</a> 反向代理的作用：</h4>\n<p>（1）保证内网的安全，阻止 web 攻击，大型网站，通常将反向代理作为公网访问地址，Web 服务器是内网</p>\n<p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>\n<h4 id=\"反向代理和正向代理的区别\"><a class=\"anchor\" href=\"#反向代理和正向代理的区别\">#</a> 反向代理和正向代理的区别</h4>\n<p>首先我们先理解正向代理，正向代理类似一个跳板机，代理访问外部资源。比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202139.png\" alt=\"\" /></p>\n<p><strong>正向代理的用途：</strong></p>\n<p>（1）访问原来无法访问的资源，如 google</p>\n<p>​    \t（2） 可以做缓存，加速访问资源</p>\n<p>（3）对客户端访问授权，上网进行认证</p>\n<p>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>\n<p><strong>正向代理即是客户端代理，代理客户端，服务端不知道实际发起请求的客户端.</strong><br />\n<strong> 反向代理即是服务端代理，代理服务端，客户端不知道实际提供服务的服务端</strong></p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202656.png\" alt=\"\" /></p>\n<p>正向代理中，proxy 和 client 同属一个 LAN，对 server 透明；<br />\n反向代理中，proxy 和 server 同属一个 LAN，对 client 透明。<br />\n实际上 proxy 在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。</p>\n<p>正向代理：买票的黄牛</p>\n<p>反向代理：租房的代理</p>\n<h3 id=\"配置反向代理\"><a class=\"anchor\" href=\"#配置反向代理\">#</a> 配置反向代理</h3>\n<p>将 travel 案例部署到 tomcat 中（ROOT 目录），上传到服务器。 （2）启动 TOMCAT，输入网址 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTc3LjEyOTo4MDgw\">http://192.168.177.129:8080</span> 可以看到网站首页</p>\n<pre><code>upstream tomcat-travel&#123; \n  server 192.168.177.129:8080;  # 修改为你自己的虚拟机的ip地址\n &#125; \n server &#123; \n   listen 80; # 监听的端口\n   server_name www.hmtravel.com; # 域名或 ip \n location / &#123; # 访问路径配置\n   # root index;# 案例的部署路径 默认index\n   proxy_pass http://tomcat-travel;   // 与上方tomcat-travel对应\n   index index.html index.htm; # 默认首页\n &#125; \n&#125; \n</code></pre>\n<p>重新启动 Nginx  然后用浏览器测试：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5obXRyYXZlbC5jb20=\">http://www.hmtravel.com</span> （此域名须配置域名）</p>\n<h2 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 负载均衡</h2>\n<h3 id=\"什么是负载均衡\"><a class=\"anchor\" href=\"#什么是负载均衡\">#</a> 什么是负载均衡</h3>\n<p>负载均衡 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备 和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。  负载均衡，英文名称为 Load Balance，其意思就是分摊到多个操作单元上进行执行， 例如 Web 服务器、FTP 服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完 成工作任务。</p>\n<h3 id=\"负载均衡准备工作\"><a class=\"anchor\" href=\"#负载均衡准备工作\">#</a> 负载均衡准备工作</h3>\n<p>将相同的工程复制三份或不同的工程部署到服务器上，分别修改他们的端口使端口各不相同，如 80，81，82。分别启动这三个服务。 为了能够区分是访问哪个服务器的网站，可以在首页标题加上标记以便区分</p>\n<h3 id=\"修改nginx配置文件\"><a class=\"anchor\" href=\"#修改nginx配置文件\">#</a> 修改 Nginx 配置文件</h3>\n<pre><code>upstream tomcat-travel &#123; \n\tserver 192.168.177.129:8080; # 项目的部署地址\n\tserver 192.168.177.129:8081  weight=2; # 不同的权重可以使不同的服务器被访问到的概率不同，权重越高概率越大\n\tserver 192.168.177.129:8082; \n &#125; \n server &#123; \n \tlisten 80; # 监听的端口\n \tserver_name www.hmtravel.com; # 绑定的域名或 ip \n\tlocation / &#123; # 访问路径配置\n \t\t# root index;# 根目录\n \t\tproxy_pass http://tomcat-travel; \n \t\tindex index.html index.htm; # 默认首页\n \t&#125; \n\terror_page 500 502 503 504 /50x.html; # 错误页面\n \tlocation = /50x.html &#123; \n \t\troot html; \n \t&#125; \n &#125;\n</code></pre>\n<p>启动 Nginx 观察结果便可</p>\n<p>参考文章：[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdGFvc3Rhcnl1L3AvMTA1NDcxMzIuaHRtbA==\">反向代理和正向代理区别 - 泛夜泰克 - 博客园 (cnblogs.com)</span>)</p>\n<p>​\t\t\t\t\t[2] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXF2NHkxbzc5dD9wPTUzOQ==\">黑马程序员 JavaWeb 全套基础教程，java web 从入门到项目实战（IDEA 版 javaweb）文档资料_哔哩哔哩_bilibili</span></p>\n",
            "tags": [
                "Nginx"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-7-10-java%E4%B9%8Bjunit%E6%B5%8B%E8%AF%95/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-7-10-java%E4%B9%8Bjunit%E6%B5%8B%E8%AF%95/",
            "title": "java之junit测试",
            "date_published": "2021-11-26T17:22:09.558Z",
            "content_html": "<h1 id=\"junit\"><a class=\"anchor\" href=\"#junit\">#</a> junit</h1>\n<h2 id=\"什么是junit\"><a class=\"anchor\" href=\"#什么是junit\">#</a> 什么是 junit</h2>\n<p>JUnit 是一个 Java 语言的单元测试框架。它由 Kent Beck 和 Erich Gamma 建立，逐渐成为源于 Kent Beck 的 sUnit 的 xUnit 家族中最为成功的一个。 JUnit 有它自己的 JUnit 扩展生态圈。多数 Java 的开发环境都已经集成了 JUnit 作为单元测试的工具。</p>\n<p>也就是说 junit 就是别人写好的单元测试框架，使用此框架你可以大大缩短你的测试时间和准确度（笔者现在还记得大一刚来的的时候，c 语言写的小程序，每次都是重启测试，那种编译 - 输入 -- 停止 - 编译的苦日子，很痛苦，今天用 junit 这个单元测试框架好多了）。</p>\n<h3 id=\"单元测试是什么\"><a class=\"anchor\" href=\"#单元测试是什么\">#</a> 单元测试是什么</h3>\n<p>百度百科的解释是这样的：单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。例如，你可能把一个很大的值放入一个有序 list 中去，然后确认该值出现在 list 的尾部。或者，你可能会从字符串中删除匹配某种模式的字符，然后确认字符串确实不再包含这些字符了。</p>\n<p>简单的说，单元测试就是对你程序中最小的功能模块进行测试，在 c 语言里可能是一个函数，java 中可能是一个方法或者类。目的就是为了提高代码的质量。</p>\n<p>### 为什么要引入单元测试<br />\n平常写代码的时候经常需要检验某些方法功能是否正常，正常情况下需要创立完整的类来运行检验该方法，这样难免效率低下，引入 junit 之后就不用构建一个完整的程序便可以对某一方法进行检验。</p>\n<h2 id=\"idea中junit的使用\"><a class=\"anchor\" href=\"#idea中junit的使用\">#</a> IDEA 中 junit 的使用</h2>\n<h3 id=\"创建包名及代码\"><a class=\"anchor\" href=\"#创建包名及代码\">#</a> 创建包名及代码</h3>\n<p>包名规范</p>\n<p>单元测试的代码都放在 test 包下，和源码不在同一个包下<br />\n！[](/images/2021_7_10_junit/1.png)<br />\n 如图所示，DaoTest 类单独放在 test 包下。<br />\n测试的类方法都以 test 开头，后面接要测试的类或者方法的名字</p>\n<h4 id=\"junit使用方法\"><a class=\"anchor\" href=\"#junit使用方法\">#</a> junit 使用方法</h4>\n<p>以下图代码为例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">User</span> loginUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"superBaby\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">UserDao</span> dao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>loginUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在要测试的方法前键入 @test，这是会发现 test 为红色提示。<br />\n![](/images/2021_7_10_junit/2.png)<br />\n 这是我们只需按住 Ctrl+shift+Alt+s 打开项目结构，找到库并在右边找到 + 号按钮新建一个 java 库，并在 idea 的安装目录中的 lib 文件夹找到 junit-4.12.jar 文件并导入即可。<br />\n![](/images/2021_7_10_junit/6.png)<br />\n![](/images/2021_7_10_junit/3.png)<br />\n 接下来，便需要将 junit.jar 文件导入到模块中。<br />\n![](/images/2021_7_10_junit/4.png)<br />\n 选中 junit4.12jar 文件并点击右上方的 + 号并添加到模块依赖中。<br />\n![](/images/2021_7_10_junit/5.png)<br />\n 接下来便返回项目中，导入 org.junit.test 包后，可以看到 @Test 变为了正常的颜色，接下来点击方法前面的绿色三角形便可以对方法进行测验了。<br />\n![](/images/2021_7_10_junit/7.png)</p>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%85%8D%E7%BD%AE%E9%AB%98%E7%BA%A7/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%85%8D%E7%BD%AE%E9%AB%98%E7%BA%A7/",
            "title": "SpringBoot运维实用篇之配置高级",
            "date_published": "2021-11-26T17:22:09.557Z",
            "content_html": "<h1 id=\"springboot运维实用篇之配置高级\"><a class=\"anchor\" href=\"#springboot运维实用篇之配置高级\">#</a> springboot 运维实用篇之配置高级</h1>\n<h2 id=\"临时属性配置\"><a class=\"anchor\" href=\"#临时属性配置\">#</a> 临时属性配置</h2>\n<ul>\n<li>\n<p>带属性数启动 SpringBoot, 使用替换配置文件中的属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java <span class=\"token operator\">-</span>jar 工程名<span class=\"token punctuation\">.</span>jar <span class=\"token operator\">--</span>server<span class=\"token punctuation\">.</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119220801.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>通过编程形式带参数启动 SpringBoot 程序，为程序添加运行参数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\targ<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"--server.port=8080\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SSMPApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>不携带参数启动 SpringBoot 程序</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SSMPApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>携带多个属性启动 SpringBoot, 属性之间使用空格分隔</p>\n</li>\n<li>\n<p>临时属性必须是当前 boot 工程支持的属性，否则设置无效</p>\n</li>\n<li>\n<p>属性加载优先级</p>\n<p>[](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvZmVhdHVyZXMuaHRtbCNmZWF0dXJlcy5leHRlcm5hbC1jb25maWc=\">Core Features (spring.io)</span>)</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119214529.png\" alt=\"/\" /></p>\n</li>\n</ul>\n<h2 id=\"配置文件分类\"><a class=\"anchor\" href=\"#配置文件分类\">#</a> 配置文件分类</h2>\n<h3 id=\"springboot中4级配置文件\"><a class=\"anchor\" href=\"#springboot中4级配置文件\">#</a> SpringBoot 中 4 级配置文件</h3>\n<p>1 级： file ：config/application.yml 【最高】 （file：与 jar 包位于同一目录下）</p>\n<p>2 级： file ：application.yml</p>\n<p>3 级：classpath：config/application.yml</p>\n<p>4 级：classpath：application.yml 【最低】</p>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h3>\n<ul>\n<li>\n<p>1 级与 2 级留做系统打包后设置通用属性，1 级常用于运维经理进行线上整体项目部署方案调控</p>\n</li>\n<li>\n<p>3 级与 4 级用于系统开发阶段设置通用属性，3 级常用于项目经理进行整体项目属性调控</p>\n</li>\n<li>\n<p>如果 yml 与 properties 在不同层级中共存会是什么效果？ 例：类路径 application.properties 属性是否覆盖文件系统 config 目录中 application.yml 属性</p>\n<ul>\n<li>项目类路径配置文件：服务于开发人员本机开发与测试</li>\n<li>项目类路径 config 目录中配置文件：服务于项目经理整体调控</li>\n<li>工程路径配置文件：服务于运维人员配置涉密线上环境</li>\n<li>工程路径 config 目录中配置文件：服务于运维经理整体调控</li>\n</ul>\n</li>\n<li>\n<p>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序</p>\n</li>\n</ul>\n<h2 id=\"自定义配置文件\"><a class=\"anchor\" href=\"#自定义配置文件\">#</a> 自定义配置文件</h2>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/",
            "title": "springboot运维实用篇之打包与运行",
            "date_published": "2021-11-26T17:22:09.554Z",
            "content_html": "<h1 id=\"打包与运行\"><a class=\"anchor\" href=\"#打包与运行\">#</a> 打包与运行</h1>\n<p>SpringBoot 项目可以基于 java 环境下独立运行 jar 文件下独立运行 jar 文件启动服务</p>\n<h2 id=\"程序打包与运行windows版\"><a class=\"anchor\" href=\"#程序打包与运行windows版\">#</a> 程序打包与运行（Windows 版）</h2>\n<h3 id=\"springboot项目快速启动\"><a class=\"anchor\" href=\"#springboot项目快速启动\">#</a> SpringBoot 项目快速启动</h3>\n<ol>\n<li>\n<p>对 SpringBoot 项目打包 (执行 Maven 构建指令 package)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn <span class=\"token keyword\">package</span></pre></td></tr></table></figure></li>\n<li>\n<p>运行项目 (执行启动指令)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java <span class=\"token operator\">-</span>jar 打包后的项目名称<span class=\"token punctuation\">.</span>jar</pre></td></tr></table></figure><p><strong>注意事项：jar 支持命令行启动需要依赖 maven 插件支持，请确认打包时是否具有 SpringBoot 对应的 maven 插件</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"可执行jar包目录结构\"><a class=\"anchor\" href=\"#可执行jar包目录结构\">#</a> 可执行 jar 包目录结构</h3>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119212734.png\" alt=\"\" /></p>\n<h3 id=\"jar包描述文件manifestmf\"><a class=\"anchor\" href=\"#jar包描述文件manifestmf\">#</a> jar 包描述文件 (MANIFEST.MF)</h3>\n<ul>\n<li>\n<p>普通工程</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Manifest-Version<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Implementation-Title<span class=\"token operator\">:</span> spring_01_01_quickStart</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Implementation-Version<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span>.<span class=\"token number\">1</span>-SNAPSHOT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Build-Jdk-Spec<span class=\"token operator\">:</span> <span class=\"token number\">1.8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Created-By<span class=\"token operator\">:</span> Maven Jar Plugin <span class=\"token number\">3.2</span>.<span class=\"token number\">0</span></pre></td></tr></table></figure></li>\n<li>\n<p>基于 Spring-Boot-maven-plugin 打包的工程</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Manifest-Version<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Spring-Boot-Classpath-Index<span class=\"token operator\">:</span> BOOT-INF/classpath.idx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Implementation-Title<span class=\"token operator\">:</span> spring_01_01_quickStart</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Implementation-Version<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span>.<span class=\"token number\">1</span>-SNAPSHOT</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Spring-Boot-Layers-Index<span class=\"token operator\">:</span> BOOT-INF/layers.idx</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Start-Class<span class=\"token operator\">:</span> com.example.Spring0101QuickStartApplication</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Spring-Boot-Classes<span class=\"token operator\">:</span> BOOT-INF/classes/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Spring-Boot-Lib<span class=\"token operator\">:</span> BOOT-INF/lib/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Build-Jdk-Spec<span class=\"token operator\">:</span> <span class=\"token number\">1.8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Spring-Boot-Version<span class=\"token operator\">:</span> <span class=\"token number\">2.5</span>.<span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Created-By<span class=\"token operator\">:</span> Maven Jar Plugin <span class=\"token number\">3.2</span>.<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Main-Class<span class=\"token operator\">:</span> org.springframework.boot.loader.JarLauncher</pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"命令行启动常见问题及解决方案\"><a class=\"anchor\" href=\"#命令行启动常见问题及解决方案\">#</a> 命令行启动常见问题及解决方案</h3>\n<ul>\n<li>\n<p>Windows 端口被占用</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 查询端口</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>netstat -ano</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># 查询指定端口</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>netstat -ano |findstr <span class=\"token string\">\"端口号\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre># 根据进程PID查询进程名称</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tasklist |findstr <span class=\"token string\">\"进程PID号\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre># 根据PID杀死任务</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>taskkill /F /PID <span class=\"token string\">\"进程PID号\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre># 根据进程名称杀死任务</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>taskkill -f -t -im <span class=\"token string\">\"进程名称\"</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"程序打包与运行linux版\"><a class=\"anchor\" href=\"#程序打包与运行linux版\">#</a> 程序打包与运行 (Linux 版)</h2>\n<ol>\n<li>上传安装包</li>\n<li>执行 jar 命令：java -jar 工程名.jar</li>\n<li>Windows 与 Linux 下执行 Boot 打包程序流程相同，仅需确保运行环境有效即可</li>\n</ol>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8A%80%E6%9C%AF/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8A%80%E6%9C%AF/",
            "title": "springboot基础篇之整合第三方技术",
            "date_published": "2021-11-26T17:22:09.547Z",
            "content_html": "<h1 id=\"spring基础之整合第三方技术\"><a class=\"anchor\" href=\"#spring基础之整合第三方技术\">#</a> Spring 基础之整合第三方技术</h1>\n<h2 id=\"整合junit\"><a class=\"anchor\" href=\"#整合junit\">#</a> 整合 Junit</h2>\n<ol>\n<li>导入测试对应的 starter</li>\n<li>测试类使用 @SpringBoot 修饰</li>\n<li>使用自动装配的形式添加要测试的对象</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 名称: @SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 类型：测试类注解</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 位置：测试类上方</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 作用：设置 Junit 加载的 SpringBoot 启动类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//classes: 设置 SpringBoot 的启动类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes<span class=\"token operator\">=</span><span class=\"token class-name\">SpringBootJunitApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringBootJunitApplicationTest</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>如果测试类在 SpringBoot 启动类的包或子包中，可以忽略启动类的设置，也就是忽略 classes 的设定</li>\n</ol>\n<h2 id=\"整合mybatis\"><a class=\"anchor\" href=\"#整合mybatis\">#</a> 整合 MyBatis</h2>\n<ul>\n<li>核心配置：数据库连接相关信息</li>\n<li>映射配置：SQL 映射 (XML / 注解)</li>\n</ul>\n<ol>\n<li>\n<p>创建新模块，选择 Spring 初始化，并配置模块相关基础信息</p>\n</li>\n<li>\n<p>选择当前模块需要使用的技术集（MyBatis、MySQL）(勾选 MyBatis 技术，也就是导入 MyBatis 对应的 starter)</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119171012.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>设置数据源参数</p>\n</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 数据库连接相关信息转换成配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\"># 驱动类过时，提醒更换为 com.mysql.cj.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr></table></figure><ol start=\"4\">\n<li>SpringBoot 版本低于 2.4.3 (不含)，Mysql 驱动版本大于 8.0 时，需要在 url 连接串中配置时区 或在 MySQL 数据库端配置时区解决此问题</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">jdbc:mysql</span><span class=\"token punctuation\">:</span> //localhost<span class=\"token punctuation\">:</span>3306/ssm_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr></table></figure><ol start=\"5\">\n<li>定义数据层接口与映射配</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据库 SQL 映射需要添加 @Mapper 被容器识别</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>测试类中注入 dao 接口，测试功能</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot08MybatisApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"整合mybatis-plus\"><a class=\"anchor\" href=\"#整合mybatis-plus\">#</a> 整合 MyBatis-Plus</h2>\n<ul>\n<li>MyBatis-Plus 与 MyBatis 区别\n<ul>\n<li>导入坐标不同</li>\n<li>数据层实现简化</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>\n<p>手动添加 SpringBoot 整合 MyBatis-Plus 的坐标，可以通过 mvnrepository 获取</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">&lt;!-- 由于 SpringBoot 中未收录 MyBatis-Plus 的坐标版本，需要指定对应的 Version--></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>定义数据层接口与映射配置，继承 BaseMapper</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>其他同 SpringBoot 整合 MyBatis</p>\n</li>\n</ol>\n<h2 id=\"整合druid\"><a class=\"anchor\" href=\"#整合druid\">#</a> 整合 Druid</h2>\n<ul>\n<li>\n<p>指定数据源类型</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSourc</pre></td></tr></table></figure></li>\n<li>\n<p>导入 Druid 对应的 starter</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>变更 Druid 的配置方式</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr></table></figure><h2 id=\"整合第三方技术通用方式\"><a class=\"anchor\" href=\"#整合第三方技术通用方式\">#</a> 整合第三方技术通用方式</h2>\n<ul>\n<li>\n<p>导入对应的 starter</p>\n</li>\n<li>\n<p>根据提供的配置格式，配置非默认值对应的配置项</p>\n</li>\n</ul>\n",
            "tags": [
                "java springboot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/",
            "title": "springboot基础篇之基础配置",
            "date_published": "2021-11-26T17:22:09.546Z",
            "content_html": "<h1 id=\"springboot基础篇之基础配置\"><a class=\"anchor\" href=\"#springboot基础篇之基础配置\">#</a> springboot 基础篇之基础配置</h1>\n<h2 id=\"属性配置\"><a class=\"anchor\" href=\"#属性配置\">#</a> 属性配置</h2>\n<h3 id=\"复制工程\"><a class=\"anchor\" href=\"#复制工程\">#</a> 复制工程</h3>\n<ul>\n<li>原则\n<ul>\n<li>保留工程基础结构</li>\n<li>抹掉原始工程结构</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>在工作空间中复制对应工程，并修改工程名称</li>\n<li>删除与 Idea 有关的配置，仅保留 src 目录与 pom.xml 文件</li>\n<li>修改 pom.xml 文件中的 artifachId 与新工程 / 模块名相同</li>\n<li>删除 name 标签（可选）</li>\n<li>保留备份工程后期使用</li>\n</ol>\n<h3 id=\"修改配置\"><a class=\"anchor\" href=\"#修改配置\">#</a> 修改配置</h3>\n<ul>\n<li>\n<p>修改服务器端口</p>\n<p>SpringBoot 默认配置文件为 application.properties，通过键值对配置相应属性。修改服务器端口：</p>\n</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">server.port</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">80</span></pre></td></tr></table></figure><ul>\n<li>关闭运行日志图标</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">spring.main.banner-mode</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">off</span></pre></td></tr></table></figure><ul>\n<li>设置日志相关</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">logging.level.root</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">debug</span></pre></td></tr></table></figure><ul>\n<li>\n<p>[SpringBoot 内置属性查询](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvYXBwbGljYXRpb24tcHJvcGVydGllcy5odG1sI2FwcGxpY2F0aW9uLXByb3BlcnRpZXM=\">Common Application Properties (spring.io)</span>), 官方文档中参考第一项：Application properties</p>\n</li>\n<li>\n<p>书写 Spring Boot 配置采用关键字 + 提示形式书写，SpringBoot 中只有导入了对应 Starter 后，才后提供对应配置属性提示</p>\n</li>\n</ul>\n<h2 id=\"配置文件分类\"><a class=\"anchor\" href=\"#配置文件分类\">#</a> 配置文件分类</h2>\n<ul>\n<li>\n<p>SpringBoot 提供了多种属性配置方式，分别为 application.properties、application.yaml、application.yml, SpringBoot 默认的配置方式为 application.properties, 但以 properties 文件结构不够清晰简洁，因此常用 yml 配置文件。</p>\n<ul>\n<li>application.properties</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">server.port</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">80</span></pre></td></tr></table></figure><ul>\n<li>application.yml (：后必须留有空格)</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr></table></figure><ul>\n<li>application.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr></table></figure></li>\n<li>\n<p>SpringBoot 允许三种配置文件共存，配置文件加载顺序：.properties &gt; yml &gt; yaml</p>\n</li>\n<li>\n<p>不同配置文件中相同配置按照优先级相互覆盖，不同配置文件中不同配置全部保留</p>\n</li>\n<li>\n<p>自动提示功能消失方案解决（首先确保引入了对应的 starter）-- 指定 SpringBoot 配置文件</p>\n<ul>\n<li>Idea 中打开 Setting-&gt;Pro 金额词条 Structure-&gt;Facets</li>\n<li>选中相应项目 / 工程</li>\n<li>Customize Spring Boot</li>\n<li>选择配置文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"yaml文件\"><a class=\"anchor\" href=\"#yaml文件\">#</a> yaml 文件</h2>\n<ul>\n<li>YAML (YAML Ain't Markup Language) 一种数据序列化格式</li>\n<li>优点：\n<ul>\n<li>容易阅读</li>\n<li>容易与脚本语言交互</li>\n<li>以数据为核心</li>\n<li>重数据轻格式</li>\n</ul>\n</li>\n<li>YAML 文件拓展名\n<ul>\n<li>.yml (主流)</li>\n<li>.yaml</li>\n</ul>\n</li>\n<li>yaml 语法规则\n<ul>\n<li>大小写敏感</li>\n<li>属性层级关系使用多行描述，每行结尾使用冒号结束</li>\n<li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格，不允许使用 tab 键</li>\n<li>属性名与属性值之间使用冒号 + 空格作为分隔</li>\n<li># 表示注释</li>\n<li>核心规则：数据前面要使用冒号与空格隔开</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 字面值表示方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">boolean</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">TRUE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">float</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.14</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">int</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">null</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">string</span><span class=\"token punctuation\">:</span> HelloWorld</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">string2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"HelloWorld\"</span> <span class=\"token comment\"># 字符串可以直接而书写也可以使用引号包裹</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-02-17</span>      <span class=\"token comment\"># 日期必须使用 yyyy-MM-dd 格式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">datatime</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-02-17T15:02:31+08:00</span>    <span class=\"token comment\">#日期和时间之间使用 T 连接，最后使用 + 代表时区</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 数组表示方法：在属性名下方使用 - 作为数据开始符号，每行书写一个数据，减号与数据间使用空格分隔</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">subject</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">-</span> Java</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">-</span> 前端</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">-</span> 大数据</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span>             <span class=\"token comment\"># 对象数组格式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tom</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Jerry</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 对象数组缩略格式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">users2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span>tom <span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"yaml数据读取\"><a class=\"anchor\" href=\"#yaml数据读取\">#</a> yaml 数据读取</h2>\n<ul>\n<li>\n<p>单个数据读取</p>\n<ul>\n<li>\n<p>使用 @Value 配合 SpeEL 读取单个数据</p>\n</li>\n<li>\n<p>如果数据存在多层级，依次书写多层级名称即可</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token function\">classtest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token annotation punctuation\">@value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;lesson&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lessonName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;serve.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>属性中如果存在转义字符，需要使用双引号包裹</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lesson<span class=\"token operator\">:</span> <span class=\"token string\">\"Spring\\boot\\lesson\"</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>封装全部数据到 Environment 对象</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token function\">classtest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    # 使用<span class=\"token class-name\">Autowired</span>自动装配到<span class=\"token class-name\">Environment</span>对象中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Environment</span> env<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lesson\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>自定义对象封装指定数据</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span>  <span class=\"token keyword\">class</span> users<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 @ConfigurationProperties 注解绑定配置信息到封装类中</p>\n</li>\n<li>\n<p>封装类需要定义为 Spring 管理的 Bean, 否则无法进行属性注入</p>\n</li>\n</ul>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-17-springboot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bspringboot/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-17-springboot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bspringboot/",
            "title": "springboot基础篇之快速上手springboot",
            "date_published": "2021-11-26T17:22:09.544Z",
            "content_html": "<h1 id=\"快速上手springboot\"><a class=\"anchor\" href=\"#快速上手springboot\">#</a> 快速上手 Springboot</h1>\n<h2 id=\"springboot简介\"><a class=\"anchor\" href=\"#springboot简介\">#</a> SpringBoot 简介</h2>\n<ul>\n<li>\n<p>SpringBoot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化 Spring 应用的初始搭建以及开发过程 。</p>\n</li>\n<li>\n<p>Spring 程序缺点</p>\n</li>\n</ul>\n<blockquote>\n<p>依赖设置繁琐</p>\n</blockquote>\n<blockquote>\n<p>配置繁琐</p>\n</blockquote>\n<ul>\n<li>SpringBoot 程序优点</li>\n</ul>\n<blockquote>\n<p>起步依赖（简化依赖配置）</p>\n</blockquote>\n<blockquote>\n<p>自动配置（简化常用工程相关配置）</p>\n</blockquote>\n<blockquote>\n<p>辅助功能（内置服务器，……</p>\n</blockquote>\n<ul>\n<li>\n<p>Spring 程序与 SpringBoot 程序对比</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200144.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h2 id=\"创建springboot工程的四种方式\"><a class=\"anchor\" href=\"#创建springboot工程的四种方式\">#</a> 创建 SpringBoot 工程的四种方式</h2>\n<h3 id=\"基于idea创建springboot工程\"><a class=\"anchor\" href=\"#基于idea创建springboot工程\">#</a> 基于 Idea 创建 SpringBoot 工程</h3>\n<ol>\n<li>创建新模块，选择 Spring Initializr，并配置模块相关基础信息</li>\n</ol>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200639.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>选择当前模块需要使用的技术集</li>\n</ol>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200722.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>开发控制器类</li>\n</ol>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119174712.png\" alt=\"\" /></p>\n<ol start=\"4\">\n<li>运行自动生成的 Application 类</li>\n</ol>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119174735.png\" alt=\"\" /></p>\n<p>从图中可以看到项目所运行的服务器为 Tomcat 及服务器运行的端口号为 8080.</p>\n<ol start=\"5\">\n<li>小结</li>\n</ol>\n<ul>\n<li>\n<p>开发 SpringBoot 程序可以根据向导进行联网快速制作（基于 idea 开发 SpringBoot 程序需要确保联网且能够加载到程序框架结构）</p>\n</li>\n<li>\n<p>SpringBoot 程序需要基于 JDK8 进行制作</p>\n</li>\n<li>\n<p>SpringBoot 程序中需要使用何种功能通过勾选选择技术</p>\n</li>\n<li>\n<p>运行 SpringBoot 程序通过运行 Application 程序入口进行</p>\n</li>\n</ul>\n<h3 id=\"于官网创建springboot工程\"><a class=\"anchor\" href=\"#于官网创建springboot工程\">#</a> 于官网创建 SpringBoot 工程</h3>\n<p>基于 SpringBoot 官网创建项目，地址 :<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8=\">https://start.spring.io</span></p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117201433.png\" alt=\"\" /></p>\n<p>所填属性与通过 Idea 创建工程相同</p>\n<h3 id=\"基于阿里云创建springboot工程\"><a class=\"anchor\" href=\"#基于阿里云创建springboot工程\">#</a> 基于阿里云创建 SpringBoot 工程</h3>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117201551.png\" alt=\"\" /></p>\n<p>基于阿里云创建 springboot 项目只需在第三步中取消勾选默认的 start 来源，改为勾选 Custom 用户自定义，并填入阿里云网址<span class=\"exturl\" data-url=\"aHR0cDovL3N0YXJ0LmFsaXl1bi5jb20=\"> http://start.aliyun.com</span> 即可，其它操作与基于 Idea 创建 SpringBoot 工程相同。</p>\n<ul>\n<li>注意事项</li>\n</ul>\n<ol>\n<li>\n<p>阿里云提供的坐标版本较低，如果需要使用高版本，进入工程后手工切换 SpringBoot 版本</p>\n</li>\n<li>\n<p>阿里云提供的工程模板与 Spring 官网提供的工程模板略有不通</p>\n</li>\n</ol>\n<h3 id=\"手工创建maven工程修改为springboot工程\"><a class=\"anchor\" href=\"#手工创建maven工程修改为springboot工程\">#</a> 手工创建 Maven 工程修改为 SpringBoot 工程</h3>\n<ol>\n<li>创建普通 Maven 工程</li>\n<li>继承 spring-boot-starter-parent</li>\n<li>添加依赖 spring-boot-starter-web</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring_01_01_quickStart<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"4\">\n<li>制作引导类 Application</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Spring0101QuickStartApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Spring0101QuickStartApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"隐藏指定文件文件夹\"><a class=\"anchor\" href=\"#隐藏指定文件文件夹\">#</a> 隐藏指定文件 / 文件夹</h2>\n<ol>\n<li>\n<p>Setting → File Types → Ignored Files and Folders</p>\n</li>\n<li>\n<p>输入要隐藏的文件名，支持 * 号通配符</p>\n</li>\n<li>\n<p>回车确认添加</p>\n</li>\n</ol>\n<h2 id=\"入门案例解析\"><a class=\"anchor\" href=\"#入门案例解析\">#</a> 入门案例解析</h2>\n<h3 id=\"parent\"><a class=\"anchor\" href=\"#parent\">#</a> parent</h3>\n<ul>\n<li>开发 SpringBoot 程序要继承 spring-boot-starter-parent</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>parent<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.5</span><span class=\"token number\">.6</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> lookup parent from repository <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>example<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring_01_01_quickStart<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>\n<p>spring-boot-starter-parent 中定义了若干个依赖管理</p>\n</li>\n<li>\n<p>继承 parent 模块可以避免多个依赖使用相同技术时出现依赖版本冲突</p>\n</li>\n<li>\n<p>继承 parent 的形式也可以采用引入依赖的形式实现效果</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117203328.png\" alt=\"\" /></p>\n<h3 id=\"starter\"><a class=\"anchor\" href=\"#starter\">#</a> starter</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><p>starter 中包含了许多依赖</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117203725.png\" alt=\"\" /></p>\n<p>将鼠标放在 starter 上按住 Ctrl + 鼠标左击即可查看详细信息。</p>\n<ol>\n<li>\n<p>starter</p>\n<p>SpringBoot 中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的</p>\n</li>\n<li>\n<p>parent</p>\n<p>所有 SpringBoot 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的 spring-boot-starter-parent 各版本间存在着诸多坐标版本不同</p>\n</li>\n<li>\n<p>实际开发</p>\n<p>使用任意坐标时，仅书写 GAV 中的 G (groupId) 和 A (artifactId)，V (version) 由 SpringBoot 提供，除非 SpringBoot 未提供对应版本 V，如发生坐标错误 (starter 中未包含当前依赖)，再指定 Version（要小心版本冲突)</p>\n</li>\n</ol>\n<h3 id=\"引导类\"><a class=\"anchor\" href=\"#引导类\">#</a> 引导类</h3>\n<ul>\n<li>\n<p>启动方式</p>\n<p>SpringBoot 的引导类是 Boot 工程的执行入口，运行 main 方法就可以启动项目</p>\n<p>SpringBoot 工程运行后初始化 Spring 容器，扫描引导类所在包加载 bean</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Spring0101QuickStartApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ConfigurableApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Spring0101QuickStartApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        bookController bean <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>bookController<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=====>\"</span><span class=\"token operator\">+</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117210124.png\" alt=\"\" /></p>\n<h3 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h3>\n<ol>\n<li>\n<p>内嵌 Tomcat 服务器是 SpringBoot 辅助功能之一</p>\n</li>\n<li>\n<p>内嵌 Tomcat 工作原理是将 Tomcat 服务器作为对象运行，并 将该对象交给 Spring 容器管理</p>\n<p>查看 spring-boot-starter-web 依赖详细信息可以看到其中包括了 Tomcat</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117212854.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>变更内嵌服务器思想是去除现有服务器，添加全新的服务器</p>\n<p>想要变更服务器只需修改 pom.xml 文件中的相关信息即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>            web起步依赖环境中，排除<span class=\"token class-name\">Tomcat</span>起步依赖<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>exclusions<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>exclusion<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>exclusion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>exclusions<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>        添加jetty起步依赖，版本由<span class=\"token class-name\">SpringBoot</span>的starter控制<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>jetty<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><p>重新启动程序后，发现服务器相关信息以变为 jetty</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117213752.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>内置服务器</p>\n<p>tomcat (默认)   apache 出品，粉丝多，应用面广，负载了若干较重的组件</p>\n<p>jetty     \t\t\t 更轻量级，负载性能远不及 tomcat</p>\n<p>undertow  \t  undertow，负载性能勉强跑赢 tomcat</p>\n</li>\n</ol>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-15-Filter&Listener/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-15-Filter&Listener/",
            "title": "JavaWEB之sl&jstl",
            "date_published": "2021-11-26T17:22:09.529Z",
            "content_html": "<h2 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h2>\n<pre><code>1. Filter：过滤器\n2. Listner: 监听器\n</code></pre>\n<h1 id=\"filter-过滤器\"><a class=\"anchor\" href=\"#filter-过滤器\">#</a> Filter: 过滤器</h1>\n<pre><code>1. 概念：\n    * 生活中的过滤器： 净水器，土匪\n    * web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能\n    * 过滤器的作用：\n        * 一般用于完成通用的操作。如：登陆验证、统一编码处理，敏感字符过滤\n\n2. 快速入门\n    1. 步骤：\n        1. 定义一个类，实现接口Filter\n        2. 复写方法\n        3. 设置拦截路径\n            1. web.xml\n            2. 注解\n    2. 代码：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 过滤器块石 == 快速入门</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//@WebFilter (\"/*\")  // 访问所有资源都会执行该过滤器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterDemo1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"过滤器FilterDemo1被执行了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span>servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>3. 过滤器细节：\n    1. web.xml的配置\n</code></pre>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>cn.itcast.web.filter.FilterDemo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token comment\">&lt;!-- 拦截路径 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code>    2. 过滤器执行过程\n        1. 执行过滤器\n        2. 执行放行后的资源\n        3. 回来执行过滤器放行代码下边的代码\n    3. 过滤器的生命周期方法\n        1. init: 在服务器启动后，会创建Filter对象，然后调用init方法，只执行一次。\n        2. doFilter: 每一次请求被拦截资源时会执行。可以执行多次。\n        3. destroy: 在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。\n    4. 过滤器配置详解\n        * 拦截路径设置：\n            * 具体资源路径： /index.jsp  只有访问index.jsp资源时，过滤器才会被执行。\n            * 拦截目录： /user/*  访问user目录下的所有资源都会执行过滤器\n            * 后缀名拦截 *.jsp 访问所有后缀名为jsp的资源时会执行过滤器\n            * 拦截所有资源：/*  访问所有资源时，都会执行过滤器。\n        * 拦截方式配置：资源被访问的方式\n            * 注解配置：\n                * 设置dispatchTypes属性\n                    1. REQUEST：默认值。浏览器直接请求资源\n                    2. FORWARD：转发请求资源\n                    3. INCLUDE: 包含访问资源\n                    4. ERROR：错误跳转资源\n                    5. ASYNC：异步访问资源\n\n            * web.xml\n                * 设置&lt;dispatcher&gt;&lt;/dispatcher&gt;标签即可\n\n    5. 过滤器链（配置多个过滤器）\n        * 执行顺序：如果有两个过滤器：过滤器1和过滤器2\n            1. 过滤器1\n            2. 过滤器2\n            3. 资源执行\n            4. 过滤器2\n            5. 过滤器1\n        * 过滤器先后顺序问题\n            1. 注解配置：按照类名的字符串比较规则比较，较小的限制性\n                * 如AFilter和BFilter,AFilter就先执行\n            2. web.xml配置：&lt;filter-mapping&gt;谁定义在上边谁先执行。\n\n4. 案例：\n    1. 案例1_登陆验证\n        * 需求：\n            1. 访问day_17_case案例的资源。验证其是否登录\n            2. 如果登陆了，则直接放行。\n            3. 如果没有登录，则跳转到登陆页面，提示：“您好，您尚未登陆”。\n\n    2. 案例2_敏感词汇过滤：\n        * 分析：\n            1. 对request对象进行增强。增强获取参数相关方法\n            2. 放行。传递代理对象\n                * 概念:\n                    1. 真实对象：被代理的对象\n                    2. 代理对象：\n                    3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的\n                * 实现方式：\n                    1. 静态代理：有一个类文件 描述代理模式。\n                    2. 动态模式：在内存中形成代理类\n                        * 实现步骤：\n                            1. 代理对象和真实对象实现相同的接口\n                            2. 代理对象 = Proxy.newProxyInstance();\n                            3. 使用代理对象调用方法\n                            4. 增强方法\n                        * 增强方式:\n                            1. 增强参数列表\n                            2. 增强返回值类型\n                            3. 增强方法体执行逻辑\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * 敏感词汇过滤器</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SensitiveWordsFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> resp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1. 创建代理对象，增强 getParameter 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">ServletRequest</span> proxy_req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 增强 getParameter 方法</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 判断是否是 getParameter 方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getParameter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 增强返回值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 获取返回值</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">return</span>  value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 判断方法名是否是 getParameterMap</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">// 判断方法名是否是 getParameterValue</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">//2. 放行</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>proxy_req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 敏感词汇集合</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> config<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">//1. 获取文件真实路径</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">ServletContext</span> servletContext <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">String</span> realPath <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/classes/敏感词汇.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">//2. 读取文件</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">//3. 将文件的每一行数据添加到 list 中</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"listener-监听器\"><a class=\"anchor\" href=\"#listener-监听器\">#</a> Listener: 监听器</h2>\n<pre><code>* 监听器：web的三大组件之一。\n    * 事件监听机制\n        * 事件： 一件事情\n        * 事件源：事件发生的地方\n        * 监听器： 一个对象\n        * 注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码\n* ServletContextListener: 监听ServletContext对象的创建和销毁\n    * 方法：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">contextDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContextEvent</span> sce<span class=\"token punctuation\">)</span> <span class=\"token comment\">//ServletContext 对象被销毁之前会调用该方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">contextInitialized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContextEvent</span> sce<span class=\"token punctuation\">)</span><span class=\"token comment\">//ServletContext 对象创建后会调用该方法</span></pre></td></tr></table></figure><pre><code>    * 步骤：\n        1. 定义一个类，实现ServletContextListener接口\n        2. 复写方法\n        3. 配置\n            1. web.xml\n</code></pre>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>              cn.itcast.web.listener.ContextLoaderListener</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code>            2. 注解\n                * @WebListener\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-Cookie&Session/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-Cookie&Session/",
            "title": "javaweb之Cookie&Session",
            "date_published": "2021-11-26T17:22:09.527Z",
            "content_html": "<h1 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h1>\n<ol>\n<li>会话技术\n<ol>\n<li>Cookie</li>\n<li>Session</li>\n</ol>\n</li>\n<li>JSP: 入门学习</li>\n</ol>\n<h1 id=\"会话技术\"><a class=\"anchor\" href=\"#会话技术\">#</a> 会话技术</h1>\n<ol>\n<li>会话：一次会话中包含多次请求和响应\n<ul>\n<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li>\n</ul>\n</li>\n<li>功能：在一次会话的范围内的多次请求间共享数据</li>\n<li>方式：\n<ol>\n<li>客户端会话技术: Cookie</li>\n<li>服务器端会话技术：Session</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie:</h1>\n<ol>\n<li>\n<p>概念：客户端会话技术，将数据保存到客户端</p>\n</li>\n<li>\n<p>快速入门：</p>\n<ul>\n<li>使用步骤：\n<ol>\n<li>创建 Cookie 对象，绑定数据\n<ul>\n<li>new Cookie(String name,String value)</li>\n</ul>\n</li>\n<li>发送 Cookie 对象，绑定数据\n<ul>\n<li>response.addCookie(Cookie cookie)</li>\n</ul>\n</li>\n<li>获取 Cookie, 拿到数据\n<ul>\n<li>Cookie[] cookies = request.getCookies();</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>实现原理</p>\n<ul>\n<li>基于响应头 set-cookie 和请求头 cookie 实现</li>\n</ul>\n</li>\n<li>\n<p>cookie 的细节</p>\n<ol>\n<li>一次可不可以发送多个 cookie?\n<ul>\n<li>可以</li>\n<li>可以创建多个 COokie 对象，使用 response 调用多次方法发送 cookie 即可</li>\n</ul>\n</li>\n<li>cookie 在 cookie 中保持多长时间？\n<ul>\n<li>默认情况下，当浏览器关闭后，cookie 数据被销毁</li>\n<li>持久化储存</li>\n<li>setMaxAge(int seconds)</li>\n</ul>\n<ol>\n<li>正数：将 Cookie 数据写到硬盘中，持久化储存。并指定 cookie 存活时间，时间到后，cookie 文件自动失效。</li>\n<li>负数，默认值<br />\n 3. 删除 cookie 值</li>\n</ol>\n</li>\n<li>cookie 能不能存中文？\n<ul>\n<li>tomcat 8 之前 cookie 不能直接存中文\n<ul>\n<li>需要将中文数据转码 --- 一般采用 URL 编码（% E3)</li>\n</ul>\n</li>\n<li>在 tomcat 8 之后，cookie 支持中文数据，特殊字符还是不支持，如空格，建议还是使用 URL 编码转储。</li>\n</ul>\n</li>\n<li>cookie 共享问题：\n<ol>\n<li>假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享？</li>\n</ol>\n<ul>\n<li>默认情况下 cookie 不能共享</li>\n<li>setPath (String path): 设置 cookie 的获取范围。默认情况下，设置当前虚拟目录</li>\n<li>如果要共享，则可以将 path 设置为 &quot;/&quot;</li>\n</ul>\n<ol start=\"2\">\n<li>不同的 tomcat 服务器间 cookie 共享问题？\n<ul>\n<li>setDomain (String path): 如果设置一级域名相同，那么多个服务器之间 cookie 可以共享</li>\n<li>setDomain (&quot;.baidu.com&quot;), 那么 tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>5. Cookie的特点和使用\n  1. cookie储存数据在客户端浏览器\n  2. 浏览器对于单个cookie的=大小有限制（4kb)以及对同一个域名下的总cokie数量也有限制（20个）\n  * 作用\n    1. cookie一般用于存储少量的不太敏感的数据\n    2. 在不登录的情况下，完成服务器对客户端的身份识别\n\n6. 案例：记住上一次访问时间\n  1. 需求：\n    1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问\n    2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串。\n  2. 分析：\n    1. 可以采用cokie来完成\n    2. 在服务器中的servlet判断是否有一个明为lastTime的cookie\n      1. 有：不是第一次访问\n        1. 响应数据：1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20\n\t\t\t    2. 写回Cookie：lastTime=2018年6月10日11:50:01\n\t\t    2. 没有：是第一次访问\n\t\t\t    1. 响应数据：您好，欢迎您首次访问\n\t\t\t    2. 写回Cookie：lastTime=2018年6月10日11:50:01\n\n    3. 代码实现：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>cookie</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cookieTest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CookieTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 设置响应的消息体的数据格式及编码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有 cookie 为 lastTime</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//1. 获取所有 cookie</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 遍历 cookie 数组</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>cookies<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> c<span class=\"token operator\">:</span>cookies</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 获取 cookie 的名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//                String value = c.getValue();</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">//4. 判断名称是不是 lastTime</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 有该 cookie，不是第一次访问</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 设置 cookie 的 value</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token comment\">// 获取当前时间，重新设置 cookie，重新发送 cookie</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    c<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token comment\">// 设置 cookie 存活时间</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    c<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置为 1 个月</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重新发送 cookie</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token comment\">// 响应数据</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token comment\">// 获取 cookie 的 value 时间</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>欢迎回来，您上次访问时间为：\"</span><span class=\"token operator\">+</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span> cookies<span class=\"token punctuation\">.</span>length<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>flag<span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 没有，第一次访问</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">,</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 设置 cookie 存活时间</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置为 1 个月</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重新发送 cookie</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>您好，欢迎首次访问&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jsp-入门学习\"><a class=\"anchor\" href=\"#jsp-入门学习\">#</a> JSP: 入门学习</h2>\n<ol>\n<li>概念：<br />\n* Java serve Pages: java 服务器端页面\n<ul>\n<li>了可以理解为：一个特殊的页面，其中既可以指定定义 html 标签，又可以定义 java 代码</li>\n<li>用于简化书写</li>\n</ul>\n</li>\n<li>原理：<br />\n* jsp 本质上就是一个 Servlet</li>\n<li>jsp 的脚本：JSP 定义 java 代码的格式：<br />\n1. &lt;% 代码 %&gt;：定义 java 的代码，在 service 方法中可以定义什么，该脚本中就可以定义什么。<br />\n2. &lt;%! 代码 %&gt; 定义的 java 代码，在 jsp 转化后的 java 类的成员位置。<br />\n3. &lt;%= 代码 %&gt;：定义的 java 代码，会输出到页面上。输出语句可以定义什么，该脚本中就可以定义什么</li>\n<li>JSP 的内置对象：<br />\n* 在 jsp 对象中不需要获取和创建，可以直接使用的对象<br />\n * JSP 中一共有 9 个内置对象<br />\n * 先学 3 个：\n<ul>\n<li>request</li>\n<li>response</li>\n<li>out：字符输出流对象。可以将数据输出到页面上。和 response.getWriter () 类似\n<ul>\n<li>response.getWriter () 和 out.write () 的区别\n<ul>\n<li>在 tomcat 服务器真正给客户端做出响应前，会先找到 response 缓冲区数据，再找 out 缓冲区。</li>\n<li>response.getWriter () 数据输出永远在 out.write () 之前，与代码位置没有关系。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"session-主菜\"><a class=\"anchor\" href=\"#session-主菜\">#</a> Session: 主菜</h2>\n<ol>\n<li>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</li>\n<li>快速入门：<br />\n1. 获取 HttpSession 对象：<br />\nHttpSession session = request.getSession();<br />\n2. 使用 HttpSession 对象：<br />\nObject getAttribute(String name);<br />\nvoid setAttribute(String name,Object value);<br />\nvoid removeAttribute(String name)<br />\n 3. 原理\n<ul>\n<li>Session 的实现是依赖于 Cookie 的。</li>\n</ul>\n</li>\n</ol>\n<pre><code>4. 细节：\n  1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？\n    * 默认情况下，不是\n    * 如果需要相同，则可以创建COokie，键为JESSIONID,设置最大存活时间，让cookie持久化保存。\n      Cookie c = new Cookie(&quot;JESSIONID&quot;,session.getID());\n      c.setMaxAge(60*60);\n      response.addCookie(c);\n  2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？\n    * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作：\n      * session的钝化：\n        * 在服务器正常关闭之前，将session对象系列硬化到硬盘上，\n      * session的活化：\n        * 在服务器启动后，将session文件转化为内存中的session对象即可。\n  3. session什么时候被销毁\n    1. 服务器关闭\n    2. session对象调用invalidate()。\n    3. session默认失效时间30分钟\n      选择性配置修改\n      &lt;session-config&gt;\n        &lt;session-timeout&gt;30&lt;/session-timeout&gt;\n      &lt;/session-config&gt;\n5. session的特点\n  1. session用于存储一次会话的多次请求的数据，存在服务器端\n  2. session可以存储任意数据类型，任意大小的数据\n\n  * session与Cookie的区别：\n    1. session存储数据在服务器端，Cookie在客户端\n    2. session没有数据大小限制。，cookie有\n    3. session数据安全，Cookie相对于不安全\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-sl&jstl/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-sl&jstl/",
            "title": "javaweb之sl&jstl",
            "date_published": "2021-11-26T17:22:09.527Z",
            "content_html": "<h1 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h1>\n<pre><code>1. JSP:\n    1. 指令\n    2. 注释\n    3. 内置对象\n2. MVC开发模式\n3. EL表达式\n4. JSTL标签\n5. 三层架构\n</code></pre>\n<h2 id=\"jsp\"><a class=\"anchor\" href=\"#jsp\">#</a> JSP:</h2>\n<pre><code>1. 指令\n    * 作用：用于配置JSP页面，导入资源文件\n    * 格式：&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2...%&gt;\n    * 分类：\n        1. page：配置JSP页面的\n            * contentType:等同于response.setContentType()\n                1. 设置响应体的mime类型及字符级\n                2. 设置当前JSP页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）\n            * import: 导包\n            * errorPage: 当前页面发生异常后，会自动跳转到指定的错误页面\n            * isErrorPage；标识当前页面是否是错误页面\n                * true:是，可以使用内置对象exception\n                * false: 否。默认值。不可以使用内置对象exception\n        2. include:页面包含的。导入页面的资源文件\n            * &lt;%@include file=&quot;top.jsp&quot;%&gt;\n        3. taglib:导入资源\n          * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;\n              * prefix：前缀，自定义的\n2. 注释\n    1. html注释\n        &lt;!----&gt;只能注释html代码片段\n    2. jsp注释：推荐使用\n    &lt;%----%&gt;可以注释所有\n3. 内置对象\n    * 在jsp页面中不需要创建，直接使用的对象\n    * 一共有9个：\n              变量名                      真实类型\n          * pageContext                  PageContext\n          * request                      HttpServletRequest\n          * session                      HttpSession\n          * application                  ServletContext\n          * page                         OPbject\n          * response                     HttpServletResponse\n          * out                          JspWriter\n          * config                       ServletConfig\n          * exception                    Throwable\n</code></pre>\n<h2 id=\"开发模式\"><a class=\"anchor\" href=\"#开发模式\">#</a> 开发模式</h2>\n<pre><code>1. jsp演变历史\n    1. 早期只有servlet,只能使用response输出标签数据，非常麻烦\n    2. 后来又有JSP,简化了Servlet的开发，如果过度使用了jsp，在jsp中既写大量的java代码，又写html表，造成难于维护，难以分工协作\n    3. 再后来，java的web开发，借鉴MVC开发模式，使得程序的设计更加合理\n2. MVC\n    1. M:Model,模型。JavaBean\n        * 完成具体的业务操作，如：查询数据库，封装对象\n    2. V: View，视图。JSP\n    3. C: Controller,控制器。Servlet\n        * 获取用户的输入\n        * 调用模型\n        * 将数据交给视图展示\n    * 优缺点：\n        1. 优点：\n            1. 耦合性低，方便维护，利于分工协作\n            2. 重用性高\n        2. 缺点\n            1. 使得项目架构变得复杂，对开发人员要求高\n</code></pre>\n<h2 id=\"el表达式\"><a class=\"anchor\" href=\"#el表达式\">#</a> EL 表达式</h2>\n<pre><code>1. 概念：Expression Language  表达式语言\n2. 作用： 替换和简化jsp页面中java语言代码的编写\n3. 语法：$&#123;表达式&#125;\n4. 注意：\n    * jsp默认支持el表达式。如果要忽略el表达式\n        1. 设置jsp中page指令中:isElIgnored = &quot;true&quot; 忽略当前jsp页面中所有的el表达式\n        2. \\$&#123;表达式&#125;： 忽略当前这个el表达式\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-11-Servlet&HTTP&Resuest/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-11-Servlet&HTTP&Resuest/",
            "title": "JavaWEB之Servlet&HTTP&Request",
            "date_published": "2021-11-26T17:22:09.525Z",
            "content_html": "<h1 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h1>\n<h2 id=\"1概念\"><a class=\"anchor\" href=\"#1概念\">#</a> 1. 概念</h2>\n<p>Servlet（Server Applet）是 Java Servlet 的简称，称为小服务程序或服务连接器。</p>\n<p>狭义的 Servlet 是指 Java 语言实现的一个接口，<br />\n广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。</p>\n<h2 id=\"2步骤\"><a class=\"anchor\" href=\"#2步骤\">#</a> 2. 步骤</h2>\n<h2 id=\"3执行原理\"><a class=\"anchor\" href=\"#3执行原理\">#</a> 3. 执行原理</h2>\n<p>当服务器接收到浏览器客户的请求之后，会解析请求的 URL 路径，获取访问的 servlet 的资源路径，找到项目，查找 web.xml 文件，是否有对应的标签体内容，如果有，则找到对应的标签内的全类名，tomcat 会将字节码文件加载进内存，并且创建其对象，调用其方法。</p>\n<h2 id=\"4生命周期\"><a class=\"anchor\" href=\"#4生命周期\">#</a> 4. 生命周期</h2>\n<h3 id=\"被创建\"><a class=\"anchor\" href=\"#被创建\">#</a> 被创建：</h3>\n<p>执行 servlet 的 init () 方法 ， 只执行一次，说明 servlet 在内存中是单例的（多用户同时访问，可能存在线程安全问题，尽量不要在 servlet 中定义成员变量，即使定义了成员变量，也不要对其修改值），默认情况下，第一次被访问时被创建（可配置 servlet 的创建时期：值为负整数，第一次被访问时创建 / 值为 0 或者为正整数，则在服务器启动时创建</p>\n<h3 id=\"提供服务\"><a class=\"anchor\" href=\"#提供服务\">#</a> 提供服务：</h3>\n<p>执行 service（）方法，每次访问 servlet 时，service（）方法都会被调用一次。</p>\n<h3 id=\"被销毁\"><a class=\"anchor\" href=\"#被销毁\">#</a> 被销毁：</h3>\n<p>destory（）方法在 servlet 被销毁之前只执行一次，用于释放资源。服务器关闭时，servlet 被销毁。只有服服务器正常关闭时，才会执行 destory () 方法。</p>\n<h2 id=\"5servlet30注解配置\"><a class=\"anchor\" href=\"#5servlet30注解配置\">#</a> 5.Servlet3.0 注解配置</h2>\n<h3 id=\"什么是servlet30\"><a class=\"anchor\" href=\"#什么是servlet30\">#</a> 什么是 Servlet3.0</h3>\n<p>Servlet3.0 是 Java EE6 规范的一部分，Servlet3.0 提供了注解 (annotation)，使得不再需要在 web.xml 文件中进行 Servlet 的部署描述，简化开发流程。</p>\n<h3 id=\"开发servlet30程序的所需要的环境\"><a class=\"anchor\" href=\"#开发servlet30程序的所需要的环境\">#</a> 开发 Servlet3.0 程序的所需要的环境</h3>\n<p>开发 Servlet3.0 的程序需要一定的环境支持。MyEclipse10 和 Tomcat7 都提供了对 Java EE6 规范的支持。Tomcat 需要 Tomcat7 才支持 Java EE6，Tomcat7 需要使用 JDK1.6 以上的版本。<br />\n详细内容 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGRwLWdhY2wvcC80MjIyOTAyLmh0bWw=\">https://www.cnblogs.com/xdp-gacl/p/4222902.html</span>)</p>\n<h2 id=\"6servlet的体系结构\"><a class=\"anchor\" href=\"#6servlet的体系结构\">#</a> 6.Servlet 的体系结构</h2>\n<p>Servlet -- 接口<br />\n |<br />\nGenericServlet -- 抽象类<br />\n |<br />\nHttpServlet -- 抽象类</p>\n<h3 id=\"genericservlet将servlet接口中其他的方法做了默认空实现只将service方法作为抽象将来定义servlet类时可以继承genericservlet实现service方法即可\"><a class=\"anchor\" href=\"#genericservlet将servlet接口中其他的方法做了默认空实现只将service方法作为抽象将来定义servlet类时可以继承genericservlet实现service方法即可\">#</a> GenericServlet：将 Servlet 接口中其他的方法做了默认空实现，只将 service () 方法作为抽象，将来定义 Servlet 类时，可以继承 GenericServlet，实现 service () 方法即可</h3>\n<h3 id=\"httpservlet对http协议的一种封装简化操作\"><a class=\"anchor\" href=\"#httpservlet对http协议的一种封装简化操作\">#</a> HttpServlet：对 http 协议的一种封装，简化操作</h3>\n<h4 id=\"定义类继承httpservlet\"><a class=\"anchor\" href=\"#定义类继承httpservlet\">#</a> 定义类继承 HttpServlet</h4>\n<h4 id=\"复写dogetdopost方法\"><a class=\"anchor\" href=\"#复写dogetdopost方法\">#</a> 复写 doGet/doPost 方法</h4>\n<h1 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>Hyper Text Transfer Protocol 超文本传输协议</p>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<ul>\n<li>基于 TCP/IP 的高级协议</li>\n<li>默认端口号：80</li>\n<li>基于请求 / 响应模型的：一次请求对应一次响应</li>\n<li>无状态的：每次请求之间相互独立，不能交互数</li>\n</ul>\n<h3 id=\"版本\"><a class=\"anchor\" href=\"#版本\">#</a> 版本</h3>\n<p>1.0 版本：每一次连接都会建立新的连接<br />\n 1.1 版本：复用链接</p>\n<h2 id=\"请求消息数据格式\"><a class=\"anchor\" href=\"#请求消息数据格式\">#</a> 请求消息数据格式</h2>\n<h3 id=\"1请求行\"><a class=\"anchor\" href=\"#1请求行\">#</a> 1. 请求行</h3>\n<p>请求方式  请求 url      请求协议 / 版本<br />\n GET      /login.html  HTTP/1.1</p>\n<h4 id=\"http协议有7种请求方式常用的有2种\"><a class=\"anchor\" href=\"#http协议有7种请求方式常用的有2种\">#</a> HTTP 协议有 7 种请求方式，常用的有 2 种</h4>\n<h5 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> GET:</h5>\n<ul>\n<li>请求参数在请求行中，在 url 后</li>\n<li>请求的 url 长度有限制</li>\n<li>不太安全</li>\n</ul>\n<h5 id=\"post\"><a class=\"anchor\" href=\"#post\">#</a> POST：</h5>\n<ul>\n<li>请求参数在请求体中</li>\n<li>请求的 url 长度没有限制</li>\n<li>相对安全</li>\n</ul>\n<h3 id=\"2请求头-客户端告诉服务器一些信息\"><a class=\"anchor\" href=\"#2请求头-客户端告诉服务器一些信息\">#</a> 2. 请求头：客户端告诉服务器一些信息</h3>\n<p>请求头名称：请求头值</p>\n<h4 id=\"常见的请求头\"><a class=\"anchor\" href=\"#常见的请求头\">#</a> 常见的请求头</h4>\n<ul>\n<li>user-agent: 浏览器告诉服务器，我访问你使用的浏览器版本信息。可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li>\n<li>Referer: ：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9sb2dpbi5odG1s\">http://localhost/login.html</span><br />\n 告诉服务器，我 (当前请求) 从哪里来？</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo3</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\">// 获取请求头数据：user-agent</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token class-name\">String</span> agent <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user-agent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token comment\">// 判断 agent 的浏览器版本</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chrome\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token comment\">// 谷歌</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"谷歌.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Firefox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"火狐来了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用：</h5>\n<h6 id=\"防盗链\"><a class=\"anchor\" href=\"#防盗链\">#</a> 防盗链：</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo4</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\">// 演示获取请求头数据:reference</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token class-name\">String</span> refer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"referer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\">// 防盗链</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>refer<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/day14_servlet_http_request_war_exploded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">//                System.out.println (\"播放电影\");</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放电影\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                  <span class=\"token comment\">// 盗链</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">//                System.out.println (\"想看电影吗\");</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"想看电影吗\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"统计工作\"><a class=\"anchor\" href=\"#统计工作\">#</a> 统计工作：</h6>\n<h3 id=\"3请求空行\"><a class=\"anchor\" href=\"#3请求空行\">#</a> 3. 请求空行</h3>\n<p>空行，就是用于分割 POST 请求头和请求体的</p>\n<h3 id=\"4请求体正文\"><a class=\"anchor\" href=\"#4请求体正文\">#</a> 4. 请求体 (正文)</h3>\n<ul>\n<li>封装 POST 请求消息的请求参数</li>\n<li>字符串格式：</li>\n</ul>\n<pre><code>POST /login.html HTTP/1.1\nHost: localhost\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101\nFirefox/60.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nReferer: http://localhost/login.html\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nusername=zhangsan\n</code></pre>\n<h1 id=\"request\"><a class=\"anchor\" href=\"#request\">#</a> Request</h1>\n<h2 id=\"1request对象和response对象的原理\"><a class=\"anchor\" href=\"#1request对象和response对象的原理\">#</a> 1.request 对象和 response 对象的原理</h2>\n<h3 id=\"1request和response对象是由服务器创建的我们来使用它\"><a class=\"anchor\" href=\"#1request和response对象是由服务器创建的我们来使用它\">#</a> 1.request 和 response 对象是由服务器创建的，我们来使用它。</h3>\n<h3 id=\"2request对象是来获取请求消息response对象是来设置响应信息\"><a class=\"anchor\" href=\"#2request对象是来获取请求消息response对象是来设置响应信息\">#</a> 2.request 对象是来获取请求消息，response 对象是来设置响应信息</h3>\n<h2 id=\"2request对象继承体系结构\"><a class=\"anchor\" href=\"#2request对象继承体系结构\">#</a> 2.request 对象继承体系结构</h2>\n<pre><code>ServletRequest -- 接口\n\t| 继承\nHttpServletRequest -- 接口\n\t| 实现\norg.apache.catalina.connector.RequestFacade 类(tomcat)\n</code></pre>\n<h2 id=\"3request功能\"><a class=\"anchor\" href=\"#3request功能\">#</a> 3.request 功能</h2>\n<h3 id=\"1获取请求消息数据\"><a class=\"anchor\" href=\"#1获取请求消息数据\">#</a> 1 获取请求消息数据</h3>\n<h4 id=\"1获取请求行数据\"><a class=\"anchor\" href=\"#1获取请求行数据\">#</a> 1. 获取请求行数据</h4>\n<h5 id=\"get-day14demo1namezhangsan-http11\"><a class=\"anchor\" href=\"#get-day14demo1namezhangsan-http11\">#</a> GET /day14/demo1?name=zhangsan HTTP/1.1</h5>\n<p>方法：</p>\n<ul>\n<li>\n<p>获取请求方式 ：GET<br />\nString getMethod()</p>\n</li>\n<li>\n<p>获取虚拟目录：/day14</p>\n<p>String getContextPath()</p>\n</li>\n<li>\n<p>获取 Servlet 路径: /demo1<br />\nString getServletPath()</p>\n</li>\n<li>\n<p>获取 get 方式请求参数：name=zhangsan<br />\nString getQueryString()</p>\n</li>\n<li>\n<p>获取请求 URI：/day14/demo1<br />\nString getRequestURI(): /day14/demo1<br />\nStringBuffer getRequestURL() :<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==\">http://localhost/day14/demo1</span><br />\nURL: 统一资源定位符 ： <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==\">http://localhost/day14/demo1</span> 中华人民共和国<br />\n URI：统一资源标识符 : /day14/demo1 共和国</p>\n</li>\n<li>\n<p>获取协议及版本：HTTP/1.1<br />\nString getProtocol()</p>\n</li>\n<li>\n<p>获取客户机的 IP 地址：<br />\nString getRemoteAddr()</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         * GET</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         * /day14_servlet_http_request_war_exploded</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         * /requestDemo1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         * null</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         * /day14_servlet_http_request_war_exploded/requestDemo1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         * HTTP/1.1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         * 0:0:0:0:0:0:0:1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//1. 获取请求方式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//2. 获取虚拟路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> contextPath <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>contextPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//3. 获取 servlet 路径：/demo1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">String</span> servletPath <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getServletPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>servletPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//4. 获取 get 方式请求参数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> queryString <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queryString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//5. 获取请求 URI</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> requestURI <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//6. 获取协议及版本</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> protocol <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getProtocol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//7. 获取客户机的 ip 地址</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">String</span> remoteAddr <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>remoteAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2获取请求头数据\"><a class=\"anchor\" href=\"#2获取请求头数据\">#</a> 2. 获取请求头数据</h4>\n<pre><code>方法：\n* String getHeader(String name):通过请求头的名称获取请求头的值\n</code></pre>\n<p>Enumeration&lt;String&gt; getHeaderNames (): 获取所有的请求头名称</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 演示获取请求头数据:reference</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> refer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"referer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 演示获取请求头数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//1. 获取所有请求头名称</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headerNames <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaderNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>headerNames<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> headerNames<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"------\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3获取请求体数据\"><a class=\"anchor\" href=\"#3获取请求体数据\">#</a> 3. 获取请求体数据:</h4>\n<ul>\n<li>请求体：只有 POST 请求方式才有请求体，在请求体中封装了 POST 请求的请求参数</li>\n<li>步骤：\n<ol>\n<li>获取流对象\n<ul>\n<li>BufferedReader getReader ()：获取字符输入流，只能操作字符数据</li>\n<li>ServletInputStream getInputStream ()：获取字节输入流，可以操作所有类型数据案例：用户登录</li>\n<li>在文件上传知识点后讲解</li>\n</ul>\n</li>\n<li>再从流对象中拿数据</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"其它功能\"><a class=\"anchor\" href=\"#其它功能\">#</a> 其它功能</h2>\n<h3 id=\"1-获取请求参数通用方式不论get还是post请求方式都可以使用下列方法来获取请求参数\"><a class=\"anchor\" href=\"#1-获取请求参数通用方式不论get还是post请求方式都可以使用下列方法来获取请求参数\">#</a> 1. 获取请求参数通用方式：不论 get 还是 post 请求方式都可以使用下列方法来获取请求参数</h3>\n<h4 id=\"1-string-getparameterstring-name根据参数名称获取参数值-usernamezspassword123\"><a class=\"anchor\" href=\"#1-string-getparameterstring-name根据参数名称获取参数值-usernamezspassword123\">#</a> 1. String getParameter (String name): 根据参数名称获取参数值 username=zs&amp;password=123</h4>\n<h4 id=\"2-string-getparametervaluesstring-name根据参数名称获取参数值的数组\"><a class=\"anchor\" href=\"#2-string-getparametervaluesstring-name根据参数名称获取参数值的数组\">#</a> 2. String [] getParameterValues (String name): 根据参数名称获取参数值的数组</h4>\n<p>hobby=xx&amp;hobby=game</p>\n<h4 id=\"3-enumerationstring-getparameternames获取所有请求的参数名称\"><a class=\"anchor\" href=\"#3-enumerationstring-getparameternames获取所有请求的参数名称\">#</a> 3. Enumeration&lt;String&gt; getParameterNames (): 获取所有请求的参数名称</h4>\n<h4 id=\"4-mapstringstring-getparametermap获取所有参数的map集合\"><a class=\"anchor\" href=\"#4-mapstringstring-getparametermap获取所有参数的map集合\">#</a> 4. Map&lt;String,String []&gt; getParameterMap (): 获取所有参数的 map 集合</h4>\n<ul>\n<li>中文乱码问题：</li>\n<li>get 方式：tomcat 8 已经将 get 方式乱码问题解决了</li>\n<li>post 方式：会乱码</li>\n<li>解决：在获取参数前，设置 request 的编码 request.setCharacterEncoding (&quot;utf-8&quot;);</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Enumeration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo6</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 获取参数通用方式：不论是 get 方式还是 Post 方式都可以使用下列方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//post 获取请求参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//post 请求中文乱码问题</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1. 设置流的编码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 根据参数名获取参数值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//        System.out.println(\"post\");</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        System.out.println(username);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 根据参数名获取参数值的数组</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hobbies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterValues</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hobby\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//        for (String hobby:hobbies</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//             ) &#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//            System.out.println(hobby);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> parameterNames <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//        while(parameterNames.hasMoreElements())&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//            String name = parameterNames.nextElement();</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//            System.out.println(name);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//            String value = request.getParameter(name);</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//            System.out.println(value);</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//            System.out.println(\"------------------------------\");</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 获取所有参数 map 集合</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> parameterMap <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySets <span class=\"token operator\">=</span> parameterMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token operator\">:</span>keySets</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>             <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values <span class=\"token operator\">=</span> parameterMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token operator\">:</span>values</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">//get 获取请求参数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">//        String username = request.getParameter(\"username\");</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">//        System.out.println(\"get\");</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">//        System.out.println(username);</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2-请求转发一种在服务器内部的资源跳转方式\"><a class=\"anchor\" href=\"#2-请求转发一种在服务器内部的资源跳转方式\">#</a> 2. 请求转发：一种在服务器内部的资源跳转方式</h3>\n<h4 id=\"1-步骤\"><a class=\"anchor\" href=\"#1-步骤\">#</a> 1. 步骤：</h4>\n<ul>\n<li>通过 request 对象获取请求转发器对象：RequestDispatcher<br />\ngetRequestDispatcher(String path)</li>\n<li>使用 RequestDispatcher 对象来进行转发：forward (ServletRequest request,<br />\nServletResponse response)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"2特点\"><a class=\"anchor\" href=\"#2特点\">#</a> 2. 特点：</h4>\n<ul>\n<li>浏览器地址栏路径不发生变化</li>\n<li>只能转发到当前服务器内部资源中。</li>\n<li>转发是一次请求<br />\n ###3. 共享数据：</li>\n</ul>\n<ul>\n<li>域对象：一个有作用范围的对象，可以在范围内共享数据</li>\n<li>request 域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li>\n</ul>\n<h4 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法：</h4>\n<ul>\n<li>\n<p>void setAttribute (String name,Object obj): 存储数据</p>\n</li>\n<li>\n<p>Object getAttitude (String name): 通过键获取值</p>\n</li>\n<li>\n<p>void removeAttribute (String name): 通过键移除键值对</p>\n</li>\n<li>\n<p>获取 ServletContext：</p>\n<ul>\n<li>ServletContext getServletContext()</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaSE/2021-7-8-java%E6%A0%B8%E5%BF%83%E5%8D%B7%E4%B8%80%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaSE/2021-7-8-java%E6%A0%B8%E5%BF%83%E5%8D%B7%E4%B8%80%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/",
            "title": "java核心卷一第四章对象与类",
            "date_published": "2021-11-26T17:22:09.515Z",
            "content_html": "<p>##4.3<br />\n###4.3.1 Employee 类 （后续未说明都以 Employee 类为例）<br />\n文件名必须与 public 类的名字相匹配。在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类。<br />\n###4.3.2<br />\n 关键字 public 意味着任何类的任何方法都可以调用这些方法（共有四种访问级别，将在后续内容介绍）。<br />\n关键字 private 确保只有 Employ 类自身的方法能够访问这些实例字段，而其它类的方法不能够读写这些字段。</p>\n<p>###4.3.4 从构造器开始</p>\n<ul>\n<li>\n<p>构造器与类同名</p>\n</li>\n<li>\n<p>构造器可以有 0 个、1 个、或多个参数</p>\n</li>\n<li>\n<p>构造器没有返回值</p>\n</li>\n<li>\n<p>构造器总是伴随着 new 操作一起调用<br />\n注意事项：请注意，不要在构造器中，定义与实例字段同名的局部变量。例如，下面的构造器将不会设置 salary。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span><span class=\"token comment\">//ERROR</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">double</span> salary <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ERROR</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个构造器声明了局部变量 name 和 salary。这些变量只能在构造器内部访问。这下变量会遮蔽（shadow）<br />\n同名的实例字段。有些程序员偶尔会不假思索地写出这类代码，这种错误很难检查出来，<br />\n必须注意在所有的方法中都不要使用与实例字段同名的变量。</p>\n</li>\n</ul>\n<p>###4.3.5 用 var 声明局部变量<br />\n在 java10 中，如果可以从变量的初始值推导出他们的类型，那么可以用 var 关键字声明局部变量，而无需指定类型。<br />\n例如，可以不这样声明：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Employee</span> harry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Harry hacker\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">,</span><span class=\"token number\">1989</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>只需要以下代码：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> harry <span class=\"token operator\">=</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Harry hacker\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1989</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>倘若无需了解任何Java API就能下从等好右边明显看出类型，在这种情况下我们都将使用var表示法。\n不过我们不会对数字类型使用var,如int,long或者是double,使你不用当心0、0L和0.0之间的区别。\n对Java API有了更多使用经验之后，你可能会希望更多地使用var关键字。\n</code></pre>\n<p>注意 var 关键字只能用于方法中的局部变量。参数和字段的类型必须声明。</p>\n<p>###3.3.6 使用 null 引用<br />\n如果对 null 值使用了一个方法，会产生一个 NullPointerEcception 异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> birthday <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> birthday<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//NullPointerException</span></pre></td></tr></table></figure><pre><code>这是一个很严重的错误，类似于“索引越界”异常。\n如果你的程序没有捕获异常，程序就会终止。\n对此有两种解决方法。“宽容型”方法是把null参数转化为一个适当的null值：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"unknow\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 java9 中，Objects 类对此提供了一个便利方法：</p>\n",
            "tags": [
                "Java JavaSE"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%BB%84%E4%BB%B6/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%BB%84%E4%BB%B6/",
            "title": "React的组件",
            "date_published": "2021-11-26T17:22:09.510Z",
            "content_html": "<h1 id=\"react的组件\"><a class=\"anchor\" href=\"#react的组件\">#</a> React 的组件</h1>\n<h2 id=\"组件的声明方式\"><a class=\"anchor\" href=\"#组件的声明方式\">#</a> 组件的声明方式</h2>\n<p>在 React 中创建组件的方式有 3 种：</p>\n<ul>\n<li>ES5 写法：React.createClass ()(老版本用法，不建议使用)</li>\n<li>ES6 写法：React.Component;</li>\n<li>无状态的函数式写法，又称为纯组件 SFC</li>\n</ul>\n<h3 id=\"es5写法reactcreateclass\"><a class=\"anchor\" href=\"#es5写法reactcreateclass\">#</a> ES5 写法：React.createClass ()</h3>\n<p>React.createClass () 方法创建一个组件类，它接受一个对象为参数，对象中必须声明一个 render () 方法，render () 方法将返回一个组件实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 定义传入 props 中的各种属性类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    propTypes<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        initialValue<span class=\"token operator\">:</span>React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 组件默认的 props 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    defaultProps<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        initialValue<span class=\"token operator\">:</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 设置 initial state</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            text<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialValue<span class=\"token operator\">||</span><span class=\"token string\">'placeholder'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function-variable function\">handleChange</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            text<span class=\"token operator\">:</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        \t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            \tType something<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">&#125;</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>createClass () 本质上是一个工厂函数，传递给它的是一个・Object。通过 propTypes 对象和 getDefaultProps () 方法来设置 props 类型和获取 props。createClass（）方法会正确绑定 this 到 React 类的实例上。</p>\n<h3 id=\"es6写法reactcomponent\"><a class=\"anchor\" href=\"#es6写法reactcomponent\">#</a> ES6 写法：React.Component</h3>\n<p>React.Component 是以 ES6 的形式来创建组件的这是 React 目前极为推荐的创建有效动态组件的方式。</p>\n<p>实例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Input</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Reqact<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>pprops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 设置 initial state</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t text<span class=\"token operator\">:</span>props<span class=\"token punctuation\">.</span>initialValue <span class=\"token operator\">||</span> <span class=\"token string\">'placeholder'</span>       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token comment\">// ES6 中的函数必须手动绑定</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            text<span class=\"token operator\">:</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        \t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            \tType something<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            \t<span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">&#125;</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>React.Component 创建的组件，函数成员不会自动绑定 this，需要开发者手动绑定，否则 this 无法获取当前组件的实例对象</strong></p>\n<p>其它绑定方法：</p>\n<ul>\n<li>通过箭头函数来绑定 this 示例：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 arrow function 绑定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>在方法中直接用 bind (this) 来绑定</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"无状态组件\"><a class=\"anchor\" href=\"#无状态组件\">#</a> 无状态组件</h3>\n<p>如果一个组件不需要管理 state，只是单纯展示，那么就可以定义成无状态组件。这种方式声明的组件可读性好，大大减少了代码量。无状态函数式组件可以搭配箭头函数来写，更简洁，它没有 React 的生命周期和内部 state。</p>\n<p>无状态函数式组件示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HelloComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span> <span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>HelloComponent name <span class=\"token operator\">=</span> <span class=\"token string\">\"marlon\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>mountNode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>无状态函数式组件在需要生命周期时，可以搭配高阶组件 (HOC) 来实现。无状态组件组为高阶组建的参数，高阶组件内存存放需要的生命周期和状态，其它只负责展示的组件都使用无状态式的组件来写：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Table</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">composedComponent</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">componentDidmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ComponentDidmount'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            \t<span class=\"token operator\">&lt;</span>ComposedComponent <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"组件的主要成员\"><a class=\"anchor\" href=\"#组件的主要成员\">#</a> 组件的主要成员</h2>\n<p>在 react 中，数据流是单方向流动的，从父节点向子节点传递（自上而下）。子组件可以通过属性 props 接收来自父组件的状态，然后在人的人（）方法中渲染到页面。每个组件同时又拥有了属于自己内部的状态 state，当父组件的某个属性发生变化时，React 会将此改变了的状态向下递归遍历组件树，然后触发相应的子组件重新渲染（re-render）。</p>\n<p>如果把组件视为一个函数，那么 props 就是从外部传入的参数，而 state 可以视为函数内部的参数，最后函数返回虚拟 DOM。</p>\n<h3 id=\"状态\"><a class=\"anchor\" href=\"#状态\">#</a> 状态</h3>\n<p>​\t\t每个 React 组件都有自己的状态，相比于 props，state 只存在于组件自身内部，用来影响仕途的展示。可以使用 React 内置的 setState（）方法修改 state, 每当使用 setState () 时，React 会将需要更新的 state 合并后放入状态序列，触发调和过程（Reconciliation）, 而不是立即更新 state, 然后根据新的装阿泰结构重新渲染 UI 界面，最后 React 会根据差异对界面进行最小化进行重新渲染。</p>\n<p>​\t\tReact 通过 this.state 访问状态，调用 this.setState () 方法来修改状态。</p>\n<h3 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h3>\n<p>​\t\tstate 是组件内部的状态，那么组件之间如何通信呢？这就是 props 的职责所在了。通俗来说，props 就是连接各个组件信息互通的桥梁。React 本身是单向数据流，所以在 props 中数据的流向非常直观，并且 props 是不可改变的。props 的值只能从默认属性和父组件中传递过来，如果尝试修改 props，React 将会爆出类型错误的提示。</p>\n<h2 id=\"组件之间的通信\"><a class=\"anchor\" href=\"#组件之间的通信\">#</a> 组件之间的通信</h2>\n<h2 id=\"组件的生命周期\"><a class=\"anchor\" href=\"#组件的生命周期\">#</a> 组件的生命周期</h2>\n",
            "tags": [
                "前端 React"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%89%B9%E5%BE%81/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%89%B9%E5%BE%81/",
            "title": "",
            "date_published": "2021-11-26T17:22:09.508Z",
            "content_html": "<p>React 具有三大突出特点：组件化、虚拟 DOM 和单向数据流。</p>\n<ul>\n<li>\n<p>组件化</p>\n<p>React 书写的一切用户界面都是基于组件的。组件具有良好的封装性，可以重复使用，减少大量重复、多余的代码，并且方便迭代维护。</p>\n<p>简单的组件示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> react<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> render <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Class MyComponent <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        \t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            \tHello<span class=\"token punctuation\">,</span><span class=\"token constant\">I</span> am <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        \t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自定义组件后，在其他需要使用这个组件的地方就可以像使用 HTML 标签一样使用：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> render <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> MyComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./myComponent'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>MyComponent name<span class=\"token operator\">=</span><span class=\"token string\">'Jack'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>             <span class=\"token comment\">//name 是自定义组件的属性</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>虚拟 DOM</p>\n<p>先了解一下什么是 DOM, 什么又是虚拟 DOM。</p>\n</li>\n<li>\n<p>单向数据流</p>\n</li>\n</ul>\n",
            "tags": [
                "前端 React"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/2021-9-15-ES6%E7%89%B9%E6%80%A7/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/2021-9-15-ES6%E7%89%B9%E6%80%A7/",
            "title": "ES6特性",
            "date_published": "2021-11-26T17:22:09.505Z",
            "content_html": "<h1 id=\"es6特性\"><a class=\"anchor\" href=\"#es6特性\">#</a> ES6 特性</h1>\n<h2 id=\"1变量声明let和const\"><a class=\"anchor\" href=\"#1变量声明let和const\">#</a> 1. 变量声明 let 和 const</h2>\n<p>​\t    ES6 之前，通常用 var 关键字来声明变量。无论在何处声明，都会被视为在所在函数作用域最顶部（变量提升）。相比于使用 var 来声明变量，使用 let 和 const 声明变量带来了以下好处：</p>\n<ul>\n<li>\n<p>可以解决 ES5 使用 var 初始化变量会出现的变量提升问题。</p>\n</li>\n<li>\n<p>可以解决使用闭包时出错的问题。</p>\n</li>\n<li>\n<p>ES5 只有全局作用域和函数作用域，没有块级作用域。</p>\n</li>\n<li>\n<p>可以解决实用计数的 for 循环变量时会导致泄露为全局变量的问题。</p>\n<ol>\n<li>let 命令表示被声明的变量值在作用域内生效。比如：</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token comment\">// 报错 ReferenceError</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>b <span class=\"token comment\">// 2</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>对于 let 来说，不存在变量提升</li>\n</ol>\n<p>在一般的代码逻辑中，变量应该是定义后才会使用，但 var 的变量提升却可以先使用再定义。而 let 声明的变量再使用前必须声明后才能使用，不然就报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cosnole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 报错 ReferenceError</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>let 不允许重复声明，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在代码块内，使用 let 声明变量前，该变量都是不可用的（不可访问、不可赋值等）。在语法上。这被称为 “暂时性死区”（Temporal Dead Zone,TDZ）。</p>\n<p><strong>注意：</strong> 暂时性死区就是只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取。只有等到声明的那一行代码出现，才可以获取和使用该变量。例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//TDZ 开始，不可访问，不可赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    temp <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>  <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//TDZ 结束</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出 undefined, 可访问</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    temp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 可赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 1，访问</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 ES5 中，变量提升可能还会导致内层变量覆盖外层变量，比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure></li>\n<li>\n<p>let 还引入了块级作用于的概念，传统 ES5 中不存在块级作用域。假如没有块级作用域，还有可能碰到这种问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">,</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Uncaught ReferenceError: i is not defined</span></pre></td></tr></table></figure></li>\n<li>\n<p>块级作用域可以使内层作用域跟外层同名的变量名，比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>const 用于声明只读的变量，一旦声明就不能改变。和 let 一样，const 存在块级作用域，不存在变量提升，存在暂时性死区和不可重复声明。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-解构赋值\"><a class=\"anchor\" href=\"#2-解构赋值\">#</a> 2. 解构赋值</h2>\n<p>​\t按照一定模式从数组或对象中提取值，对变量进行赋值，叫做解构赋值。（Destructuring）</p>\n<p>​\t<strong>注意：</strong>  解构赋值的对象是数组或对象，作用是赋值</p>\n<ul>\n<li>用于对象的解构赋值示例：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sex<span class=\"token operator\">:</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> cat'</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  Tom,male,3</span></pre></td></tr></table></figure><p>​\t\t传统写法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sex<span class=\"token operator\">:</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> sex <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>对象结构也可以指定默认值：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b  <span class=\"token comment\">// 2</span></pre></td></tr></table></figure><p>解构失败时，变量的值为 undefined：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a   <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><p>数组的解构赋值：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c  <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>x  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>y  <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e  <span class=\"token comment\">// \"hello\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>f  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>g  <span class=\"token comment\">// []</span></pre></td></tr></table></figure><p>如果结构失败将会赋值为 undefined，如果等号右边是不可遍历结构也会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>数组解构赋值同样也允许默认值：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a  <span class=\"token comment\">// [1,2,3]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x  <span class=\"token comment\">// x=\"a\", y=\"hi\"</span></pre></td></tr></table></figure><h2 id=\"3拓展运算符spread\"><a class=\"anchor\" href=\"#3拓展运算符spread\">#</a> 3. 拓展运算符 (spread) ...</h2>\n<p>​\t拓展运算符 (spread) 是三个点（...）。可以将他比作 rest 参数的逆运算，将一个数组转为用逗号分隔开的参数序列。下面来看看它有哪些作用：</p>\n<ol>\n<li>合并数组。</li>\n</ol>\n<p>在 ES5 中要合并两个数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ES6 使用拓展运算符：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//  [1,2,3,4]</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>与解构赋值结合：</li>\n</ol>\n<p>拓展运算符可以和解构赋值相结合用于生成新数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>arr1<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr1   <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr2   <span class=\"token comment\">// [2,3,4]</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>函数调用（替代 apply () 方法）。</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cosnt num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 11</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//ES6</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述代码使用拓展运算符将一个数组变为参数序列。当然，拓展运算符也可以和普通函数参数相结合使用，非常灵活，比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token operator\">+</span>d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cosnt num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>num<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 11</span></pre></td></tr></table></figure><p>拓展运算符中的表达式如下：</p>\n<pre><code class=\"language-avascript\">[...(true?[1,2]:[3]),'a'];          // [1,2,'a']\n</code></pre>\n<h2 id=\"4箭头函数\"><a class=\"anchor\" href=\"#4箭头函数\">#</a> 4. 箭头函数</h2>\n<p>ES6 对与函数的拓展中增加了箭头函数 =&gt;, 用于对函数的定义。</p>\n<p>箭头函数语法很简单，先定义自变量，然后是箭头和函数主体。箭头函数相当于匿名函数并简化了函数定义。</p>\n<p>不引入参数的箭头函数示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 圆括号代表参数部分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>引入参数的箭头函数示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单个参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span><span class=\"token operator\">=></span>value<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 可以不给参数 value 加小括号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 多个参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>花括号内的函数主体部分写法基本等同于传统函数写法。</p>\n<p><strong>注意:</strong> 如果箭头函数内要返回自定义对象，需要用小括号把对象括起来。例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    id<span class=\"token operator\">:</span>id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    title<span class=\"token operator\">:</span><span class=\"token string\">'Awesome React'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        id<span class=\"token operator\">:</span>id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        title<span class=\"token operator\">:</span><span class=\"token string\">'Awesome React'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t箭头函数与传统的 JavaScript 函数主要区别有以下：</p>\n<ul>\n<li>箭头函数内置 this 不可改变；</li>\n<li>箭头函数不能使用 new 关键字来实例化对象</li>\n<li>箭头函数没有 arguments 对象，无法通过 arguments 对象访问传入的参数。</li>\n</ul>\n<p>箭头函数看似匿名函数的简写，但与匿名函数有明显区别，箭头函数内部的 this 是词法作用域，由上下文确定。如果使用了箭头函数，就不能对 this 进行修改，所以用 call () 或 apply () 调用箭头函数时都无法对 this 进行绑定，传入的第一个参数会被忽略。</p>\n<p><strong>注意：</strong> 词法作用域是定义在词法阶段的作用域，它在代码书写的时候就已经确定了。</p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/blog/hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/blog/hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "title": "基于hexo框架部署个人博客",
            "date_published": "2021-11-26T17:22:09.498Z",
            "content_html": "<h1 id=\"基于hexo框架部署个人博客\"><a class=\"anchor\" href=\"#基于hexo框架部署个人博客\">#</a> 基于 hexo 框架部署个人博客</h1>\n<h2 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h2>\n<p>之前我的博客是基于 jekyll 搭建的，但是 jekyll 模板搭建出来的博客的样式我并不是喜欢，所以在前天看到是室友打算用 hexo 搭建博客的时候，发现效果挺好的，所以转而把博客迁移到 hexo 上来。</p>\n<h2 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<h3 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> git</h3>\n<p>因为最终是把生成的页面提交到 github 上的免费私有仓库，所以 git 环境是必不可少的，网上有关 git 安装教程很多，就不一一赘述，查询当前设备的 git 环境，在控制台输入 git -v, 得到 git 版本信息即说明 git 环境已装好。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> --version</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127143705.png\" alt=\"\" /></p>\n<h3 id=\"node\"><a class=\"anchor\" href=\"#node\">#</a> node</h3>\n<p>开发过程中需要安装较多依赖的插件，使用 npm 包管理工具来管理这些插件。具体安装步骤网上查询即可。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127145223.png\" alt=\"\" /></p>\n<h3 id=\"hexo\"><a class=\"anchor\" href=\"#hexo\">#</a> hexo</h3>\n<p>如果电脑已经具备了 git 和 node 环境，安装 hexo 非常简单</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo -g</pre></td></tr></table></figure><p>建议加上 -g 将 hexo 设为全局环境变量</p>\n<p>查看 hexo 版本信息</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127145634.png\" alt=\"\" /></p>\n<p>能得到以上信息就说明安装成功。</p>\n<h2 id=\"开始本地部署\"><a class=\"anchor\" href=\"#开始本地部署\">#</a> 开始本地部署</h2>\n<p>此次博客部署参考了 https://shoka.lostyu.me/。</p>\n<h3 id=\"初始化文件夹\"><a class=\"anchor\" href=\"#初始化文件夹\">#</a> 初始化文件夹</h3>\n<p>选择一个文件夹用来部署你的博客。我的文件夹所在地：</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127150222.png\" alt=\"\" /></p>\n<p>接下来在终端中进入你博客的文件路径，分别输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr></table></figure><p>进行初始化，使其能够运行 hexo 和 git 命令。（接下来所有操作都是在此路径下进行）</p>\n<h3 id=\"下载模板\"><a class=\"anchor\" href=\"#下载模板\">#</a> 下载模板</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cd your-blog</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><h3 id=\"安装依赖插件\"><a class=\"anchor\" href=\"#安装依赖插件\">#</a> 安装依赖插件</h3>\n<h4 id=\"安装yarn\"><a class=\"anchor\" href=\"#安装yarn\">#</a> 安装 yarn</h4>\n<p>直接使用 npm 下载可能存在下载速率过慢的问题，可以使用 yarn 依赖插件。</p>\n<pre><code>npm install yarn\n</code></pre>\n<h4 id=\"安装项目所需依赖\"><a class=\"anchor\" href=\"#安装项目所需依赖\">#</a> 安装项目所需依赖</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># md 文件渲染器，压缩 css/js/html</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-renderer-multi-markdown-it -s </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 给生成的 css 文件们添加浏览器前缀</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-autoprefixer -s</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#站内搜索功能</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-algoliasearch -s</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 文章或站点字数及阅读时间统计\t</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-symbols-count-time -s</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 生成 Feed 文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-feed -s</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 将生成页面提交到远程仓库所需的依赖</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-deployer-git -s</pre></td></tr></table></figure><h3 id=\"基本配置\"><a class=\"anchor\" href=\"#基本配置\">#</a> 基本配置</h3>\n<p>基本配置为 blog 所在路径下的_config.yml 文件，各个配置什么作用注释应该挺清楚的，就不一一解释，如还有不清楚的可以查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">原作者的博客</span>。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Hexo Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: http://hexo.io/docs/configuration.html</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Source: https://github.com/hexojs/hexo/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Hexo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> subtitle</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> 描述123</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> 关键词1<span class=\"token punctuation\">,</span>关键词2 <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> John Doe</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN <span class=\"token comment\"># 这里只可以选 zh-CN、zh-HK、zh-TW、ja、en 这几个格式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Asia/Shanghai'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//yoursite.com</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title/ <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">permalink_defaults</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Directory</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key atrule\">source_dir</span><span class=\"token punctuation\">:</span> source</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key atrule\">public_dir</span><span class=\"token punctuation\">:</span> public</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> tags</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key atrule\">archive_dir</span><span class=\"token punctuation\">:</span> archives</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> categories</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">code_dir</span><span class=\"token punctuation\">:</span> downloads/code</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key atrule\">i18n_dir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>lang</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key atrule\">skip_render</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># Writing</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token key atrule\">new_post_name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title.md <span class=\"token comment\"># File name of new posts</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key atrule\">default_layout</span><span class=\"token punctuation\">:</span> post</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key atrule\">titlecase</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Transform title into titlecase</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">external_link</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Open external links in new tab</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> site <span class=\"token comment\"># Apply to the whole site</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token key atrule\">filename_case</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token key atrule\">render_drafts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token key atrule\">post_asset_folder</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">relative_link</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key atrule\">future</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># Category &amp; Tag</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token key atrule\">default_category</span><span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token key atrule\">计算机科学</span><span class=\"token punctuation\">:</span> computer<span class=\"token punctuation\">-</span>science</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token key atrule\">Java</span><span class=\"token punctuation\">:</span> java</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token key atrule\">二进制杂谈</span><span class=\"token punctuation\">:</span> note</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token key atrule\">零基础学Java语言-浙江大学-翁恺</span><span class=\"token punctuation\">:</span> course<span class=\"token punctuation\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token key atrule\">Theme Shoka Documentation</span><span class=\"token punctuation\">:</span> theme<span class=\"token punctuation\">-</span>shoka<span class=\"token punctuation\">-</span>doc</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token key atrule\">tag_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\"># Date / Time format</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">## Hexo uses Moment.js to parse and display date</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">## You can customize the date format as defined in</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">## http://momentjs.com/docs/#/displaying/format/</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token key atrule\">date_format</span><span class=\"token punctuation\">:</span> YYYY<span class=\"token punctuation\">-</span>MM<span class=\"token punctuation\">-</span>DD</pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token key atrule\">time_format</span><span class=\"token punctuation\">:</span> HH<span class=\"token punctuation\">:</span>mm<span class=\"token punctuation\">:</span>ss</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\"># Pagination</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">## Set per_page to 0 to disable pagination</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token key atrule\">pagination_dir</span><span class=\"token punctuation\">:</span> page</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">## Plugins: http://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">## Themes: http://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">## Docs: http://hexo.io/docs/deployment.html</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'*.min.css'</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\"># algolia:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">#   appId:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token comment\">#   apiKey:</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token comment\">#   adminApiKey:</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token comment\">#   chunkSize: 5000</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token comment\">#   indexName:</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token comment\">#   fields:</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token comment\">#     - title #必须配置</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">#     - path #必须配置</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token comment\">#     - categories #推荐配置</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token comment\">#     - content:strip:truncate,0,4000</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token comment\">#     - gallery</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token comment\">#     - photos</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token comment\">#     - tags</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token key atrule\">atom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token key atrule\">jsonFeed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"feed.json\"</span></pre></td></tr></table></figure><h3 id=\"项目配置\"><a class=\"anchor\" href=\"#项目配置\">#</a> 项目配置</h3>\n<p>项目配置文件为 themea/shoka 文件夹中的_config.yml 文件</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">alternate</span><span class=\"token punctuation\">:</span> Yume Shoka</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Assets</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#//cdn.jsdelivr.net/gh/amehime/shoka@latest/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">open_graph</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">#twitter_id:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">#google_plus:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">#fb_admins:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">#fb_app_id:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> home</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">archives</span><span class=\"token punctuation\">:</span> /archives/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> list<span class=\"token punctuation\">-</span>alt</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">friends</span><span class=\"token punctuation\">:</span> /friends/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> heart</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Social Links</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Usage: `Key: permalink || icon || color`</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Key is the link label showing to end users.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Value before `||` delimiter is the target permalink,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># secend value is the name of Font icon.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">#google: https://plus.google.com/yourname || google</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token key atrule\">twitter</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//twitter.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> twitter <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#00aff0\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token key atrule\">zhihu</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.zhihu.com/people/rurismzk <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> zhihu <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#1e88e5\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token key atrule\">music</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/user/home?id=12886823 || cloud-music || \"#e60026\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token key atrule\">weibo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//weibo.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> weibo <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#ea716e\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token key atrule\">about</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//about.me/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> address<span class=\"token punctuation\">-</span>card <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#3b5998\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">#email: mailto:yourname@mail.com || envelope || \"#55acd5\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">#facebook: https://www.facebook.com/yourname || facebook</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">#youtube: https://youtube.com/yourname || youtube</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">#instagram: https://instagram.com/yourname || instagram</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">#skype: skype:yourname?call|chat || skype</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">#douban: https://www.douban.com/people/yourname/ || douban</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\"># Specify the date when the site was setup. If not defined, current year will be used.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token key atrule\">since</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2010</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># Third Party Plugins &amp; Services Settings</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\"># Comments</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># Valine</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里不要忘了改</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里不要忘了改</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token comment\"># - deea5a8d259d17182a53be1772e4c182</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token punctuation\">-</span> deea5a8d259d17182a53be1772e4c182</pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># bgm</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表1</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2943811283</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2297706586</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表2</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2031842656</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\"># Dependencies: https://github.com/amehime/hexo-renderer-multi-markdown-it</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token key atrule\">pangu</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\"># analytics &amp; SEO Settings</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\"># Disable Baidu transformation on mobile devices.</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token key atrule\">disable_baidu_transformation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token key atrule\">exturl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><h3 id=\"显示文章\"><a class=\"anchor\" href=\"#显示文章\">#</a> 显示文章</h3>\n<p>需展示的文章应为 markdown 文件，放于 yourBlog/source/_post 目录下，如我的博客位于问价夹下 D:\\blog\\myBlog2, 则文章位于 D:\\blog\\myBlog2\\source_posts 问价夹下，其它细节配置参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">界面展示</span></p>\n<h3 id=\"本地启动项目\"><a class=\"anchor\" href=\"#本地启动项目\">#</a> 本地启动项目</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo s</pre></td></tr></table></figure><p>启动项目即可</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS D:<span class=\"token punctuation\">\\</span>blog<span class=\"token punctuation\">\\</span>myBlog<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> hexo s   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>INFO  Validating config</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INFO  Start processing</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Prism<span class=\"token string\">'s Diff Highlight plugin requires the Diff language definition (prism-diff.js).Make sure the language definition is loaded or use Prism'</span>s Autoloader plugin.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INFO  Hexo is running at http://localhost:4000 <span class=\"token builtin class-name\">.</span> Press Ctrl+C to stop.</pre></td></tr></table></figure><p>出现以上信息即为启动成功，前往 http://localhost:4000 即可查看效果。</p>\n<h2 id=\"将博客部署到github上\"><a class=\"anchor\" href=\"#将博客部署到github上\">#</a> 将博客部署到 github 上</h2>\n<p>首先在根目录下配置一下信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'git'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 https://github/yourname/yourname.github.io</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 项目所在的分支</span></pre></td></tr></table></figure><p>依次运行以下的命令</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 清楚本地缓存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 重新生成并提交到远端仓库 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hexo g <span class=\"token punctuation\">-</span>d  <span class=\"token comment\"># 相当于 hexo generate 及 hexo dep</span></pre></td></tr></table></figure><p>如果没有发生错误你就可以在你的 gihub 仓库上看到提交的内容了</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127154035.png\" alt=\"\" /></p>\n<p>在浏览器中查看效果</p>\n<h2 id=\"遇到的坑\"><a class=\"anchor\" href=\"#遇到的坑\">#</a> 遇到的坑</h2>\n<h3 id=\"按照heox官方文档推荐的部署到github上失败\"><a class=\"anchor\" href=\"#按照heox官方文档推荐的部署到github上失败\">#</a> 按照 heox 官方文档推荐的部署到 github 上失败</h3>\n<p>官方推荐<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZ2l0aHViLXBhZ2Vz\">将 Hexo 部署到 GitHub Pages | Hexo</span></p>\n<p>本人惨痛的教训建议不要按照官方步骤来，官方的太麻烦了而且还有给的步骤还有问题，反正我是没弄出来。</p>\n<p>官方的意思是使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL3RyYXZpcy1jaQ==\">Travis CI</span> 能够动态监听代码上传并将生成的页面文件提交到与项目代码文件不同的分支下。</p>\n<p>为了达到与官方类似的效果，我们只需要新建一个仓库用于存放整体项目文件（按照本文章的上述步骤，yourname.github.io 仓库只会存放生成的页面文件，即运行 hexo g 命令后生成的 publi 文件夹之中的内容），并将该项目绑定到新建的仓库即可。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin 你的仓库</pre></td></tr></table></figure><p>以后要刷新博客内容只需运行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo cl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g -d</pre></td></tr></table></figure><p>将整个项目文件保存到 github</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> pull </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h3 id=\"is-not-a-a-recognized-liquid-tag\"><a class=\"anchor\" href=\"#is-not-a-a-recognized-liquid-tag\">#</a> ... is not a  a recognized Liquid tag</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>The tag <span class=\"token variable\"><span class=\"token variable\">`</span>linksfile<span class=\"token variable\">`</span></span> on line <span class=\"token number\">23</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span>source/friends/index.md<span class=\"token variable\">`</span></span> is not a recognized Liquid tag. For <span class=\"token function\">more</span> information, see https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites<span class=\"token comment\">#unknown-tag-error.</span></pre></td></tr></table></figure><p>大概原因是 Jekyll 是一个静态站点生成器，内置 GitHub Pages 支持和简化的构建过程，所以 github 官方建议将 Jekyll 用于 GitHub Pages。因此如果你使用的不是 jekyll 框架，就可能会存在标签无法识别的情况。为了解决这样的问题，我们只需要在配置文件中禁用 jekyll 即可。</p>\n<p>在博客项目根目录下添加空的.nojekyll 文件</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211126221143.png\" alt=\"\" /></p>\n<p>并在_config.yml 文件中加入以下配置即可：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> .nojekyll</pre></td></tr></table></figure><ol>\n<li>第二个问题就是依据 hexo 官方文</li>\n</ol>\n<h3 id=\"hexo-d-时出现spawn-failed\"><a class=\"anchor\" href=\"#hexo-d-时出现spawn-failed\">#</a> hexo d 时出现 spawn failed</h3>\n<p>如果报的是类似认证远端仓库的问题的话，将</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'git'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 https://github/yourname/yourname.github.io</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 项目所在的分支</span></pre></td></tr></table></figure><p>中的 repo 换成 ssh 地址，不要使用 https 地址</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127155137.png\" alt=\"\" /></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'git'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 git@github.com:github/yourname/yourname.github.io</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 项目所在的分支</span></pre></td></tr></table></figure><h3 id=\"hexo本地测试运行重启后页面空白提示-warn-no-layout-indexhtml\"><a class=\"anchor\" href=\"#hexo本地测试运行重启后页面空白提示-warn-no-layout-indexhtml\">#</a> hexo 本地测试运行重启后页面空白，提示 : WARN No layout: index.html?</h3>\n<p>检查 themes 文件夹下的主题名字是否和项目根目录下_config.yml 配置中的 theme 属性一样，如此次使用的主题为 shoka，则项目根目录下_config.yml 文件对应的部分为</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka</pre></td></tr></table></figure><h3 id=\"github上配置域名失效每次提交之后都要重新在github仓库的配置里重新设置域名\"><a class=\"anchor\" href=\"#github上配置域名失效每次提交之后都要重新在github仓库的配置里重新设置域名\">#</a> github 上配置域名失效，每次提交之后都要重新在 github 仓库的配置里重新设置域名‘</h3>\n<p>在项目 source 文件夹下新增 CNAME 文件，在 CNAME 文件里写入你想要绑定的域名即可。</p>\n",
            "tags": [
                "博客"
            ]
        }
    ]
}