{
    "version": "https://jsonfeed.org/version/1",
    "title": "欢迎来到我的个人博客",
    "description": "",
    "home_page_url": "http://zhanglin233.github.io",
    "items": [
        {
            "id": "http://zhanglin233.github.io/2021/12/12/computer-science/algorithm/LeetCode%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%94%E8%AE%B0/",
            "url": "http://zhanglin233.github.io/2021/12/12/computer-science/algorithm/LeetCode%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%94%E8%AE%B0/",
            "title": "LeetCode左程云算法课笔记",
            "date_published": "2021-12-12T05:02:30.234Z",
            "content_html": "<h1 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h1>\n<h2 id=\"异或运算符\"><a class=\"anchor\" href=\"#异或运算符\">#</a> 异或运算符 ^</h2>\n<h3 id=\"运算符性质\"><a class=\"anchor\" href=\"#运算符性质\">#</a> ^ 运算符性质</h3>\n<ul>\n<li>\n<p>^ 可理解为不进位相加</p>\n</li>\n<li>\n<p>0^N == N, N^N == 0</p>\n</li>\n<li>\n<p>异或运算满足交换律和结合律，a^b = b^a, a^b^c = a^(b^c)</p>\n</li>\n<li>\n<p>根据异或相同为 0，不同为 1 不能很好理解交换律和结合律，但是 ^ 理解为不进位相加就很好理解了，某一位上的结果只和 1 的个数有关，和顺序无关</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211212133439.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"使用异或运算符交换两个数\"><a class=\"anchor\" href=\"#使用异或运算符交换两个数\">#</a> 使用异或运算符交换两个数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* arr[i] = a, arr[j] = b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//arr[i] = a ^ b</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//arr[j] = a ^ b ^ b = a</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//arr[i] = a ^ b ^ a = b</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>不用申请额外的空间</li>\n<li><strong>使用前提</strong>：i != j, 即要交换的两数在内存中地址不能一样，否则会将该地址的值抹为 0</li>\n</ul>\n<h3 id=\"提取出最右的1\"><a class=\"anchor\" href=\"#提取出最右的1\">#</a> 提取出最右的 1</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 假设最右侧 1 为第 i 位，首先～num 将 0~i-1 位的所有数都取反，i 位之后的数都置为 0，加 1 后 i 位变为 1，0~i-1 位均为 0，并进位到 i 使 i 位上的数字变为 1，i 位之后的数字仍未原数字的取反，此时再与原数字求与，则除了 i 位上的数字为 1，其它位均为 0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> rightOne <span class=\"token operator\">=</span> num <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"一个数组中有一种数出现了奇数次其它数都出现了偶数次怎么找到这一个数\"><a class=\"anchor\" href=\"#一个数组中有一种数出现了奇数次其它数都出现了偶数次怎么找到这一个数\">#</a> 一个数组中有一种数出现了奇数次，其它数都出现了偶数次，怎么找到这一个数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度 O (N), 空间复杂度 O (1)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printOddTimesNum1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> eor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cur<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        eor <span class=\"token operator\">^=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>eor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"一个数组中有两种数出现了奇数次其他数都出现了偶数次怎么找到这两个数\"><a class=\"anchor\" href=\"#一个数组中有两种数出现了奇数次其他数都出现了偶数次怎么找到这两个数\">#</a> 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到这两个数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度 O (N), 空间复杂度 O (1)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pringOddTimesNum2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> eor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cur<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        eor <span class=\"token operator\">^=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// a!=b</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//eor = a ^ b</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//eor != 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//eor 必然有一个位置上是 1，其中该位置上 a,b 中必有 1 个为 0，一个为 1，假设该位上 a 为 1，b 为 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> rightOne <span class=\"token operator\">=</span> eor <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>eor<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 提取出最右的 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> onlyOne <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//eor' </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 所有的数可以分为 rightOne 位上为 1 和不为 1 的两类，每类中的数除了 a 或 b 外全都出现了偶次</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curNum<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rightOne <span class=\"token operator\">&amp;</span> curNum <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 与数进行与运算，找出所有的该位上为 0 的数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 与所有的该位上为 0 的数异或，最终 onlyOne = a ^ b ^ b = a</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            onlyOne <span class=\"token operator\">^=</span> curNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//if (rightOne &amp; curNum == rightNum)&#123;  // 与数进行与运算，找出所有的该位上为 1 的数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 与所有的该位上为 1 的数异或，最终 onlyOne = a ^ b ^ a = b</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//    onlyOne ^= curNum;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>onlyOne<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>eor <span class=\"token operator\">^</span> onlyNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//eor ^ onlyNum = a ^ b ^ a = b</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"排序算法\"><a class=\"anchor\" href=\"#排序算法\">#</a> 排序算法</h1>\n<h2 id=\"基于比较的排序算法\"><a class=\"anchor\" href=\"#基于比较的排序算法\">#</a> 基于比较的排序算法</h2>\n<h3 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code01_SelectionSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 每次选出最小的数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\tminIndex <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> j <span class=\"token operator\">:</span> minIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code02_BubbleSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 相邻的两个数比较，大的放在右边</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> e<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h3>\n<p>时间复杂度 O (N^2)，额外空间复杂度 O (1)，算法流程按照最差情况来估计时间复杂度</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code3_InsertionSort</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertionSOrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//0~0 有序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//0~i 想有序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//0~i 范围有序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//i 和 j 是一个位置会报错，使用异或操作交换数字必须保证两数地址不同</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h3>\n<p>T(N) = 2T(N/2)+O(N)</p>\n<p>log &lt;sub&gt;a&lt;/sub&gt;b = d, 时间 复杂度为 O (N^d*log (b,a))=O (N)</p>\n<p>空间复杂度为 O (N)</p>\n<h4 id=\"归并排序代码实现\"><a class=\"anchor\" href=\"#归并排序代码实现\">#</a> 归并排序代码实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MergeSort</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">==</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token operator\">-</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> help <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token operator\">-</span><span class=\"token class-name\">L</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> p1 <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> p2 <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">&lt;=</span>mid<span class=\"token operator\">&amp;&amp;</span>p2<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>arr<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>help<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> help<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"小和问题\"><a class=\"anchor\" href=\"#小和问题\">#</a> 小和问题</h4>\n<p>在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组 的小和。求一个数组 的小和。 例子:[1,3,4,2,5] 1 左边比 1 小的数，没有；3 左边比 3 小的数，1; 4 左 边比 4 小的数，1、3; 2 左边比 2 小的数，1; 5 左边比 5 小的数，1、3、4、 2; 所以小和为 1+1+3+1+1+3+4+2=16</p>\n<p><strong>解题思路</strong>：求解某数的右边比有多少个比该数大的数，对该数数值 * 个数求和即为所求结果</p>\n<p><strong>为什么要排序</strong>：排序后计算个数只需下标相减即可求出个数</p>\n<p><strong>大概流程</strong>：左侧数组的小和加上右侧数组的小和再加上合并过程中的数组的小和</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SMallNum</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">smallNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 左侧数组的小和</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token operator\">+</span><span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 右侧数组的小和</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token operator\">+</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 合并过程中的小和</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> help <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> p1 <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> p2 <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 遍历左侧数组和右侧数组</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 当左侧的值小于右侧的值时，右侧下标相减求出个数 * 左侧数的值</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">&lt;=</span>mid<span class=\"token operator\">&amp;&amp;</span>p2<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            res <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>arr<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>p2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>arr<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>help<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> help<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">smallNum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后的数组为:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"小和为：\"</span><span class=\"token operator\">+</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211212211300.png\" alt=\"\" /></p>\n<h4 id=\"数组中的逆序对\"><a class=\"anchor\" href=\"#数组中的逆序对\">#</a> 数组中的逆序对</h4>\n<p><strong>数组中的两个数，若前面的一个数大于后面的一个数，那么这两个数组成一个逆序对。输入一个数组，返回逆序对的个数。</strong></p>\n<p><strong>解题思路</strong>：大题思路与求小和问题差不多，不过要将数组从大到小排列</p>\n<p><strong>为什么要排序</strong>：排序后计算个数只需下标相减即可求出个数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InversionPair</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">inversionPair</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> help <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> p1 <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> p2 <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">&lt;=</span>mid<span class=\"token operator\">&amp;&amp;</span>p2<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 打印所有逆序对</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            res <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>p2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// if(arr[p1]>arr[p2])&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">//     int j = p2</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">//     while(j&lt;r)&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">//         System.out.println(arr[p1]+\" \"+arr[j++]+\" \"+res);</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">//     &#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>arr<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>arr<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            help<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>help<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> help<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">inversionPair</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后的数组为:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"数组中逆序对的个数为：\"</span><span class=\"token operator\">+</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211213110617.png\" alt=\"\" /></p>\n<h3 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h3>\n<h4 id=\"荷兰国旗问题\"><a class=\"anchor\" href=\"#荷兰国旗问题\">#</a> 荷兰国旗问题</h4>\n<h5 id=\"问题一\"><a class=\"anchor\" href=\"#问题一\">#</a> 问题一</h5>\n<p>给定一个数组 arr，和一个数 num，请把小于等于 num 的数放在数 组的左边，大于 num 的 数放在数组的右边。要求额外空间复杂度 O (1)，时间复杂度 O (N)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> less <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 左边界</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">&lt;</span>more<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// L 表示当前数的位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 当前坐标下的值小于等于 num, 则当前的数与左边界下一个坐标的数相交换，左边界右移一个，L++，对比下一个数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>less<span class=\"token punctuation\">,</span><span class=\"token class-name\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 当前坐标下的值大于 num,L++ 查找下一个数，左边界不变</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"问题二\"><a class=\"anchor\" href=\"#问题二\">#</a> 问题二</h5>\n<p>给定一个数组 arr，和一个数 num，请把小于等于 num 的数放在数 组的左边，大于 num 的 数放在数组的右边。要求额外空间复杂度 O (1)，时间复杂度 O (N)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> less <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 左边界</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> more <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 右边界</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">&lt;</span>more<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// L 表示当前数的位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 当前坐标下的值小于 num, 则当前的数与左边界下一个坐标的数相交换，左边界右移一个，L++，对比下一个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>less<span class=\"token punctuation\">,</span><span class=\"token class-name\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 当前坐标下的值小于 num, 则当前的数与右边界前一个坐标的数相交换，右边界左移一个</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">//L 不变，因为右边界前一个坐标的数还未与 num 相比，需比较，因此 L 不变</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>more<span class=\"token punctuation\">,</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 当前坐标下的值等于 num,L++ 查找下一个数，左右边界不变</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 当 L==More 时，More 边界左边全是小于等于 num 的，将 num 与右边界上的数交换则数组排序完成</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 与左边街上的数交换也可</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> more<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>less<span class=\"token punctuation\">,</span>more<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"快速排序代码实现\"><a class=\"anchor\" href=\"#快速排序代码实现\">#</a> 快速排序代码实现</h4>\n<p><strong>不改进的快速排序</strong></p>\n<ol>\n<li>把数组范围中的最后一个数作为划分值，然后把数组通过荷兰国旗问题分成三个部 分： 左侧 &lt;划分值、中间 == 划分值、右侧&gt; 划分值</li>\n<li>对左侧范围和右侧范围，递归执行</li>\n</ol>\n<p><strong>分析</strong></p>\n<ol>\n<li>划分值越靠近两侧，复杂度越高；划分值越靠近中间，复杂度越低</li>\n<li>可以轻而易举的举出最差的例子，所以不改进的快速排序时间复杂度为 O (N^2)</li>\n</ol>\n<p><strong>随机快速排序（改进的快速排序）</strong></p>\n<ol>\n<li>在数组范围中，等概率随机选一个数作为划分值，然后把数组通过荷兰国旗问题分 成三个部分： 左侧 &lt;划分值、中间 == 划分值、右侧&gt; 划分值</li>\n<li>对左侧范围和右侧范围，递归执行</li>\n<li>时间复杂度为 O (N*logN)</li>\n<li>空间复杂度 O (logN)</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickSOrt</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//arr [l……R] 排好序</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 将一个随机下标的数置为 num</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 生成的随即下标应随 R,L 的长度动态改变而且要记得加上 L</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 错误写法 swap (arr, (int) Math.random ()*(arr.length-1),R);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 在数组范围中，等概率随机选一个数作为划分值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token operator\">-</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> less <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 左边界</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> more <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 右边界</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">&lt;</span>more<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// L 表示当前数的位置</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// 当前坐标下的值小于 num, 则当前的数与左边界下一个坐标的数相交换，左边界右移一个，L++，对比下一个数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>less<span class=\"token punctuation\">,</span><span class=\"token class-name\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 当前坐标下的值小于 num, 则当前的数与右边界前一个坐标的数相交换，右边界左移一个</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">//L 不变，因为右边界前一个坐标的数还未与 num 相比，需比较，因此 L 不变</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>more<span class=\"token punctuation\">,</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                 <span class=\"token comment\">// 当前坐标下的值等于 num,L++ 查找下一个数，左右边界不变</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token class-name\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 当 L==More 时，More 边界左边全是小于等于 num 的，将 num 与右边界上的数交换则数组排序完成</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 与左边街上的数交换也可</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> more<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>less<span class=\"token punctuation\">,</span>more<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 不能用异或交换数字，因为 L,R 不能确定不同，最后可能出现值被赋为 0 的情况</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// public static void swap(int[] arr, int L, int R)&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">//     arr[L] = arr[L] ^ arr[R];</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">//     arr[R] = arr[L] ^ arr[R];</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">//     arr[L] = arr[L] ^ arr[R];</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxSize <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\tres<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> testTime <span class=\"token operator\">=</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> testTime<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t<span class=\"token comment\">// int[] arr1 = &#123;1,4,6,8&#125;;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t<span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t<span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\tsucceed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>succeed <span class=\"token operator\">?</span> <span class=\"token string\">\"耶，成功了!\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"不!怎么错了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h3>\n<p>时间复杂度 O (NLogN)</p>\n<p>空间复杂度 O（1）</p>\n<ul>\n<li>\n<p>Heap 是一种数据结构具有以下的特点：<br />\n1）<strong>完全二叉树</strong>；<br />\n2）heap 中存储的值是<strong>偏序</strong>；</p>\n</li>\n<li>\n<p><strong>Min-heap</strong>: 父节点的值小于或等于子节点的值；<br />\n<strong>Max-heap</strong>: 父节点的值大于或等于子节点的值；</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211213195011.png\" alt=\"\" /></p>\n</li>\n</ul>\n<ul>\n<li><strong>堆的存储：</strong></li>\n</ul>\n<p>一般都用数组来表示堆，i 结点的父结点下标就为 (i–1)/2。它的左右子结点下标分别为 2 * i + 1 和 2 * i + 2。如第 0 个结点左右子结点下标分别为 1 和 2。</p>\n<ul>\n<li>优先级队列结构，就是堆结构</li>\n</ul>\n<h4 id=\"向堆中添加新元素以大根堆为例\"><a class=\"anchor\" href=\"#向堆中添加新元素以大根堆为例\">#</a> 向堆中添加新元素（以大根堆为例）</h4>\n<p>向堆中添加新元素首先将其添加至堆的末尾，然后再与其父节点比较，如果大于其父节点，将其与父节点相交换，再与新的父节点比较，直至小于新的父节点或者已为根节点。</p>\n<p>从上到下的方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不断遍历数组，即添加新元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">heapInsert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 确保堆为大堆，某个数现在在 index 位置上，往上继续移动</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapInsert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//index 不再比父大或者 index 到了 0 位置即根节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从下到上的方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"删除的堆第0个数据即根节点\"><a class=\"anchor\" href=\"#删除的堆第0个数据即根节点\">#</a> 删除的堆第 0 个数据，即根节点</h4>\n<p>将根节点的数据与最后一个节点的数据进行交换，并将堆的长度减一，同时将新的根节点不断与他的较大的儿子节点相比较（若有儿子节点的话），若小于儿子节点，则将其与儿子节点交换，交换后再与其较大的儿子节点相比较直至大于所有的儿子节点或者没有儿子节点。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 去除了原有的最大值后使剩下的堆仍为大堆，index 为当前节点的位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heapSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 判断该节点有没有儿子节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> heapSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 将左儿子与右儿子比较，将 index 与大的儿子节点比较</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 判断有没有右儿子节点，没有直接与左儿子节点比较</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> larger <span class=\"token operator\">=</span> right <span class=\"token operator\">&lt;</span> heapSize <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> right <span class=\"token operator\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> largest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>larger<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> index <span class=\"token operator\">:</span> larger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> largest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 将该节点与其较大的儿子节点相比较</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> largest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        index <span class=\"token operator\">=</span> largest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 新的儿子节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"堆排序代码实现\"><a class=\"anchor\" href=\"#堆排序代码实现\">#</a> 堆排序代码实现</h4>\n<p>要实现堆排序，首先将所给数组变成一个大根堆，然后再不断将根节点放到堆的长度的数组末尾（每取出一个最大值，堆的长度减一）就可以了，最终得到的结果为从小到大排列的数组（若为小根堆，则得到的是从大到小排列的数组）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeapSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 将数组变为大根堆</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">heapInsert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> heapSize <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 去除最大值，将其放在数组最末尾</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>heapSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 每次将最大的数存放在数组的最末尾，因此使用大堆最后得到的排序结果为从小到大</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>heapSize <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> heapSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>heapSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 确保堆为大堆，某个数现在在 index 位置上，往上继续移动</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapInsert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//index 不再比父大或者 index 到了 0 位置即根节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 去除了原有的最大值后使剩下的堆仍为大堆，index 为当前节点的位置</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heapSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 首先与左儿子比较</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> heapSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 将左儿子与右儿子比较，将 index 与大的交换</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">int</span> larger <span class=\"token operator\">=</span> right <span class=\"token operator\">&lt;</span> heapSize <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> right <span class=\"token operator\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">int</span> largest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>larger<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> index <span class=\"token operator\">:</span> larger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> largest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> largest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            index <span class=\"token operator\">=</span> largest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxValue<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxValue<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> res<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组为\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">int</span> testTime <span class=\"token operator\">=</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">int</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">boolean</span> succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> testTime<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>succeed <span class=\"token operator\">?</span> <span class=\"token string\">\"耶！成功了\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"不！失败了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token comment\">// int[] arr = &#123;5,3,6,8&#125;;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"堆排序扩展题目\"><a class=\"anchor\" href=\"#堆排序扩展题目\">#</a> 堆排序扩展题目</h4>\n<p>已知一个<strong>几乎有序</strong>的数组，几乎有序是指，如果把数组排好顺序的话，每个元素移动的距离可以不超过 k，并且 k 相对于数组来说比较小。请选择一个合适的 排序算法针对这个数据进行排序。</p>\n<p>** 思路：** 构建一个大小为 k+1 的小根堆，因为数组几乎有序，因此 k+1 大小的堆内的最小值一定是后续所有的数里最小的，因此只需每次都弹出堆的根节点即最小值并加入下一个值。直到所有的数都遍历完。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortArrayDistanceLessK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 优先级队列就是堆结构</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 现成的堆结构，默认为小堆</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> heap <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 将 k+1 个数加入堆中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>index <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        heap<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        heap<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>heap<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"不基于比较的排序\"><a class=\"anchor\" href=\"#不基于比较的排序\">#</a> 不基于比较的排序</h2>\n<h3 id=\"计数排序\"><a class=\"anchor\" href=\"#计数排序\">#</a> 计数排序</h3>\n<p>假设输入的线性表 L 的长度为 n，L=L1,L2,..,Ln；线性表的元素属于有限偏序集 S，|S|=k 且 k=O (n)，S={S1,S2,..Sk}；则计数排序可以描述如下：</p>\n<p>1、扫描整个集合 S，对每一个 Si∈S，找到在线性表 L 中小于等于 Si 的元素的个数 T (Si)；</p>\n<p>2、扫描整个线性表 L，对 L 中的每一个元素 Li，将 Li 放在输出线性表的第 T (Li) 个位置上，并将 T (Li) 减 1。</p>\n<h3 id=\"基数排序radix-sort\"><a class=\"anchor\" href=\"#基数排序radix-sort\">#</a> 基数排序（radix sort）</h3>\n<h4 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路：</h4>\n<p>遍历所有位，并将当前位上的数字按照计数排列，遍历一次后更新一次数组，直到遍历完成</p>\n<h4 id=\"大概流程\"><a class=\"anchor\" href=\"#大概流程\">#</a> 大概流程：</h4>\n<h5 id=\"辅助数组的作用\"><a class=\"anchor\" href=\"#辅助数组的作用\">#</a> 辅助数组的作用</h5>\n<ul>\n<li>\n<p>count 数组，用于统计当前位上各数字有多少个</p>\n<p>count [0], 当前位上等于 0 的数字的个数<br />\n count [1], 当前位上等于 1 的数字的个数</p>\n</li>\n<li>\n<p>bucket 数组</p>\n<p>用于暂存按照当前位上数字大小排好序的数组</p>\n</li>\n</ul>\n<h5 id=\"计算出数组最大数有多少位\"><a class=\"anchor\" href=\"#计算出数组最大数有多少位\">#</a> 计算出数组最大数有多少位</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 求数组中最大的数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            maxValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> bits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        bits<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        maxValue <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> bits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"遍历各位数\"><a class=\"anchor\" href=\"#遍历各位数\">#</a> 遍历各位数</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从低次排到高次，大的放后面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> digit<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"对当前位上的数进行计数排列\"><a class=\"anchor\" href=\"#对当前位上的数进行计数排列\">#</a> 对当前位上的数进行计数排列</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>radix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 获取 arr [j] 第 i 位上的数字 v,count [v]++</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    count<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 获取 digit 位上的数字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digit <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        num <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>更新 count 桶</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统计当前位上小于 i+1 的共有多少个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 若当前位上为 3, 修改后的 count [3] 为 5，则说明当前位上小于 4 的数有 5 个</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 便于后期往 bucket 中存入数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> radix<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    count<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>存入 bucket 中并更新 arr</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 获取 i 位上的数字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 将其放入 bucket 桶中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    bucket<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 存入一个则容量减一</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    count<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211214153736.png\" alt=\"\" /></p>\n<h4 id=\"需要注意的地方\"><a class=\"anchor\" href=\"#需要注意的地方\">#</a> 需要注意的地方</h4>\n<p><strong>将数据存入 bucket 中时一定要记得从右往左读取 arr 中的数据，否则就会出现下面的情况，低位数据从大到小排列</strong></p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211214152821.png\" alt=\"\" /></p>\n<p>因此上图中不应先读 arr [0], 应先读啊 arr [4]</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将数组放入 bucket 桶中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 一定要从右往左读取 arr 的数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 因为存入 bucket 时 i 相同的话是从后往前存的，因此要保证先读取低位较大的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 关键</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取 i 位上的数字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 将其放入 bucket 桶中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    bucket<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 存入一个则容量减一</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    count<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"基数排序完整代码实现\"><a class=\"anchor\" href=\"#基数排序完整代码实现\">#</a> 基数排序完整代码实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RadixSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 计算最大的数的位数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> <span class=\"token function\">maxBits</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> radix <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 用于存放按当前 i 位上的数字排好序的数组</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 从低次排到高次，大的放后面</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> digit<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 辅助桶，用于统计当前位上数字等于 i 有多少个数字</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//count [0], 当前位上等于 0 的数字的个数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">//count [1], 当前位上等于 1 的数字的个数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>radix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 获取 arr [j] 第 i 位上的数字 v,count [v]++</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                count<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 统计当前位上小于 i+1 的共有多少个数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 若当前位上为 3, 修改后的 count [3] 为 5，则说明当前位上小于 4 的数有 5 个</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 便于后期往 bucket 中存入数据</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> radix<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                count<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 将数组放入 bucket 桶中</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 一定要从右往左读取 arr 的数据</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 因为存入 bucket 时 i 相同的话是从后往前存的，因此要保证先读取低位较大的数据</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token comment\">// 获取 i 位上的数字</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">// 将其放入 bucket 桶中</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                bucket<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token comment\">// 存入一个则容量减一</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                count<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 求数组中最大的数</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                maxValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            digit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            maxValue <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">return</span> digit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digit <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            num <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">return</span> arr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>arr2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">int</span> testTime <span class=\"token operator\">=</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">int</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token keyword\">boolean</span> succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> testTime<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>succeed <span class=\"token operator\">?</span> <span class=\"token string\">\"耶，成功了\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"不，失败了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"排序算法总结\"><a class=\"anchor\" href=\"#排序算法总结\">#</a> 排序算法总结</h2>\n<p>同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定 性的；否则就没有。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">排序算法</th>\n<th style=\"text-align:center\">时间复杂度</th>\n<th style=\"text-align:center\">空间复杂度</th>\n<th style=\"text-align:center\">稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">选择</td>\n<td style=\"text-align:center\">O(N^2)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">冒泡</td>\n<td style=\"text-align:center\">O(N^2)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">插入</td>\n<td style=\"text-align:center\">O(N^2)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">归并</td>\n<td style=\"text-align:center\">O(N*logN)</td>\n<td style=\"text-align:center\">O(N)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">快排（随机）</td>\n<td style=\"text-align:center\">O(N*logN)</td>\n<td style=\"text-align:center\">O(N)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">堆排</td>\n<td style=\"text-align:center\">O(N*logN)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n</tbody>\n</table>\n<p>一切桶排序思想下的排序都是稳定的</p>\n<p>目前没有找到时间复杂度 O (N*logN)，额外空间复杂度 O (1)，又稳定的排序</p>\n<h3 id=\"常见的坑\"><a class=\"anchor\" href=\"#常见的坑\">#</a> 常见的坑</h3>\n<ol>\n<li>\n<p>归并排序的额外空间复杂度可以变成 O (1)，但是非常难，不需要掌握，有兴 趣可以搜 “归并排序 内部缓存法”</p>\n</li>\n<li>\n<p>“原地归并排序” 的帖子都是垃圾，会让归并排序的时间复杂度变成 O (N^2)</p>\n</li>\n<li>\n<p>快速排序可以做到稳定性问题，但是非常难，不需要掌握， 可以搜 “01 stable sort”</p>\n</li>\n<li>\n<p>所有的改进都不重要，因为目前没有找到时间复杂度 O (N*logN)，额外空间复 杂度 O (1)，又稳定的排序。</p>\n</li>\n<li>\n<p>有一道题目，是奇数放在数组左边，偶数放在数组右边，还要求原始的相对 次序不变，碰到这个问题，可以怼面试官</p>\n<p>经典快排可以解决 0-1 问题，但是做不到稳定性</p>\n</li>\n</ol>\n<h3 id=\"工程上对排序的改进\"><a class=\"anchor\" href=\"#工程上对排序的改进\">#</a> 工程上对排序的改进</h3>\n<ol>\n<li>充分利用 O (N*logN) 和 O (N^2) 排序各自的优势</li>\n<li>稳定性的考虑</li>\n</ol>\n<h1 id=\"二分法的详解与拓展\"><a class=\"anchor\" href=\"#二分法的详解与拓展\">#</a> 二分法的详解与拓展</h1>\n<p>使用二分法不一定要有序，只要左右两侧求的跟问题有关而且确定能甩掉一半，就能使用二分法</p>\n<h2 id=\"在一个有序数组中找某个数是否存在\"><a class=\"anchor\" href=\"#在一个有序数组中找某个数是否存在\">#</a> 在一个有序数组中，找某个数是否存在</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code04_BSExist</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sortedArr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> sortedArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> sortedArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span> <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tmid <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortedArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> sortedArr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"在一个有序数组中找某个数最左侧的位置\"><a class=\"anchor\" href=\"#在一个有序数组中找某个数最左侧的位置\">#</a> 在一个有序数组中，找 &gt;= 某个数最左侧的位置</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code05_BSNearLeft</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 在 arr 上，找满足 >=value 的最左位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nearestIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span> <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\tindex <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"局部最小值问题所有的数各不相等\"><a class=\"anchor\" href=\"#局部最小值问题所有的数各不相等\">#</a> 局部最小值问题（所有的数各不相等）</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code09_FindOneLessValueIndex</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLessIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 一些特殊情况</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no exist</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tmid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 中点左侧的值比中点的值小，所以只需考虑左边</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\tright <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 中点的值小于左边大于右边</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tleft <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 中点的值比左右两边都小</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 如果 left>=right, 说明 length&lt;=3</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 又因为 arr [0] &lt; arr [1] 和 arr [arr.length - 1] &lt; arr [arr.length - 2] 都不成立，所以 arr [1] 最小</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">getLessIndex</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index: \"</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">\", value: \"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"对数器的概念和使用\"><a class=\"anchor\" href=\"#对数器的概念和使用\">#</a> 对数器的概念和使用</h1>\n<ol>\n<li>\n<p>有一个你想要测的方法 a</p>\n</li>\n<li>\n<p>实现复杂度不好但是容易实现的方法 b</p>\n</li>\n<li>\n<p>实现一个随机样本产生器</p>\n</li>\n<li>\n<p>把方法 a 和方法 b 跑相同的随机样本，看看得到的结果是否一样</p>\n</li>\n<li>\n<p>如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法 a 或者 方法 b</p>\n</li>\n<li>\n<p>当样本数量很多时比对测试依然正确，可以确定方法 a 已经正确</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">class01</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Code01_SelectionSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 要测试的方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\tminIndex <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> j <span class=\"token operator\">:</span> minIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 交换两个数字</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 官方的排序方法</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 生成随机的测试数组</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxSize <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\tres<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> arr2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">// for test</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> testTime <span class=\"token operator\">=</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 测试次数</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 用于测试的数组的大小</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 生成的随机数的大小</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否成功</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> testTime<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 生成随机测试数组</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          </pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用要测试的方法</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 调用已有的方法</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">// 对结果进行比较</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t\tsucceed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>succeed <span class=\"token operator\">?</span> <span class=\"token string\">\"Nice!\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Fucking fucked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomArray</span><span class=\"token punctuation\">(</span>maxSize<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"比较器的使用\"><a class=\"anchor\" href=\"#比较器的使用\">#</a> 比较器的使用</h1>\n<ol>\n<li>比较器的实质就是重载比较运算符</li>\n<li>比较器可以很好的应用在特殊标准的排序上</li>\n<li>比较器可以很好的应用在根据特殊标准排序的结构</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IdAscendingComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 返回负数的时候，第一个参数排前面</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 返回正数的时候，第二个参数排前面</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 返回 0 的时候，谁排前面无所谓</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 按 id 升序排列</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IdDescendingComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o2<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 按 id 降序排列</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AgeAscendingComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AgeDescendingComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> o1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printStudents</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", Id : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\", Age : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComp</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o2 <span class=\"token operator\">-</span> o1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token class-name\">Student</span> student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token class-name\">Student</span> student3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> student1<span class=\"token punctuation\">,</span> student2<span class=\"token punctuation\">,</span> student3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IdAscendingComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token function\">printStudents</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IdDescendingComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">printStudents</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AgeAscendingComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token function\">printStudents</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AgeDescendingComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token function\">printStudents</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> maxHeapBasedAge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AgeDescendingComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\tmaxHeapBasedAge<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\tmaxHeapBasedAge<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\tmaxHeapBasedAge<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>maxHeapBasedAge<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> maxHeapBasedAge<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", Id : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\", Age : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> minHeapBasedId <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IdAscendingComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\tminHeapBasedId<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\tminHeapBasedId<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\tminHeapBasedId<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>minHeapBasedId<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> minHeapBasedId<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", Id : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\", Age : \"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> treeAgeDescending <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AgeDescendingComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\ttreeAgeDescending<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\ttreeAgeDescending<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\ttreeAgeDescending<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token class-name\">Student</span> studentFirst <span class=\"token operator\">=</span> treeAgeDescending<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name : \"</span> <span class=\"token operator\">+</span> studentFirst<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", Id : \"</span> <span class=\"token operator\">+</span> studentFirst<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\", Age : \"</span> <span class=\"token operator\">+</span> studentFirst<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token class-name\">Student</span> studentLast <span class=\"token operator\">=</span> treeAgeDescending<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name : \"</span> <span class=\"token operator\">+</span> studentLast<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", Id : \"</span> <span class=\"token operator\">+</span> studentLast<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\", Age : \"</span> <span class=\"token operator\">+</span> studentLast<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"递归行为时间复杂度估算\"><a class=\"anchor\" href=\"#递归行为时间复杂度估算\">#</a> 递归行为时间复杂度估算</h1>\n<p><strong>master 公式</strong>：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mo>∗</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi mathvariant=\"normal\">/</mi><mi>b</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>d</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(N) = a*T(N/b)+O(N^d)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ol>\n<li>log (b,a) &gt; d ----&gt; 复杂度为 O (N ^log (b,a))</li>\n<li>log (b,a) = d ----&gt; 复杂度为 O (N^d*log (b,a))</li>\n<li>log (b,a) &lt; d ----&gt; 复杂度为 O (N^d)</li>\n</ol>\n<h1 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h1>\n<p><strong>链表的题大部分都是 code 的题，少数考算法</strong></p>\n<h2 id=\"哈希表的简单介绍\"><a class=\"anchor\" href=\"#哈希表的简单介绍\">#</a> 哈希表的简单介绍</h2>\n<ol>\n<li>哈希表在使用层面上可以理解为一种集合结构</li>\n<li>如果只有 key，没有伴随数据 value，可以使用 HashSet 结构 (C++ 中叫 UnOrderedSet)</li>\n<li>如果既有 key，又有伴随数据 value，可以使用 HashMap 结构 (C++ 中叫 UnOrderedMap)</li>\n<li>有无伴随数据，是 HashMap 和 HashSet 唯一的区别，底层的实际结构是一回事</li>\n<li>使用哈希表增 (put)、删 (remove)、改 (put) 和查 (get) 的操作，可以认为<strong>时间复杂度为 O (1)</strong>，但是常数时间比较大</li>\n<li>放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小 （会拷贝一次原数据）</li>\n<li>放入哈希表的东西，如果不是基础类型，内部按引用传递，内存占用是这个东西内存地 址的大小（不拷贝原数据）</li>\n</ol>\n<h2 id=\"有序表的简单介绍\"><a class=\"anchor\" href=\"#有序表的简单介绍\">#</a> 有序表的简单介绍</h2>\n<ol>\n<li>有序表在使用层面上可以理解为一种集合结构</li>\n<li>如果只有 key，没有伴随数据 value，可以使用 TreeSet 结构 (C++ 中叫 OrderedSet)</li>\n<li>如果既有 key，又有伴随数据 value，可以使用 TreeMap 结构 (C++ 中叫 OrderedMap)</li>\n<li>有无伴随数据，是 TreeSet 和 TreeMap 唯一的区别，底层的实际结构是一回事</li>\n<li>有序表和哈希表的区别是，有序表把 key 按照顺序组织起来，而哈希表完全不组织</li>\n<li>红黑树、AVL 树、size-balance-tree 和跳表等都属于有序表结构，只是底层具体实现 不同</li>\n<li>放入有序表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小</li>\n<li>放入有序表的东西，如果不是基础类型，<strong>必须提供比较器</strong>（否则会爆错），内部按引用传递，内存占 用是这个东西内存地址的大小</li>\n<li>不管是什么底层具体实现，只要是有序表，都有以下固定的基本功能和固定的时间复 杂度</li>\n</ol>\n<h2 id=\"有序表法的固定操作\"><a class=\"anchor\" href=\"#有序表法的固定操作\">#</a> 有序表法的固定操作</h2>\n<ol>\n<li>void put (K key, V value)：将一个（key，value）记录加入到表中，或者将 key 的记录 更新成 value。</li>\n<li>V get (K key)：根据给定的 key，查询 value 并返回。</li>\n<li>void remove (K key)：移除 key 的记录。</li>\n<li>boolean containsKey (K key)：询问是否有关于 key 的记录。</li>\n<li>K firstKey ()：返回所有键值的排序结果中，最左（最小）的那个。</li>\n<li>K lastKey ()：返回所有键值的排序结果中，最右（最大）的那个。</li>\n<li>K floorKey (K key)：如果表中存入过 key，返回 key；否则返回所有键值的排序结果中， key 的前一个。</li>\n<li>K ceilingKey (K key)：如果表中存入过 key，返回 key；否则返回所有键值的排序结果中， key 的后一个。</li>\n<li>以上所有操作时间复杂度都是 O (logN)，N 为有序表含有的记录数</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReverseList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> doubleNode<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> doubleNode last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">public</span> doubleNode next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">doubleNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> doubleNode <span class=\"token function\">reverseDoubleList</span><span class=\"token punctuation\">(</span>doubleNode head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        doubleNode pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        doubleNode next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            head<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            head <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Node</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Node</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            head <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List:   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printDoubleList</span><span class=\"token punctuation\">(</span>doubleNode head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doubleList:   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        doubleNode end <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            end <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doubleList:   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">Node</span> head1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        head1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        head1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        head1 <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span>head1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        doubleNode head2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">doubleNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        head2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">doubleNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        head2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> head2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        head2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">doubleNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        head2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> head2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        head2 <span class=\"token operator\">=</span> <span class=\"token function\">reverseDoubleList</span><span class=\"token punctuation\">(</span>head2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token function\">printDoubleList</span><span class=\"token punctuation\">(</span>head2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链表-2\"><a class=\"anchor\" href=\"#链表-2\">#</a> 链表</h2>\n<h3 id=\"面试时链表解题的方法论\"><a class=\"anchor\" href=\"#面试时链表解题的方法论\">#</a> 面试时链表解题的方法论</h3>\n<ol>\n<li>\n<p>对于笔试，不用太在乎空间复杂度，一切为了时间复杂度</p>\n</li>\n<li>\n<p>对于面试，时间复杂度依然放在第一位，但是一定要找到空间最省的方法</p>\n</li>\n</ol>\n<h3 id=\"重要技巧\"><a class=\"anchor\" href=\"#重要技巧\">#</a> 重要技巧：</h3>\n<ol>\n<li>额外数据结构记录（哈希表等）</li>\n<li>快慢指针</li>\n</ol>\n<h3 id=\"反转单向和双向链表\"><a class=\"anchor\" href=\"#反转单向和双向链表\">#</a> 反转单向和双向链表</h3>\n<p>【题目】 分别实现反转单向链表和反转双向链表的函数</p>\n<p>【要求】 如果链表长度为 N，时间复杂度要求为 O (N)，额外空间复杂度要求为 O (1) 题目</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReverseList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> doubleNode<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> doubleNode last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">public</span> doubleNode next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">doubleNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> doubleNode <span class=\"token function\">reverseDoubleList</span><span class=\"token punctuation\">(</span>doubleNode head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        doubleNode pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        doubleNode next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            head<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            head <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Node</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Node</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            head <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List:   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printDoubleList</span><span class=\"token punctuation\">(</span>doubleNode head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doubleList:   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        doubleNode end <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            end <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doubleList:   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">Node</span> head1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        head1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        head1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        head1 <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span>head1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        doubleNode head2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">doubleNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        head2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">doubleNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        head2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> head2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        head2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">doubleNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        head2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> head2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        head2 <span class=\"token operator\">=</span> <span class=\"token function\">reverseDoubleList</span><span class=\"token punctuation\">(</span>head2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token function\">printDoubleList</span><span class=\"token punctuation\">(</span>head2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"判断一个链表是否为回文结构\"><a class=\"anchor\" href=\"#判断一个链表是否为回文结构\">#</a> 判断一个链表是否为回文结构</h3>\n<p>【题目】给定一个单链表的头节点 head，请判断该链表是否为回文结构。</p>\n<p>【例子】1-&gt;2-&gt;1，返回 true； 1-&gt;2-&gt;2-&gt;1，返回 true；15-&gt;6-&gt;15，返回 true； 1-&gt;2-&gt;3，返回 false。</p>\n<p>【例子】如果链表长度为 N，时间复杂度达到 O (N)，额外空间复杂度达到 O (1)</p>\n<p>** 思路：** 使用快慢指针，找出中间节点，快指针走到末尾的时候，将中间之后的节点反向，再从链表两头同时开始走，若值始终相等则为回文结构，记得比较完之后将链表恢复原状</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IsPlaindrome</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//need O (N) 空间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 将所有的数据存入栈中，再 pop 出与链表对比</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">boolean</span> res <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Node</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token operator\">!=</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                res <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//need O (N/2) 空间</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token class-name\">Node</span> right <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token class-name\">Node</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tright <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tright <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\thead <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">//need O (1) 额外空间</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">boolean</span> res <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">Node</span> n1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">Node</span> n2 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 快慢指针，n1 走一步，n2 走两步</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">.</span>next<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>n2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            n1 <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//n1 指向 mid</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            n2 <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//n2 指向 end</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 保留 mid 节点</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token class-name\">Node</span> mid <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        n2 <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 右半部分第一个，无论是奇数长度链表还是偶数长度链表</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//mid.next = null, 后序遍历退出条件</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 将右半部分链表反向，再将两部分链表向中间遍历比较是否相同</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">// 结束后 pre 指向原链表的末尾节点</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token class-name\">Node</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token class-name\">Node</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n2<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            next <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            n2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            pre <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            n2 <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        n2 <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将 n2 指向最末尾节点</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        n1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//n1 指向开头节点</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">//n1 从左往右遍历，n2 从右往左遍历</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n1<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> n2<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> n2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                res <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            n1 <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            n2 <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">// 将原数组恢复原状</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">// 再次将右半部分反向</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">//pre 保留链表最末尾节点</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        n2 <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n2<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            next <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token comment\">// 将左半部分与右半部分连接起来，否则打印的时候只会出现左半</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                mid<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            n2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            pre <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            n2 <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表各节点的值为： \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token class-name\">Node</span> n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token comment\">// n1.next = new Node(1);</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">boolean</span> res <span class=\"token operator\">=</span> <span class=\"token function\">isPalindrome3</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">?</span><span class=\"token string\">\"链表是回文链表\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"链表不是回文链表\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"将单向链表按某值划分成左边小-中间相等-右边大的形式\"><a class=\"anchor\" href=\"#将单向链表按某值划分成左边小-中间相等-右边大的形式\">#</a> 将单向链表按某值划分成左边小、中间相等、右边大的形式</h3>\n<p>【题目】给定一个单链表的头节点 head，节点的值类型是整型，再给定一个整 数 pivot。实现一个调整链表的函数，将链表调整为左部分都是值小于 pivot 的 节点，中间部分都是值等于 pivot 的节点，右部分都是值大于 pivot 的节点。</p>\n<p>** 思路：**SH、ST、EH、ET、BH、BT 分别记录小于区域、等于区域、大于区域的启示和结束位置，再分别将它们相连即可。</p>\n<p>** 边界问题：** 小于区域不存在？等于区域不存在？大于区域不存在</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SmallEqualBigger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 空间复杂度为 O (N)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">listPartition1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 将所有的节点储存到数组中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 按照荷兰国旗问题排序</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Node</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 统计链表长度</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        head <span class=\"token operator\">=</span> <span class=\"token function\">listPartition1</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">listPartition1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> small <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> big <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>big<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">&lt;</span>pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>small<span class=\"token punctuation\">,</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">></span>pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>big<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 不需要增加</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 将数组中的两个元素交换</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">Node</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 空间复杂度为 O (1)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">listPartition2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">Node</span> SH <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token class-name\">Node</span> ST <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token class-name\">Node</span> EH <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token class-name\">Node</span> ET <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token class-name\">Node</span> BH <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token class-name\">Node</span> BT <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token class-name\">Node</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token class-name\">Node</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 重点</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SH <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    SH <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                    ST <span class=\"token operator\">=</span> SH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                    ST<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                    ST <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EH <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                    EH <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    ET <span class=\"token operator\">=</span> EH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    ET<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    ET <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>=</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BH <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                    BH <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    BT <span class=\"token operator\">=</span> BH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    BT<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    BT <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">// 小于区域 和 等于区域合并</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SH <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            ST<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> EH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            ET <span class=\"token operator\">=</span> ET <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> ST <span class=\"token operator\">:</span> ET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ET<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            ET<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> BH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">return</span> SH<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>EH<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">?</span>BH<span class=\"token operator\">:</span>EH<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>SH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后的链表为: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token class-name\">Node</span> n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token comment\">// 记得更新头节点</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        n1 <span class=\"token operator\">=</span> <span class=\"token function\">listPartition1</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/29/computer-science/course_1/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%98%BE%E7%A4%BA%E5%99%A8%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/",
            "url": "http://zhanglin233.github.io/2021/11/29/computer-science/course_1/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%98%BE%E7%A4%BA%E5%99%A8%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/",
            "title": "显示器及其接口技术",
            "date_published": "2021-11-29T11:05:48.118Z",
            "content_html": "<h1 id=\"常用的显示器件\"><a class=\"anchor\" href=\"#常用的显示器件\">#</a> 常用的显示器件</h1>\n<h2 id=\"显示记录仪\"><a class=\"anchor\" href=\"#显示记录仪\">#</a> 显示记录仪</h2>\n<p>是以模拟方式连续显示和记录过程参数的动态变化，但其价格都很贵，在目前的计算机控制系统中已很少采用。</p>\n<h2 id=\"led数码管\"><a class=\"anchor\" href=\"#led数码管\">#</a> LED 数码管</h2>\n<p>具有结构简单、体积小、功耗低、配置灵活、显示清晰、可靠     性高等优点，已被微型计算机控制系统及智能化仪表广泛采用。</p>\n<h3 id=\"led显示器的工作原理\"><a class=\"anchor\" href=\"#led显示器的工作原理\">#</a> LED 显示器的工作原理</h3>\n<p><strong>LED</strong>(<strong>Light Emitting Diode</strong>) 是利用 PN 结把电能 转换成光能的固体发光器件，根据制造材料的不同可以发 出红、黄、绿、白等不同色彩的可见光来。LED 的伏安特性类似普通二极管，正向压降约为 2 伏左右，工作电流 一般在 10 -20 mA。单段的圆形或方形 LED 常用来显示设备的运行状态，8 段 ED 可以显示各种数字和字符。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129150846.png\" alt=\"\" /></p>\n<p>8 段 LED 显示器的结构与工作原理如上图所示，它是由个发光二极管组成，各段依次记为 a,b,c,d,e,f,g,dp, 其中 dp 表示小数点（不带小数点的称为 7 位 LED）。8 段 LED 显示器有共阴极和共阳极两种结构。共阴极 LED 的所有发光管的阴极并接成公共端 COM，而共阳极的所有发光管的阳极并接成公共端 COM。当共阴极 LED 的 COM 端接地，某个发光二极管的阳极加上高电平时，则该管有电流流过而点亮发光；当共阳极 LED 的 COM 端接高电平，某个发光二极管的阴极加上低电平时时，则该管有电流流过而点亮发光；</p>\n<p>CPU 的数据线与 LED 各段引脚相连，控制输出的数据，点亮 8 段 LED 不同段的组合，显示等 0~9、A~F 十六进制数。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129151805.png\" alt=\"\" /></p>\n<p>当引脚 dp~a 与 CPU 数据位 D&lt;sub&gt;7&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 一一对应相连时，共阴极 8 段 LED 显示器的段选码如下图所示</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129153620.png\" alt=\"\" /></p>\n<p>以显示字符 “3” 的段选码为例，“3” 的段选码为 16 进制的 4AH, 也就是二进制的 01001111，所以 CPU 输出的数据位 D&lt;sub&gt;7&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 为 01001111，则显示器的 dp,f,e 端接地，g,d,c,d,a 接高电平，COM 端接地时，显示器就显示出数字 &quot;3&quot;。</p>\n<p>数码管共阳极的段选码恰好与共阴极的段选码相反，如共阳极数码管 “3” 的段选码（10110000）是共阴极数码管 “3” 的段选码（01001111）的反码。</p>\n<p><strong>上图只是基于段引脚 dp~a 与数据位 D&lt;sub&gt;7&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 对应相连，如果连线改变，则段选码也随之改变。</strong></p>\n<h3 id=\"led显示器的显示方式\"><a class=\"anchor\" href=\"#led显示器的显示方式\">#</a> LED 显示器的显示方式</h3>\n<p>在计算机控制系统中，常利用 n 个 LED 显示器构成 n 位显示。通常把点亮 LED 某一段的控制称为段选，而把点亮 LED 某一位的控制称为位选或片选。根据 LED 显示器的段选线、位选线与控制端口的连接方式不同，LED 显示器有静态显示与动态显示两种方式，下面以 4 个共阴极 LED 的组合为例进行说明。</p>\n<h4 id=\"静态显示方式\"><a class=\"anchor\" href=\"#静态显示方式\">#</a> 静态显示方式</h4>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129154903.png\" alt=\"\" /></p>\n<p>4 个 LED 显示器的所有 COM 连在一起并接地（无位选），每个 LED 的段选线 dp~a 都各自与一个 8 位并行 I/O 口相连（段选独立）。</p>\n<p>因此 CPu 通过 I/O 口（具有锁存功能）对某个 LED 输出一次段选码之后，该 LED 就能一直保持显示结果直到下次送入新的段选码为止。</p>\n<p>这种静态显示的效果是每一位独立显示，同一时间内每一位都能稳定地显示各自不同的字符。其缺点是电路中占用 I/O 口资源多，如 4 个 LED 显示器需要有 4 个 8 位并行口芯片，线路复杂，硬件成本高；又因为同时显示，功耗大；优点是占用 CPU 时间少，显示稳定可靠。适用于大规模的实时控制系统。</p>\n<h4 id=\"动态显示方式\"><a class=\"anchor\" href=\"#动态显示方式\">#</a> 动态显示方式</h4>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129163955.png\" alt=\"\" /></p>\n<p>4 个 LED 显示器各自的各段选线对应并接在一起，由一个 8 位 I/O 口（1）进行统一段选控制，而各自的 COM 端则由另外一个 I/O 口进行位选控制（共阴极 LED 送低电平，共阳极 LED 送高电平）。因此，要显示不同的字符，只能由 CPu 通过两个 I/O 口依次轮流输出段选码和位选码，循环扫描 LED, 使其显示分时。缺点是电路中占用 I/O 口资源多；优点是占用 CPU 机时少，显示稳定可靠 。</p>\n<h3 id=\"led显示器的接口电路\"><a class=\"anchor\" href=\"#led显示器的接口电路\">#</a> LED 显示器的接口电路</h3>\n<h4 id=\"静态显示接口电路\"><a class=\"anchor\" href=\"#静态显示接口电路\">#</a> 静态显示接口电路</h4>\n<h4 id=\"动态显示接口电路\"><a class=\"anchor\" href=\"#动态显示接口电路\">#</a> 动态显示接口电路</h4>\n<h2 id=\"lcd\"><a class=\"anchor\" href=\"#lcd\">#</a> LCD</h2>\n<p>以其功耗极低的特点，占据了从电子表到计算器，从袖珍仪表到便携式微型计算机等应用场合。</p>\n<h2 id=\"crt终端\"><a class=\"anchor\" href=\"#crt终端\">#</a> CRT 终端</h2>\n<p>CRT 终端以其图文并茂的直观生动画面，可以显示生产过程中的各种画面及报表，如生产流程图、显示报警图、趋势曲线图、     路查询图等，在很多微型计算机控制系统中，特别在 DDC，SCC 以及 DCS 控制系统中，大都采用 CRT 操作台进行监视和控制。</p>\n",
            "tags": [
                "智能控制"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/28/computer-science/course_1/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E9%94%AE%E7%9B%98%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/",
            "url": "http://zhanglin233.github.io/2021/11/28/computer-science/course_1/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E9%94%AE%E7%9B%98%E5%8F%8A%E5%85%B6%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/",
            "title": "键盘及其接口技术",
            "date_published": "2021-11-27T18:24:07.211Z",
            "content_html": "<h1 id=\"键盘输入电路\"><a class=\"anchor\" href=\"#键盘输入电路\">#</a> 键盘输入电路</h1>\n<p>计算机控制系统中的键盘通常采用触点式按键，触点式按键是利用机械触点的闭合或断开来输入信息</p>\n<h2 id=\"键盘的抖动干扰\"><a class=\"anchor\" href=\"#键盘的抖动干扰\">#</a> 键盘的抖动干扰</h2>\n<p>由于机械触点的弹性振动，按键在按下时不会马上稳定地接通，在谈起时也不能一下子完全断开，因而在按键闭合和断开的瞬间均会出现一连串的抖动，这种抖动称为按键的抖动干扰，其产生的波形如图所示<br />\n<img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128020838.png\" alt=\"\" /></p>\n<p>当按键按下时会产生前沿抖动，当按键弹起时会产生后沿抖动。这是所有机械触点式按键在状态输出时的共性问题，抖动的时间长短取决于按键的机械特性与操作状态，一般为 10 ms~100 ms, 这是键处理设计时要考虑的一个重要参数。</p>\n<h2 id=\"抖动干扰的消除\"><a class=\"anchor\" href=\"#抖动干扰的消除\">#</a> 抖动干扰的消除</h2>\n<p>按键的抖动会造成按一次产生的开关状态被 CPU 误读几次。为了使 CPU 能正确地读取按键状态，必须在按键闭合或断开时，消除产生的前沿或后沿抖动，去抖动的方法有硬件方法与软件方法。</p>\n<h3 id=\"硬件方法\"><a class=\"anchor\" href=\"#硬件方法\">#</a> 硬件方法</h3>\n<p>​\t硬件方法是设计一个滤波延时电路或单稳态电路等硬件电路来避开按键的抖动时间。滤波延时消抖电路如图所示</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128021627.png\" alt=\"\" /></p>\n<p>设置在按键 s 与 CPU 数据线 Di 之间。按键 S 未按下时，电容两端电压为 0，即非门输入 Vi 为 0，输出 V0 为 1。当 S 按下时，由于 C 两端电压不能突变，充电电压 Vi 在充电时间内未达到非门的开启电压，输出 V0 将不会改变，直到充电电压 Vi 大于门的开启电压，其输出 Vi 才变为 0，这段充电延迟时间取决于 R1、R2 和 C 值得大小，电路设计时只需要使之大于等于 100 ms 即可避开按键抖动的影响。同理，按键 S 断开时，即使出现抖动，由于 C 的放电延迟过程，也会消除按键抖动的影响。</p>\n<p>下图中 V1 是未施加滤波电路含有前沿抖动、后沿抖动的波形，V2 是施加滤波电路后消除抖动的波形。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128022924.png\" alt=\"\" /></p>\n<h3 id=\"软件方法\"><a class=\"anchor\" href=\"#软件方法\">#</a> 软件方法</h3>\n<p>​\t软件方法是指编制一段时间大于 100 ms 的延时程序，在第一次检测到有键按下时，执行这段延时子程序使键的前沿抖动消失后再检测该键状态，如果该键仍保持闭合状态电平，则确认为该键已经按下，否则无键按下，从而消除了抖动的影响。同理，在检测到按键释放后，页同样要延迟一段时间，以消除后沿抖动，然后转入对该按键的处理。</p>\n<h1 id=\"非编码矩阵式键盘\"><a class=\"anchor\" href=\"#非编码矩阵式键盘\">#</a> 非编码矩阵式键盘</h1>\n<p>​\t当按键数量较多时，为了少占用 CPU 的 I/O 口线，通常将键排列成矩阵式结构。矩阵式结构也是非编码键盘中的一种形式。</p>\n<h2 id=\"矩阵式键盘的结构构成\"><a class=\"anchor\" href=\"#矩阵式键盘的结构构成\">#</a> 矩阵式键盘的结构构成</h2>\n<p>​\t矩阵式键盘又叫行列式键盘，是用 I/O 口线组成的行、列矩阵结构，在每根行线与列线的交叉处，二线不直接相通而是通过一个按键跨接接通。采用这种矩阵结构只需要 M 根行输出线和 N 根列输入线，就可连接 MxN 个按键，再通过键盘处理程序便可识别键值。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128024347.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128024421.png\" alt=\"\" /></p>\n<p>​\t在键盘中无任何键按下时，所有的行线和列线被断开且相互独立，输入线 Y 0~Y 7 列都为高电平，当有一键按下时，则该键所在的行线与列线接通，因此，该列线的电平取决于该键所在的行线。基于此，产生了 “行扫描法” 与 “线反转法” 两种识别方法.</p>\n<p>​\t行扫描法又称逐行零扫描法，即逐行输出行扫描信号 “0”，使各行依次为低电平，然后分别读入列数据检测，检查此（低电平）行中是否有键按下。如果读得某列线为低电平，则表示此（低电平）行线与此列线的交叉处有键按下，再对该键进行编码计算出键值，然后转入该建的功能子程序入口地址；如果没有任何一根列线为低电平，则说明此（低电平）行没有键按下。接着进行下一行的 “0” 行扫描与列读入，直到 8 行全部查完，若无键按下则返回。</p>\n<p>​\t有时为了快速判断键盘中是否有键按下，也可先将全部行线同时置为低电平，然后检测列线的电平状态，若所有列线均为高电平，则说明键盘中无键按下，立即返回；若要有一列的电平为低，则表示键盘中有键按下，然后再如上那样逐行扫描。</p>\n<h2 id=\"矩阵式键盘的程序设计\"><a class=\"anchor\" href=\"#矩阵式键盘的程序设计\">#</a> 矩阵式键盘的程序设计</h2>\n<p>​\t在计算机控制系统中，键盘扫描只是 CPU 工作的一部分。因此在设计键盘扫描程序时，必须保证键盘操作的实时性，又不能占用 CPU 太多的时间，还要充分考虑到抖动干扰的消除，一般可根据情况选用编程扫描、定时扫描或中断扫描中的一种方式。</p>\n<h3 id=\"扫描程序的编写\"><a class=\"anchor\" href=\"#扫描程序的编写\">#</a> 扫描程序的编写</h3>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128212635.png\" alt=\"\" /></p>\n<pre><code class=\"language-basH\">key:  # 行值寄存器CL和列值寄存器DL清零\n      MOV AL, 0\n      MOV CL, AL\n      MOV DL, AL\n      # 使所有行线为低电平\n      MOV AL, 0FFH\n      OUT PORT1, AL\n      # 读列均值\n      IN AL, PORTQ\n      # 检查是否有键按下\n      CMP AL, 0FFH\n      # 无键按下转返回\n      JZ DONE\n      # 有键按下调延时100 ms子程序\n      CALL DELAY\n      # 重复上述扫描\n      MOV AL, 0FFH\n      OUT PORT1, AL\n      IN AL, 0FFH\n      CMP AL, 0FFH\n      # 无键按下转返回\n      JZ DONE\n      # 行数08送AH\n      MOV AH, 08\n      # 行扫描初值（即X0线）送BL\n      MOV BL, 01H\n      \nkey1: # 输出使某行为低电平\n\t  MOV AL, BL\n\t  OUT PORT1, AL  \n\t  # 读入列值\n\t  IN AL, PORT1   \n\t  # 判断此行是否有键按下\n\t  CMP AL, 0FFH\n\t  # 有键按下转KEY2\n\t  JNZ KEY2\n\t  # 无键按下，行值寄存器加08\n\t  MOV AL, CL\n\t  ADD AL, 08H\n\t  DAA\n\t  MOV CL, AL\n\t  # 求下一行为低电平的输出代码\n\t  RCL\tBL, 1\n\t  DEC AH\n\t  JNZ KEY1\n\t\t\nDONE: IRET\nKEY2: INC DL\n\t  RCR AL, 1\n\t  JC KEY2\n\t  MOV AL, CL\n\t  ADD AL, DL\n\t  DAA\n\t  MOV [BUFF], AL\n\t  JMP KEYADR\n\t  END KEY\n</code></pre>\n<h1 id=\"编码键盘\"><a class=\"anchor\" href=\"#编码键盘\">#</a> 编码键盘</h1>\n<p>​\t上面所述的非编码都是通过软件方法来实现键盘扫描、键值处理和消除抖动干扰的。</p>\n<p>​\t显然，这将占用较多的 CPU 时间。在一个较大的控制系统中，不允许 CPU 主要用来执行键盘程序，这将严重影响系统的实时控制。下面以二进制编码键盘为例，介绍一种用硬件方法来识别和解决抖动干扰的键盘编码器及编码键盘接口电路。</p>\n<h2 id=\"二进制编码\"><a class=\"anchor\" href=\"#二进制编码\">#</a> 二进制编码</h2>\n<p>​\t具有优先级的二进制 8 位编码器 CD4532B 的真值表如下图所示</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211128235658.png\" alt=\"\" /></p>\n<p>​\t表示芯片优先级的输入允许端 E&lt;sub&gt;i&lt;/sub &gt; 为 0 时，无论编码器的信号输入 I&lt;sub&gt;7&lt;/sub&gt;~I&lt;sub&gt;0&lt;/sub &gt; 为何状态，编码器输出全为 0，芯片处于屏蔽状态，同时 E&lt;sub&gt;0&lt;/sub &gt; 为 0，也屏蔽下一级芯片；当输入允许端 E&lt;sub&gt;i&lt;/sub &gt; 为 1 时，且编码器的 I&lt;sub&gt;7&lt;/sub&gt;~I&lt;sub&gt;0&lt;/sub &gt; 全为 0 时，编译输出也为 0，但输出允许端 E&lt;sub&gt;0&lt;/sub &gt; 为，表明此编码器输入端无键按下，却允许优先级低的相邻编码器处于编码状态。这两种情形下的工作状态端 GS 均为 “0”。</p>\n<p>​\t该芯片的 8 个输入端中，I&lt;sub&gt;0&lt;/sub &gt; 的优先级最高，I&lt;sub&gt;7&lt;/sub &gt; 优先级最低。当有多个按键按下时，优先级高的被选中，同时自动屏蔽优先级低的各输入端和下一级芯片（使 E0 端为 0）。比如处于正常编码状态即 Ei 为 1，当 I&lt;sub&gt;0&lt;/sub &gt; 端为 1 时，其余各输入端无论为 1 或 0，编码输出端均为二进制 000，同时 GS 端为 1，E&lt;sub&gt;0&lt;/sub &gt; 端为 0，而当 I&lt;sub&gt;0&lt;/sub &gt; 端为 0，I&lt;sub&gt;1&lt;/sub &gt; 端为 1 时，编码输出则为二进制 001；以此类推・・・・・・，输入端的键值号与二进制编码输出一一对应。</p>\n<h2 id=\"编码键盘接口电路\"><a class=\"anchor\" href=\"#编码键盘接口电路\">#</a> 编码键盘接口电路</h2>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129000949.png\" alt=\"\" /></p>\n<p>​\t如图是一种采用两片 CD4532B 构成的 16 个按键的二进制编码接口电路。其中，由于 U&lt;sub&gt;1&lt;/sub &gt; 的 E&lt;sub&gt;0&lt;/sub &gt; 作为 U2 的 Ui, 所以按键 S0 的优先级最高，S&lt;sub&gt;15&lt;/sub &gt; 的优先级最低。U&lt;sub&gt;1&lt;/sub &gt; 和 U&lt;sub&gt;2&lt;/sub &gt; 的输出 O&lt;sub&gt;2&lt;/sub&gt;~O&lt;sub&gt;0&lt;/sub &gt; 经或门 A&lt;sub&gt;3&lt;/sub&gt;~A&lt;sub&gt;1&lt;/sub &gt; 输出，已形成低 3 位编码 D&lt;sub&gt;2&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub&gt;。而最高位 D&lt;sub&gt;3&lt;/sub &gt; 则有 U&lt;sub&gt;2&lt;/sub &gt; 的 GS 产生。当按键 S&lt;sub&gt;8&lt;/sub&gt;~S&lt;sub&gt;3&lt;/sub &gt; 中有一个闭合时，其输出为 1。从而 S&lt;sub&gt;0&lt;/sub&gt;~S&lt;sub&gt;15&lt;/sub &gt; 任意一个键被按下，由编码位 D&lt;sub&gt;3&lt;/sub&gt;~D&lt;sub&gt;0&lt;/sub &gt; 均可消除相应的 4 位二进制码。</p>\n<p>​\t为了消除按键按下时产生的抖动干扰，该接口电路还设置了由与非门 B&lt;sub&gt;1&lt;/sub&gt;、B&lt;sub&gt;2&lt;/sub&gt;、电阻 R&lt;sub&gt;1&lt;/sub&gt;、R&lt;sub&gt;2&lt;/sub&gt;、电容 C&lt;sub&gt;2&lt;/sub &gt; 组成的单稳电路和由或门 A&lt;sub&gt;4&lt;/sub&gt;、电阻 R&lt;sub&gt;1&lt;/sub&gt;、电容 C&lt;sub&gt;1&lt;/sub &gt; 组成的延时电路，电路中 E、F、G 、H 和 I 这五点的波形如图所示。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211129003055.png\" alt=\"\" /></p>\n",
            "tags": [
                "智能控制"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-18-pixiv2/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-18-pixiv2/",
            "title": "爬取p站(pixiv)的图片（二）",
            "date_published": "2021-11-26T17:22:09.574Z",
            "content_html": "<h3 id=\"成功爬取pixiv上的图片\"><a class=\"anchor\" href=\"#成功爬取pixiv上的图片\">#</a> 成功爬取 pixiv 上的图片</h3>\n<p>在经过了三天的奋战之后，我终于成功的爬取到了 pixiv 上的图片，看着文件夹里的众多好看的图片的感觉真不错，以后再也不缺壁纸和头像了（hiahiahia）。接下来言归正传，分享一下我是如何爬取到这些图片的。</p>\n<h3 id=\"爬取pixiv上的图片的具体步骤\"><a class=\"anchor\" href=\"#爬取pixiv上的图片的具体步骤\">#</a> 爬取 pixiv 上的图片的具体步骤</h3>\n<h4 id=\"获取不同照片的id\"><a class=\"anchor\" href=\"#获取不同照片的id\">#</a> 获取不同照片的 id</h4>\n<p>我在我的<span class=\"exturl\" data-url=\"aHR0cDovL3poYW5nbGluLnNwYWNlLzIwMjAvMTEvamVreWxsLw==\">爬取 pixiv 的第一篇博客</span>中描述了我的初次尝试的爬取思路，虽然思路并没有问题，但是最终因为网站反扒的原因，我并没有成功的将图片爬取下来，本来我是打算等我再看点如何反 “反爬” 的教程之后再动手，但是昨天晚上回去的时候我随机点了几张图片观察它们的详细信息时，才发现他的域名是通过改变图片的 id 值来链接不同的照片，大体都是相同的 (我还是太年轻了，经验不够), 如 https://pixivic.com/illusts/64952228?VNK=f1808200, 其中的 '64952228' 就是图片的 id 值，当我们将它换成其他照片的 id 值就可以访问其他的照片，而我昨天通过访问'<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waXguaXB2NC5ob3N0L2lsbHVzdHJhdGlvbnM/aWxsdXN0VHlwZT1pbGx1c3QmYW1wO3NlYXJjaFR5cGU9b3JpZ2luYWwmYW1wO21heFNhbml0eUxldmVsPTQmYW1wO3BhZ2U9NSZhbXA7a2V5d29yZD0lRTYlQTElOUMlRTMlODElQUUlRTglOEElQjEmYW1wO3BhZ2VTaXplPTMw\">https://pix.ipv4.host/illustrations?illustType=illust&amp;searchType=original&amp;maxSanityLevel=4&amp;page=5&amp;keyword = 桜の花 &amp; pageSize=30</span>' 信息得到了一大串网址，虽然我们不能通过这些网址直接访问到相应的图片，但是我们可以发现这些网址之中也包含了相应的图片的 id 信息，所以如果我们能够将其中的 id 信息提取出来，并套到上面的那个网址中，这样我们就能通过代码批量的访问这些图片的地址并进而进行后面的操作。  (如图所示，只要输入类似图中的网址，我们就可以访问到不同的图片)<br />\n![](/images/20-11-18_pixiv5.png)</p>\n<p>我们将得到的一大串不能直接访问的网址保存到本地，得到如图所示的结果<br />\n！[](/images/20-11-18_pixiv1.png) 要提取・其中的 id 信息最好用的当然是用正则表达式了。<br />\n![](/images/20-11-18_pixiv2.png)(其中 i 为当前访问的是第几页的内容，后面讲)，这样我们就的到了所有图片的 id 信息，这个时候我们只需要将 id 信息填写到基本 url 中就可以组成能够直接访问到图片的链接。<br />\n![](/images/20-11-18_pixiv3.png)(其中 idtag 为 id + 页数，所以提取的时候只需要取前 8 位就行 (id 观察后能发现都是 8 位))，这个时候就完成了我们的第一步。</p>\n<h4 id=\"尝试访问图片链接\"><a class=\"anchor\" href=\"#尝试访问图片链接\">#</a> 尝试访问图片链接</h4>\n<p>正常来说我们获得了可以通过点击便访问到的链接，接下来就是通过代码访问这些链接、获取他们的 html 信息、并提取到其中能够直接下载的图片的链接，</p>\n<p>![](/images/20-11-18_pixiv6.png)</p>\n<p>你是不是也是这么想的呢，如果是的话，恭喜你也错了 (hhh), 我们运行一下这部分代码，便会发现它报错了，然后我用 selenium 模仿搜索了一下，便发现无论输入的是什么网址，打开的都是这个网站的首页，所以我们为了访问到图片的地址，应该伪装成我们是登陆状态，但是我在 xhr 翻啊翻，只找到了一个'set-cookie' 信息，并没有找到 cookie 信息，而且当我将 set-cookie 信息加入到 headers 之中后，还是无法访问到图片 (就离谱)，这个时候我实在是没办法了，只能先用 selenium 登录进这个网站之后再进行后续的操作，操作流程为找到登录按钮的标签 -&gt; 点击登录按钮 -&gt; 填写账号、密码和验证码，之后在访问图片的链接。接下来的事情就更离谱了 (我是真不知道一个非赢利的图片网站为什么在反爬上下这么大功夫)，我们用 selenium 打开 pixiv 首页，</p>\n<p>![](/images/20-11-18_pixiv11.png)</p>\n<p>直接打开的界面为：<br />\n![](/images/20-11-19_pixiv5.png)</p>\n<p>如果这时我们直接用代码寻找登录按钮时找不到的。<br />\n我们必须手动叉掉广告和二维码后，代码才能找到登录按钮，而且几秒钟之内不点掉的话，你就叉不掉了 (????, 我是懵逼了)。<br />\n找到之后，我们就将开始输入的账号和密码自动填入，至于验证码自动识别，我还不是很熟，暂且偷下懒，反正输验证码也不要多久。<br />\n![](/images/20-11-18_pixiv7.png)</p>\n<h4 id=\"下载图片\"><a class=\"anchor\" href=\"#下载图片\">#</a> 下载图片</h4>\n<p>成功登陆之后，那事情就简单了，获取网页的 html 信息并提取出图片可下载的地址：</p>\n<p>![](/images/20-11-18_pixiv9.png)</p>\n<p>保存图片到本地：</p>\n<p>![](/images/20-11-18_pixiv10.png)</p>\n<p>接下来打开文件夹就可以找到照片了</p>\n<hr />\n<h3 id=\"20-11-19的补充代码的部分细节改进\"><a class=\"anchor\" href=\"#20-11-19的补充代码的部分细节改进\">#</a> 20-11-19 的补充（代码的部分细节改进）</h3>\n<h4 id=\"页数的选取\"><a class=\"anchor\" href=\"#页数的选取\">#</a> 页数的选取</h4>\n<p>![](/images/20-11-19_pixiv3.png)<br />\n 可以选取下载的初始与终止页，不用每次从第一页下载，但是这种我感觉还是不太好，我是打算在本地再建立一个新文件，自动记录下载过的主题、页数和 id，以后再弄。</p>\n<h4 id=\"id的提取与挑选\"><a class=\"anchor\" href=\"#id的提取与挑选\">#</a> id 的提取与挑选</h4>\n<p>原来选取出来的 id 值既包括了作品的 id 值，还包括了部分作者的 id，这次改进之后只剩下了作品的 id。但是这样还是存在另一个问题：</p>\n<p>![](/images/20-11-19_pixiv1.png)</p>\n<p>我们可以考到这样提取出来的有些是重复的，如果我们每一个 id 的图片都要检查一下是否已经存在了就会浪费很多时间，所以我就又改进了一下，在组成网址前去掉重复值，最终代码为：</p>\n<p>![](/images/20-11-19_pixiv4.png)</p>\n<h4 id=\"关键字判断\"><a class=\"anchor\" href=\"#关键字判断\">#</a> 关键字判断</h4>\n<p>当输入的关键字找不到相关图片时，提醒用户换个关键字查找并中断程序</p>\n<p>![](/images/20-11-19_pixiv2.png)</p>\n<h3 id=\"完结撒花\"><a class=\"anchor\" href=\"#完结撒花\">#</a> 完结撒花</h3>\n<p>花了四天的时间终于将这个爬虫程序及博客写好了  (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3poYW5nbGluMjMzL2NvZGUvYmxvYi9tYXN0ZXIvLnZzY29kZS9weXRob24vJUU3JTg4JUFDJUU1JThGJTk2cGl4aXYlRTUlOUIlQkUlRTclODklODcvJUU3JTg4JUFDJUU1JThGJTk2JUU1JTlCJUJFJUU3JTg5JTg3LnB5\">代码地址</span>)<br />\n，真是痛并快乐着，这几天既学到了一些新知识，又复习了一些快忘掉的知识，收获还是很大滴，不枉我这几天没日没夜的改代码、敲博客弄得人都不好了，坐太久了现在脖子都稍微有点痛，这一两天就先休息一下想想下个任务写什么。</p>\n",
            "tags": [
                "Python 爬虫"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-17-pixiv1/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/python/spider/2020-11-17-pixiv1/",
            "title": "爬取p站(pixiv)的图片（一）",
            "date_published": "2021-11-26T17:22:09.572Z",
            "content_html": "<p>pixiv(<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGl4aXYubmV0Lw==\">地址 1</span>，翻不了墙的可以通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waXhpdmljLmNvbS8=\">地址 2</span> 访问) 上面有很多非常好看的图片，我也经常在上面寻找一些好看的图片，但自己一个一个下载又太慢了，然后刚好自己学的爬虫忘的差不多了，所以就想写个爬虫自动爬取 pixiv 上的图片，顺带复习一下以前学的知识。</p>\n<h3 id=\"一些图片这谁扛得住呀太好看了\"><a class=\"anchor\" href=\"#一些图片这谁扛得住呀太好看了\">#</a> 一些图片 (这谁扛得住呀，太好看了)</h3>\n<p>![](/images/3.jpg)<br />\n![](/images/2.jpg)<br />\n![](/images/4.jpg)</p>\n<h3 id=\"第一次尝试失败\"><a class=\"anchor\" href=\"#第一次尝试失败\">#</a> 第一次尝试失败</h3>\n<p>因为我的梯子是白嫖的，直接从原网站下载的话可能速度会过慢，所以我选择从国内地址上下载。<br />\n打开网站先输入自己喜欢的类型，我找的是樱花类型。打开了网页之后便开始分析网页结构，为后面的编写代码做准备。打开开发者工具 (F12) 后便可以看到整个网页的 html 代码，<br />\n![](/images/11-17-pixiv.png) 使用工具栏中的小箭头随便点击一张图片便可在结构中定位到该图片的位置，<br />\n![](/images/11-17-pixiv2.png) 我们仔细观察之后就可以发现所有的图片都是位于 class='cell-container' 的 div 盒子中，而图片则是位于这个 div 标签下的 img 标签中，而每张图片的链接都储存在 img 标签的，所以理论上接下来我们只需找到每一个 img 标签并取得所有图片的链接就可以批量下载图片。但是这个网页跟一般的网页不同，一般的的网页可以根据改变页数而选择不同的图片，而这个网页采取的是动态刷新的方式来刷新图片，随着滚动条的滚动图片不断发生改变，而整个网页并不会刷新，网址并不会改变，这就给给我们的工作带来了一定的麻烦。<br />\n这个时候为了能够正常的获取我们所需要的数目的照片，我们就需要继续分析网页。在开发者工具中找到 “网络”（'networks'）, 我们可以观察到随着我们往下滑动页面，网络中的数据也是不断改变的。本来我是打算先找到 post 请求，然后就可以找到真正的请求网址，结果他竟然没有 post 请求！！！networks 中直接给出了返回的照片信息，但是我不知道如何收集开发者工具中的 img 信息，所以只能换个方法。<br />\n随着我们不断地滑动，networks 中的内容不断改变，通过观察可以观察到每滑动几下，刷新的数据中除了 jpg 信息，还有 2 个'<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waXguaXB2NC5ob3N0L2lsbHVzdHJhdGlvbnM/aWxsdXN0VHlwZT1pbGx1c3QmYW1wO3NlYXJjaFR5cGU9b3JpZ2luYWwmYW1wO21heFNhbml0eUxldmVsPTQmYW1wO3BhZ2U9NSZhbXA7a2V5d29yZD0lRTYlQTElOUMlRTMlODElQUUlRTglOEElQjEmYW1wO3BhZ2VTaXplPTMw\">https://pix.ipv4.host/illustrations?illustType=illust&amp;searchType=original&amp;maxSanityLevel=4&amp;page=5&amp;keyword = 桜の花 &amp; pageSize=30</span>' 信息，一个是 get 请求，一个是 options 请求 (虽然我不知道这个请求有什么用)。<br />\n![](/images/20-11-17_pixiv3.png) 我们选中其中一个可以发现一个请求 url, 我通过代码爬取了一下这个网址的源代码 (直接点击这个网址是无用的，我是通过在代码添加请求头访问)，发现其中包含了很多的照片的网址，然后再观察一下这个网址的组成，可以大胆猜测我们只要改变网址中 'page' 的属性值就可以访问到不同的图片组，然后我用代码爬了一下不同的 page 值的网页发现返回值确实不同，就在我以为我要成功的时候，现实又严重的打击了我的自信心。我试着用代码访问获得的众多的图片网址中的一个时，返回了失败的信息，估计是爬虫做的伪装的还不够，还是被认出来了。但是我暂时并不知道如何改进，所以这种方式我就暂时放弃了。<br />\n接下来继续观察网页返回的信息，可以发现在参数栏中也包含了 page 信息<br />\n！[](/images/20-11-17_pixiv4.png), 所以我就打算将这些信息打包成 data 信息并作为参数传入请求中</p>\n<pre><code>import requests\nfrom lxml import etree\n\n# 网址\nurl = 'https://pixivic.com/keywords?tag=樱花&amp;illustType=illust&amp;VNK=3fa7b1f4'\n\n# 反爬\nheader = &#123;\n    'accept':\n    'application/json, text/plain, */*',\n    'accept-encoding':\n    'gzip, deflate, br',\n    'accept-language':\n    'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',\n    'authorization':\n    'eyJhbGciOiJIUzUxMiJ9.eyJwZXJtaXNzaW9uTGV2ZWwiOjIsInJlZnJlc2hDb3VudCI6MSwiaXNCYW4iOjEsInVzZXJJZCI6NTk3NTIyLCJpYXQiOjE2MDU1MzA4ODEsImV4cCI6MTYwNTcwMzY4MX0.yPa-vDYWgMtp6Mer_Ycgyf4r6i6ZQoHFZJGi1v9CjYH7Q7T9Kz_Coa5PwbtZC0j-AvhRFEWaa5D5jxD8WujxBA',\n    'dnt':\n    '1',\n    'origin':\n    'https://pixivic.com',\n    'referer':\n    'https://pixivic.com/',\n    'sec-fetch-dest':\n    'empty',\n    'sec-fetch-mode':\n    'cors',\n    'sec-fetch-site':\n    'cross-site',\n    'cookie':\n    '__cfduid=d9b53ec0583ae0dc116fee426d77c30891605603315; expires=Thu, 17-Dec-20 08:55:15 GMT; path=/; domain=.cheerfun.dev; HttpOnly; SameSite=Lax',\n    'user-agent':\n    'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36 Edg/86.0.622.69'\n&#125;\n# 提交的数据\ndat = &#123;\n    'illustType': 'illust',\n    'searchType': 'original',\n    'maxSanityLevel': '4',\n    'page': '2',\n    'keyword': '樱花',\n    'pageSize': '30',\n&#125;\n\nr = requests.get(url, data= dat,headers=header, timeout=30)\nprint(r.status_code)\nr.raise_for_status()  # 如果状态不是200，则引发HTTPERROE异常\ntext = r.content.decode(encoding='utf-8', errors='ignore')\nprint(text)\nhtml = etree.HTML(text)\n</code></pre>\n<p>运行完整代码后，我们可以看到成功返回了信息，<br />\n![](/images/20-11-17_pixiv5.png), 但是这些都是没用的，一个有用的东西都没有！！！明显这是又被认出来是爬虫了，这次人家还客气点没有直接拒绝请求访问，只是给了假的页面而已。</p>\n<p>所以在折腾了将近一天的时间后还是没有成功的爬取下来图片，只能再去看一些相关的网课来学学怎么更好的伪装骗过系统，太难受了💔。</p>\n",
            "tags": [
                "Python 爬虫"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/nginx/2021-11-20-Nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/nginx/2021-11-20-Nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "title": "Nginx的反向代理与负载均衡",
            "date_published": "2021-11-26T17:22:09.563Z",
            "content_html": "<h1 id=\"nginx的反向代理与负载均衡\"><a class=\"anchor\" href=\"#nginx的反向代理与负载均衡\">#</a> Nginx 的反向代理与负载均衡</h1>\n<h2 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h2>\n<h3 id=\"什么是反向代理\"><a class=\"anchor\" href=\"#什么是反向代理\">#</a> 什么是反向代理</h3>\n<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 Internet 上的连接请求，然 后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202450.png\" alt=\"\" /></p>\n<h4 id=\"反向代理的作用\"><a class=\"anchor\" href=\"#反向代理的作用\">#</a> 反向代理的作用：</h4>\n<p>（1）保证内网的安全，阻止 web 攻击，大型网站，通常将反向代理作为公网访问地址，Web 服务器是内网</p>\n<p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>\n<h4 id=\"反向代理和正向代理的区别\"><a class=\"anchor\" href=\"#反向代理和正向代理的区别\">#</a> 反向代理和正向代理的区别</h4>\n<p>首先我们先理解正向代理，正向代理类似一个跳板机，代理访问外部资源。比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202139.png\" alt=\"\" /></p>\n<p><strong>正向代理的用途：</strong></p>\n<p>（1）访问原来无法访问的资源，如 google</p>\n<p>​    \t（2） 可以做缓存，加速访问资源</p>\n<p>（3）对客户端访问授权，上网进行认证</p>\n<p>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>\n<p><strong>正向代理即是客户端代理，代理客户端，服务端不知道实际发起请求的客户端.</strong><br />\n<strong> 反向代理即是服务端代理，代理服务端，客户端不知道实际提供服务的服务端</strong></p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211120202656.png\" alt=\"\" /></p>\n<p>正向代理中，proxy 和 client 同属一个 LAN，对 server 透明；<br />\n反向代理中，proxy 和 server 同属一个 LAN，对 client 透明。<br />\n实际上 proxy 在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。</p>\n<p>正向代理：买票的黄牛</p>\n<p>反向代理：租房的代理</p>\n<h3 id=\"配置反向代理\"><a class=\"anchor\" href=\"#配置反向代理\">#</a> 配置反向代理</h3>\n<p>将 travel 案例部署到 tomcat 中（ROOT 目录），上传到服务器。 （2）启动 TOMCAT，输入网址 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTc3LjEyOTo4MDgw\">http://192.168.177.129:8080</span> 可以看到网站首页</p>\n<pre><code>upstream tomcat-travel&#123; \n  server 192.168.177.129:8080;  # 修改为你自己的虚拟机的ip地址\n &#125; \n server &#123; \n   listen 80; # 监听的端口\n   server_name www.hmtravel.com; # 域名或 ip \n location / &#123; # 访问路径配置\n   # root index;# 案例的部署路径 默认index\n   proxy_pass http://tomcat-travel;   // 与上方tomcat-travel对应\n   index index.html index.htm; # 默认首页\n &#125; \n&#125; \n</code></pre>\n<p>重新启动 Nginx  然后用浏览器测试：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5obXRyYXZlbC5jb20=\">http://www.hmtravel.com</span> （此域名须配置域名）</p>\n<h2 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 负载均衡</h2>\n<h3 id=\"什么是负载均衡\"><a class=\"anchor\" href=\"#什么是负载均衡\">#</a> 什么是负载均衡</h3>\n<p>负载均衡 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备 和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。  负载均衡，英文名称为 Load Balance，其意思就是分摊到多个操作单元上进行执行， 例如 Web 服务器、FTP 服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完 成工作任务。</p>\n<h3 id=\"负载均衡准备工作\"><a class=\"anchor\" href=\"#负载均衡准备工作\">#</a> 负载均衡准备工作</h3>\n<p>将相同的工程复制三份或不同的工程部署到服务器上，分别修改他们的端口使端口各不相同，如 80，81，82。分别启动这三个服务。 为了能够区分是访问哪个服务器的网站，可以在首页标题加上标记以便区分</p>\n<h3 id=\"修改nginx配置文件\"><a class=\"anchor\" href=\"#修改nginx配置文件\">#</a> 修改 Nginx 配置文件</h3>\n<pre><code>upstream tomcat-travel &#123; \n\tserver 192.168.177.129:8080; # 项目的部署地址\n\tserver 192.168.177.129:8081  weight=2; # 不同的权重可以使不同的服务器被访问到的概率不同，权重越高概率越大\n\tserver 192.168.177.129:8082; \n &#125; \n server &#123; \n \tlisten 80; # 监听的端口\n \tserver_name www.hmtravel.com; # 绑定的域名或 ip \n\tlocation / &#123; # 访问路径配置\n \t\t# root index;# 根目录\n \t\tproxy_pass http://tomcat-travel; \n \t\tindex index.html index.htm; # 默认首页\n \t&#125; \n\terror_page 500 502 503 504 /50x.html; # 错误页面\n \tlocation = /50x.html &#123; \n \t\troot html; \n \t&#125; \n &#125;\n</code></pre>\n<p>启动 Nginx 观察结果便可</p>\n<p>参考文章：[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdGFvc3Rhcnl1L3AvMTA1NDcxMzIuaHRtbA==\">反向代理和正向代理区别 - 泛夜泰克 - 博客园 (cnblogs.com)</span>)</p>\n<p>​\t\t\t\t\t[2] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXF2NHkxbzc5dD9wPTUzOQ==\">黑马程序员 JavaWeb 全套基础教程，java web 从入门到项目实战（IDEA 版 javaweb）文档资料_哔哩哔哩_bilibili</span></p>\n",
            "tags": [
                "Nginx"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-7-10-java%E4%B9%8Bjunit%E6%B5%8B%E8%AF%95/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-7-10-java%E4%B9%8Bjunit%E6%B5%8B%E8%AF%95/",
            "title": "java之junit测试",
            "date_published": "2021-11-26T17:22:09.558Z",
            "content_html": "<h1 id=\"junit\"><a class=\"anchor\" href=\"#junit\">#</a> junit</h1>\n<h2 id=\"什么是junit\"><a class=\"anchor\" href=\"#什么是junit\">#</a> 什么是 junit</h2>\n<p>JUnit 是一个 Java 语言的单元测试框架。它由 Kent Beck 和 Erich Gamma 建立，逐渐成为源于 Kent Beck 的 sUnit 的 xUnit 家族中最为成功的一个。 JUnit 有它自己的 JUnit 扩展生态圈。多数 Java 的开发环境都已经集成了 JUnit 作为单元测试的工具。</p>\n<p>也就是说 junit 就是别人写好的单元测试框架，使用此框架你可以大大缩短你的测试时间和准确度（笔者现在还记得大一刚来的的时候，c 语言写的小程序，每次都是重启测试，那种编译 - 输入 -- 停止 - 编译的苦日子，很痛苦，今天用 junit 这个单元测试框架好多了）。</p>\n<h3 id=\"单元测试是什么\"><a class=\"anchor\" href=\"#单元测试是什么\">#</a> 单元测试是什么</h3>\n<p>百度百科的解释是这样的：单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。例如，你可能把一个很大的值放入一个有序 list 中去，然后确认该值出现在 list 的尾部。或者，你可能会从字符串中删除匹配某种模式的字符，然后确认字符串确实不再包含这些字符了。</p>\n<p>简单的说，单元测试就是对你程序中最小的功能模块进行测试，在 c 语言里可能是一个函数，java 中可能是一个方法或者类。目的就是为了提高代码的质量。</p>\n<p>### 为什么要引入单元测试<br />\n平常写代码的时候经常需要检验某些方法功能是否正常，正常情况下需要创立完整的类来运行检验该方法，这样难免效率低下，引入 junit 之后就不用构建一个完整的程序便可以对某一方法进行检验。</p>\n<h2 id=\"idea中junit的使用\"><a class=\"anchor\" href=\"#idea中junit的使用\">#</a> IDEA 中 junit 的使用</h2>\n<h3 id=\"创建包名及代码\"><a class=\"anchor\" href=\"#创建包名及代码\">#</a> 创建包名及代码</h3>\n<p>包名规范</p>\n<p>单元测试的代码都放在 test 包下，和源码不在同一个包下<br />\n！[](/images/2021_7_10_junit/1.png)<br />\n 如图所示，DaoTest 类单独放在 test 包下。<br />\n测试的类方法都以 test 开头，后面接要测试的类或者方法的名字</p>\n<h4 id=\"junit使用方法\"><a class=\"anchor\" href=\"#junit使用方法\">#</a> junit 使用方法</h4>\n<p>以下图代码为例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">User</span> loginUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"superBaby\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">UserDao</span> dao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>loginUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在要测试的方法前键入 @test，这是会发现 test 为红色提示。<br />\n![](/images/2021_7_10_junit/2.png)<br />\n 这是我们只需按住 Ctrl+shift+Alt+s 打开项目结构，找到库并在右边找到 + 号按钮新建一个 java 库，并在 idea 的安装目录中的 lib 文件夹找到 junit-4.12.jar 文件并导入即可。<br />\n![](/images/2021_7_10_junit/6.png)<br />\n![](/images/2021_7_10_junit/3.png)<br />\n 接下来，便需要将 junit.jar 文件导入到模块中。<br />\n![](/images/2021_7_10_junit/4.png)<br />\n 选中 junit4.12jar 文件并点击右上方的 + 号并添加到模块依赖中。<br />\n![](/images/2021_7_10_junit/5.png)<br />\n 接下来便返回项目中，导入 org.junit.test 包后，可以看到 @Test 变为了正常的颜色，接下来点击方法前面的绿色三角形便可以对方法进行测验了。<br />\n![](/images/2021_7_10_junit/7.png)</p>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%85%8D%E7%BD%AE%E9%AB%98%E7%BA%A7/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%85%8D%E7%BD%AE%E9%AB%98%E7%BA%A7/",
            "title": "SpringBoot运维实用篇之配置高级",
            "date_published": "2021-11-26T17:22:09.557Z",
            "content_html": "<h1 id=\"springboot运维实用篇之配置高级\"><a class=\"anchor\" href=\"#springboot运维实用篇之配置高级\">#</a> springboot 运维实用篇之配置高级</h1>\n<h2 id=\"临时属性配置\"><a class=\"anchor\" href=\"#临时属性配置\">#</a> 临时属性配置</h2>\n<ul>\n<li>\n<p>带属性数启动 SpringBoot, 使用替换配置文件中的属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java <span class=\"token operator\">-</span>jar 工程名<span class=\"token punctuation\">.</span>jar <span class=\"token operator\">--</span>server<span class=\"token punctuation\">.</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119220801.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>通过编程形式带参数启动 SpringBoot 程序，为程序添加运行参数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\targ<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"--server.port=8080\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SSMPApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>不携带参数启动 SpringBoot 程序</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SSMPApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>携带多个属性启动 SpringBoot, 属性之间使用空格分隔</p>\n</li>\n<li>\n<p>临时属性必须是当前 boot 工程支持的属性，否则设置无效</p>\n</li>\n<li>\n<p>属性加载优先级</p>\n<p>[](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvZmVhdHVyZXMuaHRtbCNmZWF0dXJlcy5leHRlcm5hbC1jb25maWc=\">Core Features (spring.io)</span>)</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119214529.png\" alt=\"/\" /></p>\n</li>\n</ul>\n<h2 id=\"配置文件分类\"><a class=\"anchor\" href=\"#配置文件分类\">#</a> 配置文件分类</h2>\n<h3 id=\"springboot中4级配置文件\"><a class=\"anchor\" href=\"#springboot中4级配置文件\">#</a> SpringBoot 中 4 级配置文件</h3>\n<p>1 级： file ：config/application.yml 【最高】 （file：与 jar 包位于同一目录下）</p>\n<p>2 级： file ：application.yml</p>\n<p>3 级：classpath：config/application.yml</p>\n<p>4 级：classpath：application.yml 【最低】</p>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h3>\n<ul>\n<li>\n<p>1 级与 2 级留做系统打包后设置通用属性，1 级常用于运维经理进行线上整体项目部署方案调控</p>\n</li>\n<li>\n<p>3 级与 4 级用于系统开发阶段设置通用属性，3 级常用于项目经理进行整体项目属性调控</p>\n</li>\n<li>\n<p>如果 yml 与 properties 在不同层级中共存会是什么效果？ 例：类路径 application.properties 属性是否覆盖文件系统 config 目录中 application.yml 属性</p>\n<ul>\n<li>项目类路径配置文件：服务于开发人员本机开发与测试</li>\n<li>项目类路径 config 目录中配置文件：服务于项目经理整体调控</li>\n<li>工程路径配置文件：服务于运维人员配置涉密线上环境</li>\n<li>工程路径 config 目录中配置文件：服务于运维经理整体调控</li>\n</ul>\n</li>\n<li>\n<p>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序</p>\n</li>\n</ul>\n<h2 id=\"自定义配置文件\"><a class=\"anchor\" href=\"#自定义配置文件\">#</a> 自定义配置文件</h2>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-19-SpringBoot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/",
            "title": "springboot运维实用篇之打包与运行",
            "date_published": "2021-11-26T17:22:09.554Z",
            "content_html": "<h1 id=\"打包与运行\"><a class=\"anchor\" href=\"#打包与运行\">#</a> 打包与运行</h1>\n<p>SpringBoot 项目可以基于 java 环境下独立运行 jar 文件下独立运行 jar 文件启动服务</p>\n<h2 id=\"程序打包与运行windows版\"><a class=\"anchor\" href=\"#程序打包与运行windows版\">#</a> 程序打包与运行（Windows 版）</h2>\n<h3 id=\"springboot项目快速启动\"><a class=\"anchor\" href=\"#springboot项目快速启动\">#</a> SpringBoot 项目快速启动</h3>\n<ol>\n<li>\n<p>对 SpringBoot 项目打包 (执行 Maven 构建指令 package)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn <span class=\"token keyword\">package</span></pre></td></tr></table></figure></li>\n<li>\n<p>运行项目 (执行启动指令)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java <span class=\"token operator\">-</span>jar 打包后的项目名称<span class=\"token punctuation\">.</span>jar</pre></td></tr></table></figure><p><strong>注意事项：jar 支持命令行启动需要依赖 maven 插件支持，请确认打包时是否具有 SpringBoot 对应的 maven 插件</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"可执行jar包目录结构\"><a class=\"anchor\" href=\"#可执行jar包目录结构\">#</a> 可执行 jar 包目录结构</h3>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119212734.png\" alt=\"\" /></p>\n<h3 id=\"jar包描述文件manifestmf\"><a class=\"anchor\" href=\"#jar包描述文件manifestmf\">#</a> jar 包描述文件 (MANIFEST.MF)</h3>\n<ul>\n<li>\n<p>普通工程</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Manifest-Version<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Implementation-Title<span class=\"token operator\">:</span> spring_01_01_quickStart</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Implementation-Version<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span>.<span class=\"token number\">1</span>-SNAPSHOT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Build-Jdk-Spec<span class=\"token operator\">:</span> <span class=\"token number\">1.8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Created-By<span class=\"token operator\">:</span> Maven Jar Plugin <span class=\"token number\">3.2</span>.<span class=\"token number\">0</span></pre></td></tr></table></figure></li>\n<li>\n<p>基于 Spring-Boot-maven-plugin 打包的工程</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Manifest-Version<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Spring-Boot-Classpath-Index<span class=\"token operator\">:</span> BOOT-INF/classpath.idx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Implementation-Title<span class=\"token operator\">:</span> spring_01_01_quickStart</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Implementation-Version<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span>.<span class=\"token number\">1</span>-SNAPSHOT</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Spring-Boot-Layers-Index<span class=\"token operator\">:</span> BOOT-INF/layers.idx</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Start-Class<span class=\"token operator\">:</span> com.example.Spring0101QuickStartApplication</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Spring-Boot-Classes<span class=\"token operator\">:</span> BOOT-INF/classes/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Spring-Boot-Lib<span class=\"token operator\">:</span> BOOT-INF/lib/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Build-Jdk-Spec<span class=\"token operator\">:</span> <span class=\"token number\">1.8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Spring-Boot-Version<span class=\"token operator\">:</span> <span class=\"token number\">2.5</span>.<span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Created-By<span class=\"token operator\">:</span> Maven Jar Plugin <span class=\"token number\">3.2</span>.<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Main-Class<span class=\"token operator\">:</span> org.springframework.boot.loader.JarLauncher</pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"命令行启动常见问题及解决方案\"><a class=\"anchor\" href=\"#命令行启动常见问题及解决方案\">#</a> 命令行启动常见问题及解决方案</h3>\n<ul>\n<li>\n<p>Windows 端口被占用</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 查询端口</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>netstat -ano</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># 查询指定端口</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>netstat -ano |findstr <span class=\"token string\">\"端口号\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre># 根据进程PID查询进程名称</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tasklist |findstr <span class=\"token string\">\"进程PID号\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre># 根据PID杀死任务</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>taskkill /F /PID <span class=\"token string\">\"进程PID号\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre># 根据进程名称杀死任务</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>taskkill -f -t -im <span class=\"token string\">\"进程名称\"</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"程序打包与运行linux版\"><a class=\"anchor\" href=\"#程序打包与运行linux版\">#</a> 程序打包与运行 (Linux 版)</h2>\n<ol>\n<li>上传安装包</li>\n<li>执行 jar 命令：java -jar 工程名.jar</li>\n<li>Windows 与 Linux 下执行 Boot 打包程序流程相同，仅需确保运行环境有效即可</li>\n</ol>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8A%80%E6%9C%AF/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8A%80%E6%9C%AF/",
            "title": "springboot基础篇之整合第三方技术",
            "date_published": "2021-11-26T17:22:09.547Z",
            "content_html": "<h1 id=\"spring基础之整合第三方技术\"><a class=\"anchor\" href=\"#spring基础之整合第三方技术\">#</a> Spring 基础之整合第三方技术</h1>\n<h2 id=\"整合junit\"><a class=\"anchor\" href=\"#整合junit\">#</a> 整合 Junit</h2>\n<ol>\n<li>导入测试对应的 starter</li>\n<li>测试类使用 @SpringBoot 修饰</li>\n<li>使用自动装配的形式添加要测试的对象</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 名称: @SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 类型：测试类注解</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 位置：测试类上方</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 作用：设置 Junit 加载的 SpringBoot 启动类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//classes: 设置 SpringBoot 的启动类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes<span class=\"token operator\">=</span><span class=\"token class-name\">SpringBootJunitApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringBootJunitApplicationTest</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>如果测试类在 SpringBoot 启动类的包或子包中，可以忽略启动类的设置，也就是忽略 classes 的设定</li>\n</ol>\n<h2 id=\"整合mybatis\"><a class=\"anchor\" href=\"#整合mybatis\">#</a> 整合 MyBatis</h2>\n<ul>\n<li>核心配置：数据库连接相关信息</li>\n<li>映射配置：SQL 映射 (XML / 注解)</li>\n</ul>\n<ol>\n<li>\n<p>创建新模块，选择 Spring 初始化，并配置模块相关基础信息</p>\n</li>\n<li>\n<p>选择当前模块需要使用的技术集（MyBatis、MySQL）(勾选 MyBatis 技术，也就是导入 MyBatis 对应的 starter)</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119171012.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>设置数据源参数</p>\n</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 数据库连接相关信息转换成配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\"># 驱动类过时，提醒更换为 com.mysql.cj.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr></table></figure><ol start=\"4\">\n<li>SpringBoot 版本低于 2.4.3 (不含)，Mysql 驱动版本大于 8.0 时，需要在 url 连接串中配置时区 或在 MySQL 数据库端配置时区解决此问题</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">jdbc:mysql</span><span class=\"token punctuation\">:</span> //localhost<span class=\"token punctuation\">:</span>3306/ssm_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr></table></figure><ol start=\"5\">\n<li>定义数据层接口与映射配</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据库 SQL 映射需要添加 @Mapper 被容器识别</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>测试类中注入 dao 接口，测试功能</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot08MybatisApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDao</span> bookDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookDao<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"整合mybatis-plus\"><a class=\"anchor\" href=\"#整合mybatis-plus\">#</a> 整合 MyBatis-Plus</h2>\n<ul>\n<li>MyBatis-Plus 与 MyBatis 区别\n<ul>\n<li>导入坐标不同</li>\n<li>数据层实现简化</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>\n<p>手动添加 SpringBoot 整合 MyBatis-Plus 的坐标，可以通过 mvnrepository 获取</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">&lt;!-- 由于 SpringBoot 中未收录 MyBatis-Plus 的坐标版本，需要指定对应的 Version--></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>定义数据层接口与映射配置，继承 BaseMapper</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>其他同 SpringBoot 整合 MyBatis</p>\n</li>\n</ol>\n<h2 id=\"整合druid\"><a class=\"anchor\" href=\"#整合druid\">#</a> 整合 Druid</h2>\n<ul>\n<li>\n<p>指定数据源类型</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSourc</pre></td></tr></table></figure></li>\n<li>\n<p>导入 Druid 对应的 starter</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>变更 Druid 的配置方式</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/ssm_db<span class=\"token punctuation\">?</span>serverTimezone=UTC</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr></table></figure><h2 id=\"整合第三方技术通用方式\"><a class=\"anchor\" href=\"#整合第三方技术通用方式\">#</a> 整合第三方技术通用方式</h2>\n<ul>\n<li>\n<p>导入对应的 starter</p>\n</li>\n<li>\n<p>根据提供的配置格式，配置非默认值对应的配置项</p>\n</li>\n</ul>\n",
            "tags": [
                "java springboot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-18-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/",
            "title": "springboot基础篇之基础配置",
            "date_published": "2021-11-26T17:22:09.546Z",
            "content_html": "<h1 id=\"springboot基础篇之基础配置\"><a class=\"anchor\" href=\"#springboot基础篇之基础配置\">#</a> springboot 基础篇之基础配置</h1>\n<h2 id=\"属性配置\"><a class=\"anchor\" href=\"#属性配置\">#</a> 属性配置</h2>\n<h3 id=\"复制工程\"><a class=\"anchor\" href=\"#复制工程\">#</a> 复制工程</h3>\n<ul>\n<li>原则\n<ul>\n<li>保留工程基础结构</li>\n<li>抹掉原始工程结构</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>在工作空间中复制对应工程，并修改工程名称</li>\n<li>删除与 Idea 有关的配置，仅保留 src 目录与 pom.xml 文件</li>\n<li>修改 pom.xml 文件中的 artifachId 与新工程 / 模块名相同</li>\n<li>删除 name 标签（可选）</li>\n<li>保留备份工程后期使用</li>\n</ol>\n<h3 id=\"修改配置\"><a class=\"anchor\" href=\"#修改配置\">#</a> 修改配置</h3>\n<ul>\n<li>\n<p>修改服务器端口</p>\n<p>SpringBoot 默认配置文件为 application.properties，通过键值对配置相应属性。修改服务器端口：</p>\n</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">server.port</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">80</span></pre></td></tr></table></figure><ul>\n<li>关闭运行日志图标</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">spring.main.banner-mode</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">off</span></pre></td></tr></table></figure><ul>\n<li>设置日志相关</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">logging.level.root</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">debug</span></pre></td></tr></table></figure><ul>\n<li>\n<p>[SpringBoot 内置属性查询](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvYXBwbGljYXRpb24tcHJvcGVydGllcy5odG1sI2FwcGxpY2F0aW9uLXByb3BlcnRpZXM=\">Common Application Properties (spring.io)</span>), 官方文档中参考第一项：Application properties</p>\n</li>\n<li>\n<p>书写 Spring Boot 配置采用关键字 + 提示形式书写，SpringBoot 中只有导入了对应 Starter 后，才后提供对应配置属性提示</p>\n</li>\n</ul>\n<h2 id=\"配置文件分类\"><a class=\"anchor\" href=\"#配置文件分类\">#</a> 配置文件分类</h2>\n<ul>\n<li>\n<p>SpringBoot 提供了多种属性配置方式，分别为 application.properties、application.yaml、application.yml, SpringBoot 默认的配置方式为 application.properties, 但以 properties 文件结构不够清晰简洁，因此常用 yml 配置文件。</p>\n<ul>\n<li>application.properties</li>\n</ul>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">server.port</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">80</span></pre></td></tr></table></figure><ul>\n<li>application.yml (：后必须留有空格)</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr></table></figure><ul>\n<li>application.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr></table></figure></li>\n<li>\n<p>SpringBoot 允许三种配置文件共存，配置文件加载顺序：.properties &gt; yml &gt; yaml</p>\n</li>\n<li>\n<p>不同配置文件中相同配置按照优先级相互覆盖，不同配置文件中不同配置全部保留</p>\n</li>\n<li>\n<p>自动提示功能消失方案解决（首先确保引入了对应的 starter）-- 指定 SpringBoot 配置文件</p>\n<ul>\n<li>Idea 中打开 Setting-&gt;Pro 金额词条 Structure-&gt;Facets</li>\n<li>选中相应项目 / 工程</li>\n<li>Customize Spring Boot</li>\n<li>选择配置文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"yaml文件\"><a class=\"anchor\" href=\"#yaml文件\">#</a> yaml 文件</h2>\n<ul>\n<li>YAML (YAML Ain't Markup Language) 一种数据序列化格式</li>\n<li>优点：\n<ul>\n<li>容易阅读</li>\n<li>容易与脚本语言交互</li>\n<li>以数据为核心</li>\n<li>重数据轻格式</li>\n</ul>\n</li>\n<li>YAML 文件拓展名\n<ul>\n<li>.yml (主流)</li>\n<li>.yaml</li>\n</ul>\n</li>\n<li>yaml 语法规则\n<ul>\n<li>大小写敏感</li>\n<li>属性层级关系使用多行描述，每行结尾使用冒号结束</li>\n<li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格，不允许使用 tab 键</li>\n<li>属性名与属性值之间使用冒号 + 空格作为分隔</li>\n<li># 表示注释</li>\n<li>核心规则：数据前面要使用冒号与空格隔开</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 字面值表示方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">boolean</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">TRUE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">float</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.14</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">int</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">null</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">string</span><span class=\"token punctuation\">:</span> HelloWorld</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">string2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"HelloWorld\"</span> <span class=\"token comment\"># 字符串可以直接而书写也可以使用引号包裹</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-02-17</span>      <span class=\"token comment\"># 日期必须使用 yyyy-MM-dd 格式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">datatime</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-02-17T15:02:31+08:00</span>    <span class=\"token comment\">#日期和时间之间使用 T 连接，最后使用 + 代表时区</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 数组表示方法：在属性名下方使用 - 作为数据开始符号，每行书写一个数据，减号与数据间使用空格分隔</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">subject</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">-</span> Java</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">-</span> 前端</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">-</span> 大数据</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span>             <span class=\"token comment\"># 对象数组格式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tom</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Jerry</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 对象数组缩略格式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">users2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span>tom <span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"yaml数据读取\"><a class=\"anchor\" href=\"#yaml数据读取\">#</a> yaml 数据读取</h2>\n<ul>\n<li>\n<p>单个数据读取</p>\n<ul>\n<li>\n<p>使用 @Value 配合 SpeEL 读取单个数据</p>\n</li>\n<li>\n<p>如果数据存在多层级，依次书写多层级名称即可</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token function\">classtest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token annotation punctuation\">@value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;lesson&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lessonName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;serve.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>属性中如果存在转义字符，需要使用双引号包裹</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lesson<span class=\"token operator\">:</span> <span class=\"token string\">\"Spring\\boot\\lesson\"</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>封装全部数据到 Environment 对象</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token function\">classtest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    # 使用<span class=\"token class-name\">Autowired</span>自动装配到<span class=\"token class-name\">Environment</span>对象中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Environment</span> env<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lesson\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>自定义对象封装指定数据</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span>  <span class=\"token keyword\">class</span> users<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 @ConfigurationProperties 注解绑定配置信息到封装类中</p>\n</li>\n<li>\n<p>封装类需要定义为 Spring 管理的 Bean, 否则无法进行属性注入</p>\n</li>\n</ul>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-17-springboot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bspringboot/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/SpringBoot/2021-11-17-springboot%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bspringboot/",
            "title": "springboot基础篇之快速上手springboot",
            "date_published": "2021-11-26T17:22:09.544Z",
            "content_html": "<h1 id=\"快速上手springboot\"><a class=\"anchor\" href=\"#快速上手springboot\">#</a> 快速上手 Springboot</h1>\n<h2 id=\"springboot简介\"><a class=\"anchor\" href=\"#springboot简介\">#</a> SpringBoot 简介</h2>\n<ul>\n<li>\n<p>SpringBoot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化 Spring 应用的初始搭建以及开发过程 。</p>\n</li>\n<li>\n<p>Spring 程序缺点</p>\n</li>\n</ul>\n<blockquote>\n<p>依赖设置繁琐</p>\n</blockquote>\n<blockquote>\n<p>配置繁琐</p>\n</blockquote>\n<ul>\n<li>SpringBoot 程序优点</li>\n</ul>\n<blockquote>\n<p>起步依赖（简化依赖配置）</p>\n</blockquote>\n<blockquote>\n<p>自动配置（简化常用工程相关配置）</p>\n</blockquote>\n<blockquote>\n<p>辅助功能（内置服务器，……</p>\n</blockquote>\n<ul>\n<li>\n<p>Spring 程序与 SpringBoot 程序对比</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200144.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h2 id=\"创建springboot工程的四种方式\"><a class=\"anchor\" href=\"#创建springboot工程的四种方式\">#</a> 创建 SpringBoot 工程的四种方式</h2>\n<h3 id=\"基于idea创建springboot工程\"><a class=\"anchor\" href=\"#基于idea创建springboot工程\">#</a> 基于 Idea 创建 SpringBoot 工程</h3>\n<ol>\n<li>创建新模块，选择 Spring Initializr，并配置模块相关基础信息</li>\n</ol>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200639.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>选择当前模块需要使用的技术集</li>\n</ol>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117200722.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>开发控制器类</li>\n</ol>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119174712.png\" alt=\"\" /></p>\n<ol start=\"4\">\n<li>运行自动生成的 Application 类</li>\n</ol>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211119174735.png\" alt=\"\" /></p>\n<p>从图中可以看到项目所运行的服务器为 Tomcat 及服务器运行的端口号为 8080.</p>\n<ol start=\"5\">\n<li>小结</li>\n</ol>\n<ul>\n<li>\n<p>开发 SpringBoot 程序可以根据向导进行联网快速制作（基于 idea 开发 SpringBoot 程序需要确保联网且能够加载到程序框架结构）</p>\n</li>\n<li>\n<p>SpringBoot 程序需要基于 JDK8 进行制作</p>\n</li>\n<li>\n<p>SpringBoot 程序中需要使用何种功能通过勾选选择技术</p>\n</li>\n<li>\n<p>运行 SpringBoot 程序通过运行 Application 程序入口进行</p>\n</li>\n</ul>\n<h3 id=\"于官网创建springboot工程\"><a class=\"anchor\" href=\"#于官网创建springboot工程\">#</a> 于官网创建 SpringBoot 工程</h3>\n<p>基于 SpringBoot 官网创建项目，地址 :<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8=\">https://start.spring.io</span></p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117201433.png\" alt=\"\" /></p>\n<p>所填属性与通过 Idea 创建工程相同</p>\n<h3 id=\"基于阿里云创建springboot工程\"><a class=\"anchor\" href=\"#基于阿里云创建springboot工程\">#</a> 基于阿里云创建 SpringBoot 工程</h3>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117201551.png\" alt=\"\" /></p>\n<p>基于阿里云创建 springboot 项目只需在第三步中取消勾选默认的 start 来源，改为勾选 Custom 用户自定义，并填入阿里云网址<span class=\"exturl\" data-url=\"aHR0cDovL3N0YXJ0LmFsaXl1bi5jb20=\"> http://start.aliyun.com</span> 即可，其它操作与基于 Idea 创建 SpringBoot 工程相同。</p>\n<ul>\n<li>注意事项</li>\n</ul>\n<ol>\n<li>\n<p>阿里云提供的坐标版本较低，如果需要使用高版本，进入工程后手工切换 SpringBoot 版本</p>\n</li>\n<li>\n<p>阿里云提供的工程模板与 Spring 官网提供的工程模板略有不通</p>\n</li>\n</ol>\n<h3 id=\"手工创建maven工程修改为springboot工程\"><a class=\"anchor\" href=\"#手工创建maven工程修改为springboot工程\">#</a> 手工创建 Maven 工程修改为 SpringBoot 工程</h3>\n<ol>\n<li>创建普通 Maven 工程</li>\n<li>继承 spring-boot-starter-parent</li>\n<li>添加依赖 spring-boot-starter-web</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.5.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring_01_01_quickStart<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"4\">\n<li>制作引导类 Application</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Spring0101QuickStartApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Spring0101QuickStartApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"隐藏指定文件文件夹\"><a class=\"anchor\" href=\"#隐藏指定文件文件夹\">#</a> 隐藏指定文件 / 文件夹</h2>\n<ol>\n<li>\n<p>Setting → File Types → Ignored Files and Folders</p>\n</li>\n<li>\n<p>输入要隐藏的文件名，支持 * 号通配符</p>\n</li>\n<li>\n<p>回车确认添加</p>\n</li>\n</ol>\n<h2 id=\"入门案例解析\"><a class=\"anchor\" href=\"#入门案例解析\">#</a> 入门案例解析</h2>\n<h3 id=\"parent\"><a class=\"anchor\" href=\"#parent\">#</a> parent</h3>\n<ul>\n<li>开发 SpringBoot 程序要继承 spring-boot-starter-parent</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>parent<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.5</span><span class=\"token number\">.6</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> lookup parent from repository <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>example<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring_01_01_quickStart<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>\n<p>spring-boot-starter-parent 中定义了若干个依赖管理</p>\n</li>\n<li>\n<p>继承 parent 模块可以避免多个依赖使用相同技术时出现依赖版本冲突</p>\n</li>\n<li>\n<p>继承 parent 的形式也可以采用引入依赖的形式实现效果</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117203328.png\" alt=\"\" /></p>\n<h3 id=\"starter\"><a class=\"anchor\" href=\"#starter\">#</a> starter</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><p>starter 中包含了许多依赖</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117203725.png\" alt=\"\" /></p>\n<p>将鼠标放在 starter 上按住 Ctrl + 鼠标左击即可查看详细信息。</p>\n<ol>\n<li>\n<p>starter</p>\n<p>SpringBoot 中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的</p>\n</li>\n<li>\n<p>parent</p>\n<p>所有 SpringBoot 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的 spring-boot-starter-parent 各版本间存在着诸多坐标版本不同</p>\n</li>\n<li>\n<p>实际开发</p>\n<p>使用任意坐标时，仅书写 GAV 中的 G (groupId) 和 A (artifactId)，V (version) 由 SpringBoot 提供，除非 SpringBoot 未提供对应版本 V，如发生坐标错误 (starter 中未包含当前依赖)，再指定 Version（要小心版本冲突)</p>\n</li>\n</ol>\n<h3 id=\"引导类\"><a class=\"anchor\" href=\"#引导类\">#</a> 引导类</h3>\n<ul>\n<li>\n<p>启动方式</p>\n<p>SpringBoot 的引导类是 Boot 工程的执行入口，运行 main 方法就可以启动项目</p>\n<p>SpringBoot 工程运行后初始化 Spring 容器，扫描引导类所在包加载 bean</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Spring0101QuickStartApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ConfigurableApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Spring0101QuickStartApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        bookController bean <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>bookController<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=====>\"</span><span class=\"token operator\">+</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117210124.png\" alt=\"\" /></p>\n<h3 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h3>\n<ol>\n<li>\n<p>内嵌 Tomcat 服务器是 SpringBoot 辅助功能之一</p>\n</li>\n<li>\n<p>内嵌 Tomcat 工作原理是将 Tomcat 服务器作为对象运行，并 将该对象交给 Spring 容器管理</p>\n<p>查看 spring-boot-starter-web 依赖详细信息可以看到其中包括了 Tomcat</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117212854.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>变更内嵌服务器思想是去除现有服务器，添加全新的服务器</p>\n<p>想要变更服务器只需修改 pom.xml 文件中的相关信息即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>            web起步依赖环境中，排除<span class=\"token class-name\">Tomcat</span>起步依赖<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>exclusions<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>exclusion<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>exclusion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>exclusions<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>        添加jetty起步依赖，版本由<span class=\"token class-name\">SpringBoot</span>的starter控制<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>jetty<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><p>重新启动程序后，发现服务器相关信息以变为 jetty</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211117213752.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>内置服务器</p>\n<p>tomcat (默认)   apache 出品，粉丝多，应用面广，负载了若干较重的组件</p>\n<p>jetty     \t\t\t 更轻量级，负载性能远不及 tomcat</p>\n<p>undertow  \t  undertow，负载性能勉强跑赢 tomcat</p>\n</li>\n</ol>\n",
            "tags": [
                "java SpringBoot"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-15-Filter&Listener/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-15-Filter&Listener/",
            "title": "JavaWEB之sl&jstl",
            "date_published": "2021-11-26T17:22:09.529Z",
            "content_html": "<h2 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h2>\n<pre><code>1. Filter：过滤器\n2. Listner: 监听器\n</code></pre>\n<h1 id=\"filter-过滤器\"><a class=\"anchor\" href=\"#filter-过滤器\">#</a> Filter: 过滤器</h1>\n<pre><code>1. 概念：\n    * 生活中的过滤器： 净水器，土匪\n    * web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能\n    * 过滤器的作用：\n        * 一般用于完成通用的操作。如：登陆验证、统一编码处理，敏感字符过滤\n\n2. 快速入门\n    1. 步骤：\n        1. 定义一个类，实现接口Filter\n        2. 复写方法\n        3. 设置拦截路径\n            1. web.xml\n            2. 注解\n    2. 代码：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 过滤器块石 == 快速入门</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//@WebFilter (\"/*\")  // 访问所有资源都会执行该过滤器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterDemo1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"过滤器FilterDemo1被执行了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span>servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>3. 过滤器细节：\n    1. web.xml的配置\n</code></pre>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>cn.itcast.web.filter.FilterDemo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token comment\">&lt;!-- 拦截路径 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code>    2. 过滤器执行过程\n        1. 执行过滤器\n        2. 执行放行后的资源\n        3. 回来执行过滤器放行代码下边的代码\n    3. 过滤器的生命周期方法\n        1. init: 在服务器启动后，会创建Filter对象，然后调用init方法，只执行一次。\n        2. doFilter: 每一次请求被拦截资源时会执行。可以执行多次。\n        3. destroy: 在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。\n    4. 过滤器配置详解\n        * 拦截路径设置：\n            * 具体资源路径： /index.jsp  只有访问index.jsp资源时，过滤器才会被执行。\n            * 拦截目录： /user/*  访问user目录下的所有资源都会执行过滤器\n            * 后缀名拦截 *.jsp 访问所有后缀名为jsp的资源时会执行过滤器\n            * 拦截所有资源：/*  访问所有资源时，都会执行过滤器。\n        * 拦截方式配置：资源被访问的方式\n            * 注解配置：\n                * 设置dispatchTypes属性\n                    1. REQUEST：默认值。浏览器直接请求资源\n                    2. FORWARD：转发请求资源\n                    3. INCLUDE: 包含访问资源\n                    4. ERROR：错误跳转资源\n                    5. ASYNC：异步访问资源\n\n            * web.xml\n                * 设置&lt;dispatcher&gt;&lt;/dispatcher&gt;标签即可\n\n    5. 过滤器链（配置多个过滤器）\n        * 执行顺序：如果有两个过滤器：过滤器1和过滤器2\n            1. 过滤器1\n            2. 过滤器2\n            3. 资源执行\n            4. 过滤器2\n            5. 过滤器1\n        * 过滤器先后顺序问题\n            1. 注解配置：按照类名的字符串比较规则比较，较小的限制性\n                * 如AFilter和BFilter,AFilter就先执行\n            2. web.xml配置：&lt;filter-mapping&gt;谁定义在上边谁先执行。\n\n4. 案例：\n    1. 案例1_登陆验证\n        * 需求：\n            1. 访问day_17_case案例的资源。验证其是否登录\n            2. 如果登陆了，则直接放行。\n            3. 如果没有登录，则跳转到登陆页面，提示：“您好，您尚未登陆”。\n\n    2. 案例2_敏感词汇过滤：\n        * 分析：\n            1. 对request对象进行增强。增强获取参数相关方法\n            2. 放行。传递代理对象\n                * 概念:\n                    1. 真实对象：被代理的对象\n                    2. 代理对象：\n                    3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的\n                * 实现方式：\n                    1. 静态代理：有一个类文件 描述代理模式。\n                    2. 动态模式：在内存中形成代理类\n                        * 实现步骤：\n                            1. 代理对象和真实对象实现相同的接口\n                            2. 代理对象 = Proxy.newProxyInstance();\n                            3. 使用代理对象调用方法\n                            4. 增强方法\n                        * 增强方式:\n                            1. 增强参数列表\n                            2. 增强返回值类型\n                            3. 增强方法体执行逻辑\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * 敏感词汇过滤器</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SensitiveWordsFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> resp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1. 创建代理对象，增强 getParameter 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">ServletRequest</span> proxy_req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 增强 getParameter 方法</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 判断是否是 getParameter 方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getParameter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 增强返回值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 获取返回值</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">return</span>  value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 判断方法名是否是 getParameterMap</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">// 判断方法名是否是 getParameterValue</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">//2. 放行</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>proxy_req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 敏感词汇集合</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> config<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">//1. 获取文件真实路径</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">ServletContext</span> servletContext <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">String</span> realPath <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/classes/敏感词汇.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">//2. 读取文件</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">//3. 将文件的每一行数据添加到 list 中</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"listener-监听器\"><a class=\"anchor\" href=\"#listener-监听器\">#</a> Listener: 监听器</h2>\n<pre><code>* 监听器：web的三大组件之一。\n    * 事件监听机制\n        * 事件： 一件事情\n        * 事件源：事件发生的地方\n        * 监听器： 一个对象\n        * 注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码\n* ServletContextListener: 监听ServletContext对象的创建和销毁\n    * 方法：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">contextDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContextEvent</span> sce<span class=\"token punctuation\">)</span> <span class=\"token comment\">//ServletContext 对象被销毁之前会调用该方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">contextInitialized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContextEvent</span> sce<span class=\"token punctuation\">)</span><span class=\"token comment\">//ServletContext 对象创建后会调用该方法</span></pre></td></tr></table></figure><pre><code>    * 步骤：\n        1. 定义一个类，实现ServletContextListener接口\n        2. 复写方法\n        3. 配置\n            1. web.xml\n</code></pre>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>              cn.itcast.web.listener.ContextLoaderListener</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code>            2. 注解\n                * @WebListener\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-Cookie&Session/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-Cookie&Session/",
            "title": "javaweb之Cookie&Session",
            "date_published": "2021-11-26T17:22:09.527Z",
            "content_html": "<h1 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h1>\n<ol>\n<li>会话技术\n<ol>\n<li>Cookie</li>\n<li>Session</li>\n</ol>\n</li>\n<li>JSP: 入门学习</li>\n</ol>\n<h1 id=\"会话技术\"><a class=\"anchor\" href=\"#会话技术\">#</a> 会话技术</h1>\n<ol>\n<li>会话：一次会话中包含多次请求和响应\n<ul>\n<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li>\n</ul>\n</li>\n<li>功能：在一次会话的范围内的多次请求间共享数据</li>\n<li>方式：\n<ol>\n<li>客户端会话技术: Cookie</li>\n<li>服务器端会话技术：Session</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie:</h1>\n<ol>\n<li>\n<p>概念：客户端会话技术，将数据保存到客户端</p>\n</li>\n<li>\n<p>快速入门：</p>\n<ul>\n<li>使用步骤：\n<ol>\n<li>创建 Cookie 对象，绑定数据\n<ul>\n<li>new Cookie(String name,String value)</li>\n</ul>\n</li>\n<li>发送 Cookie 对象，绑定数据\n<ul>\n<li>response.addCookie(Cookie cookie)</li>\n</ul>\n</li>\n<li>获取 Cookie, 拿到数据\n<ul>\n<li>Cookie[] cookies = request.getCookies();</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>实现原理</p>\n<ul>\n<li>基于响应头 set-cookie 和请求头 cookie 实现</li>\n</ul>\n</li>\n<li>\n<p>cookie 的细节</p>\n<ol>\n<li>一次可不可以发送多个 cookie?\n<ul>\n<li>可以</li>\n<li>可以创建多个 COokie 对象，使用 response 调用多次方法发送 cookie 即可</li>\n</ul>\n</li>\n<li>cookie 在 cookie 中保持多长时间？\n<ul>\n<li>默认情况下，当浏览器关闭后，cookie 数据被销毁</li>\n<li>持久化储存</li>\n<li>setMaxAge(int seconds)</li>\n</ul>\n<ol>\n<li>正数：将 Cookie 数据写到硬盘中，持久化储存。并指定 cookie 存活时间，时间到后，cookie 文件自动失效。</li>\n<li>负数，默认值<br />\n 3. 删除 cookie 值</li>\n</ol>\n</li>\n<li>cookie 能不能存中文？\n<ul>\n<li>tomcat 8 之前 cookie 不能直接存中文\n<ul>\n<li>需要将中文数据转码 --- 一般采用 URL 编码（% E3)</li>\n</ul>\n</li>\n<li>在 tomcat 8 之后，cookie 支持中文数据，特殊字符还是不支持，如空格，建议还是使用 URL 编码转储。</li>\n</ul>\n</li>\n<li>cookie 共享问题：\n<ol>\n<li>假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享？</li>\n</ol>\n<ul>\n<li>默认情况下 cookie 不能共享</li>\n<li>setPath (String path): 设置 cookie 的获取范围。默认情况下，设置当前虚拟目录</li>\n<li>如果要共享，则可以将 path 设置为 &quot;/&quot;</li>\n</ul>\n<ol start=\"2\">\n<li>不同的 tomcat 服务器间 cookie 共享问题？\n<ul>\n<li>setDomain (String path): 如果设置一级域名相同，那么多个服务器之间 cookie 可以共享</li>\n<li>setDomain (&quot;.baidu.com&quot;), 那么 tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>5. Cookie的特点和使用\n  1. cookie储存数据在客户端浏览器\n  2. 浏览器对于单个cookie的=大小有限制（4kb)以及对同一个域名下的总cokie数量也有限制（20个）\n  * 作用\n    1. cookie一般用于存储少量的不太敏感的数据\n    2. 在不登录的情况下，完成服务器对客户端的身份识别\n\n6. 案例：记住上一次访问时间\n  1. 需求：\n    1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问\n    2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串。\n  2. 分析：\n    1. 可以采用cokie来完成\n    2. 在服务器中的servlet判断是否有一个明为lastTime的cookie\n      1. 有：不是第一次访问\n        1. 响应数据：1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20\n\t\t\t    2. 写回Cookie：lastTime=2018年6月10日11:50:01\n\t\t    2. 没有：是第一次访问\n\t\t\t    1. 响应数据：您好，欢迎您首次访问\n\t\t\t    2. 写回Cookie：lastTime=2018年6月10日11:50:01\n\n    3. 代码实现：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>cookie</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cookieTest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CookieTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 设置响应的消息体的数据格式及编码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有 cookie 为 lastTime</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//1. 获取所有 cookie</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 遍历 cookie 数组</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>cookies<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> c<span class=\"token operator\">:</span>cookies</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 获取 cookie 的名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//                String value = c.getValue();</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">//4. 判断名称是不是 lastTime</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 有该 cookie，不是第一次访问</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 设置 cookie 的 value</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token comment\">// 获取当前时间，重新设置 cookie，重新发送 cookie</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    c<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token comment\">// 设置 cookie 存活时间</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    c<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置为 1 个月</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重新发送 cookie</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token comment\">// 响应数据</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token comment\">// 获取 cookie 的 value 时间</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>欢迎回来，您上次访问时间为：\"</span><span class=\"token operator\">+</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span> cookies<span class=\"token punctuation\">.</span>length<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>flag<span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 没有，第一次访问</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">,</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 设置 cookie 存活时间</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置为 1 个月</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重新发送 cookie</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>您好，欢迎首次访问&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jsp-入门学习\"><a class=\"anchor\" href=\"#jsp-入门学习\">#</a> JSP: 入门学习</h2>\n<ol>\n<li>概念：<br />\n* Java serve Pages: java 服务器端页面\n<ul>\n<li>了可以理解为：一个特殊的页面，其中既可以指定定义 html 标签，又可以定义 java 代码</li>\n<li>用于简化书写</li>\n</ul>\n</li>\n<li>原理：<br />\n* jsp 本质上就是一个 Servlet</li>\n<li>jsp 的脚本：JSP 定义 java 代码的格式：<br />\n1. &lt;% 代码 %&gt;：定义 java 的代码，在 service 方法中可以定义什么，该脚本中就可以定义什么。<br />\n2. &lt;%! 代码 %&gt; 定义的 java 代码，在 jsp 转化后的 java 类的成员位置。<br />\n3. &lt;%= 代码 %&gt;：定义的 java 代码，会输出到页面上。输出语句可以定义什么，该脚本中就可以定义什么</li>\n<li>JSP 的内置对象：<br />\n* 在 jsp 对象中不需要获取和创建，可以直接使用的对象<br />\n * JSP 中一共有 9 个内置对象<br />\n * 先学 3 个：\n<ul>\n<li>request</li>\n<li>response</li>\n<li>out：字符输出流对象。可以将数据输出到页面上。和 response.getWriter () 类似\n<ul>\n<li>response.getWriter () 和 out.write () 的区别\n<ul>\n<li>在 tomcat 服务器真正给客户端做出响应前，会先找到 response 缓冲区数据，再找 out 缓冲区。</li>\n<li>response.getWriter () 数据输出永远在 out.write () 之前，与代码位置没有关系。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"session-主菜\"><a class=\"anchor\" href=\"#session-主菜\">#</a> Session: 主菜</h2>\n<ol>\n<li>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</li>\n<li>快速入门：<br />\n1. 获取 HttpSession 对象：<br />\nHttpSession session = request.getSession();<br />\n2. 使用 HttpSession 对象：<br />\nObject getAttribute(String name);<br />\nvoid setAttribute(String name,Object value);<br />\nvoid removeAttribute(String name)<br />\n 3. 原理\n<ul>\n<li>Session 的实现是依赖于 Cookie 的。</li>\n</ul>\n</li>\n</ol>\n<pre><code>4. 细节：\n  1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？\n    * 默认情况下，不是\n    * 如果需要相同，则可以创建COokie，键为JESSIONID,设置最大存活时间，让cookie持久化保存。\n      Cookie c = new Cookie(&quot;JESSIONID&quot;,session.getID());\n      c.setMaxAge(60*60);\n      response.addCookie(c);\n  2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？\n    * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作：\n      * session的钝化：\n        * 在服务器正常关闭之前，将session对象系列硬化到硬盘上，\n      * session的活化：\n        * 在服务器启动后，将session文件转化为内存中的session对象即可。\n  3. session什么时候被销毁\n    1. 服务器关闭\n    2. session对象调用invalidate()。\n    3. session默认失效时间30分钟\n      选择性配置修改\n      &lt;session-config&gt;\n        &lt;session-timeout&gt;30&lt;/session-timeout&gt;\n      &lt;/session-config&gt;\n5. session的特点\n  1. session用于存储一次会话的多次请求的数据，存在服务器端\n  2. session可以存储任意数据类型，任意大小的数据\n\n  * session与Cookie的区别：\n    1. session存储数据在服务器端，Cookie在客户端\n    2. session没有数据大小限制。，cookie有\n    3. session数据安全，Cookie相对于不安全\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-sl&jstl/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-13-sl&jstl/",
            "title": "javaweb之sl&jstl",
            "date_published": "2021-11-26T17:22:09.527Z",
            "content_html": "<h1 id=\"今日内容\"><a class=\"anchor\" href=\"#今日内容\">#</a> 今日内容</h1>\n<pre><code>1. JSP:\n    1. 指令\n    2. 注释\n    3. 内置对象\n2. MVC开发模式\n3. EL表达式\n4. JSTL标签\n5. 三层架构\n</code></pre>\n<h2 id=\"jsp\"><a class=\"anchor\" href=\"#jsp\">#</a> JSP:</h2>\n<pre><code>1. 指令\n    * 作用：用于配置JSP页面，导入资源文件\n    * 格式：&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2...%&gt;\n    * 分类：\n        1. page：配置JSP页面的\n            * contentType:等同于response.setContentType()\n                1. 设置响应体的mime类型及字符级\n                2. 设置当前JSP页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）\n            * import: 导包\n            * errorPage: 当前页面发生异常后，会自动跳转到指定的错误页面\n            * isErrorPage；标识当前页面是否是错误页面\n                * true:是，可以使用内置对象exception\n                * false: 否。默认值。不可以使用内置对象exception\n        2. include:页面包含的。导入页面的资源文件\n            * &lt;%@include file=&quot;top.jsp&quot;%&gt;\n        3. taglib:导入资源\n          * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;\n              * prefix：前缀，自定义的\n2. 注释\n    1. html注释\n        &lt;!----&gt;只能注释html代码片段\n    2. jsp注释：推荐使用\n    &lt;%----%&gt;可以注释所有\n3. 内置对象\n    * 在jsp页面中不需要创建，直接使用的对象\n    * 一共有9个：\n              变量名                      真实类型\n          * pageContext                  PageContext\n          * request                      HttpServletRequest\n          * session                      HttpSession\n          * application                  ServletContext\n          * page                         OPbject\n          * response                     HttpServletResponse\n          * out                          JspWriter\n          * config                       ServletConfig\n          * exception                    Throwable\n</code></pre>\n<h2 id=\"开发模式\"><a class=\"anchor\" href=\"#开发模式\">#</a> 开发模式</h2>\n<pre><code>1. jsp演变历史\n    1. 早期只有servlet,只能使用response输出标签数据，非常麻烦\n    2. 后来又有JSP,简化了Servlet的开发，如果过度使用了jsp，在jsp中既写大量的java代码，又写html表，造成难于维护，难以分工协作\n    3. 再后来，java的web开发，借鉴MVC开发模式，使得程序的设计更加合理\n2. MVC\n    1. M:Model,模型。JavaBean\n        * 完成具体的业务操作，如：查询数据库，封装对象\n    2. V: View，视图。JSP\n    3. C: Controller,控制器。Servlet\n        * 获取用户的输入\n        * 调用模型\n        * 将数据交给视图展示\n    * 优缺点：\n        1. 优点：\n            1. 耦合性低，方便维护，利于分工协作\n            2. 重用性高\n        2. 缺点\n            1. 使得项目架构变得复杂，对开发人员要求高\n</code></pre>\n<h2 id=\"el表达式\"><a class=\"anchor\" href=\"#el表达式\">#</a> EL 表达式</h2>\n<pre><code>1. 概念：Expression Language  表达式语言\n2. 作用： 替换和简化jsp页面中java语言代码的编写\n3. 语法：$&#123;表达式&#125;\n4. 注意：\n    * jsp默认支持el表达式。如果要忽略el表达式\n        1. 设置jsp中page指令中:isElIgnored = &quot;true&quot; 忽略当前jsp页面中所有的el表达式\n        2. \\$&#123;表达式&#125;： 忽略当前这个el表达式\n</code></pre>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-11-Servlet&HTTP&Resuest/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaWEB/2021-7-11-Servlet&HTTP&Resuest/",
            "title": "JavaWEB之Servlet&HTTP&Request",
            "date_published": "2021-11-26T17:22:09.525Z",
            "content_html": "<h1 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h1>\n<h2 id=\"1概念\"><a class=\"anchor\" href=\"#1概念\">#</a> 1. 概念</h2>\n<p>Servlet（Server Applet）是 Java Servlet 的简称，称为小服务程序或服务连接器。</p>\n<p>狭义的 Servlet 是指 Java 语言实现的一个接口，<br />\n广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。</p>\n<h2 id=\"2步骤\"><a class=\"anchor\" href=\"#2步骤\">#</a> 2. 步骤</h2>\n<h2 id=\"3执行原理\"><a class=\"anchor\" href=\"#3执行原理\">#</a> 3. 执行原理</h2>\n<p>当服务器接收到浏览器客户的请求之后，会解析请求的 URL 路径，获取访问的 servlet 的资源路径，找到项目，查找 web.xml 文件，是否有对应的标签体内容，如果有，则找到对应的标签内的全类名，tomcat 会将字节码文件加载进内存，并且创建其对象，调用其方法。</p>\n<h2 id=\"4生命周期\"><a class=\"anchor\" href=\"#4生命周期\">#</a> 4. 生命周期</h2>\n<h3 id=\"被创建\"><a class=\"anchor\" href=\"#被创建\">#</a> 被创建：</h3>\n<p>执行 servlet 的 init () 方法 ， 只执行一次，说明 servlet 在内存中是单例的（多用户同时访问，可能存在线程安全问题，尽量不要在 servlet 中定义成员变量，即使定义了成员变量，也不要对其修改值），默认情况下，第一次被访问时被创建（可配置 servlet 的创建时期：值为负整数，第一次被访问时创建 / 值为 0 或者为正整数，则在服务器启动时创建</p>\n<h3 id=\"提供服务\"><a class=\"anchor\" href=\"#提供服务\">#</a> 提供服务：</h3>\n<p>执行 service（）方法，每次访问 servlet 时，service（）方法都会被调用一次。</p>\n<h3 id=\"被销毁\"><a class=\"anchor\" href=\"#被销毁\">#</a> 被销毁：</h3>\n<p>destory（）方法在 servlet 被销毁之前只执行一次，用于释放资源。服务器关闭时，servlet 被销毁。只有服服务器正常关闭时，才会执行 destory () 方法。</p>\n<h2 id=\"5servlet30注解配置\"><a class=\"anchor\" href=\"#5servlet30注解配置\">#</a> 5.Servlet3.0 注解配置</h2>\n<h3 id=\"什么是servlet30\"><a class=\"anchor\" href=\"#什么是servlet30\">#</a> 什么是 Servlet3.0</h3>\n<p>Servlet3.0 是 Java EE6 规范的一部分，Servlet3.0 提供了注解 (annotation)，使得不再需要在 web.xml 文件中进行 Servlet 的部署描述，简化开发流程。</p>\n<h3 id=\"开发servlet30程序的所需要的环境\"><a class=\"anchor\" href=\"#开发servlet30程序的所需要的环境\">#</a> 开发 Servlet3.0 程序的所需要的环境</h3>\n<p>开发 Servlet3.0 的程序需要一定的环境支持。MyEclipse10 和 Tomcat7 都提供了对 Java EE6 规范的支持。Tomcat 需要 Tomcat7 才支持 Java EE6，Tomcat7 需要使用 JDK1.6 以上的版本。<br />\n详细内容 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGRwLWdhY2wvcC80MjIyOTAyLmh0bWw=\">https://www.cnblogs.com/xdp-gacl/p/4222902.html</span>)</p>\n<h2 id=\"6servlet的体系结构\"><a class=\"anchor\" href=\"#6servlet的体系结构\">#</a> 6.Servlet 的体系结构</h2>\n<p>Servlet -- 接口<br />\n |<br />\nGenericServlet -- 抽象类<br />\n |<br />\nHttpServlet -- 抽象类</p>\n<h3 id=\"genericservlet将servlet接口中其他的方法做了默认空实现只将service方法作为抽象将来定义servlet类时可以继承genericservlet实现service方法即可\"><a class=\"anchor\" href=\"#genericservlet将servlet接口中其他的方法做了默认空实现只将service方法作为抽象将来定义servlet类时可以继承genericservlet实现service方法即可\">#</a> GenericServlet：将 Servlet 接口中其他的方法做了默认空实现，只将 service () 方法作为抽象，将来定义 Servlet 类时，可以继承 GenericServlet，实现 service () 方法即可</h3>\n<h3 id=\"httpservlet对http协议的一种封装简化操作\"><a class=\"anchor\" href=\"#httpservlet对http协议的一种封装简化操作\">#</a> HttpServlet：对 http 协议的一种封装，简化操作</h3>\n<h4 id=\"定义类继承httpservlet\"><a class=\"anchor\" href=\"#定义类继承httpservlet\">#</a> 定义类继承 HttpServlet</h4>\n<h4 id=\"复写dogetdopost方法\"><a class=\"anchor\" href=\"#复写dogetdopost方法\">#</a> 复写 doGet/doPost 方法</h4>\n<h1 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>Hyper Text Transfer Protocol 超文本传输协议</p>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<ul>\n<li>基于 TCP/IP 的高级协议</li>\n<li>默认端口号：80</li>\n<li>基于请求 / 响应模型的：一次请求对应一次响应</li>\n<li>无状态的：每次请求之间相互独立，不能交互数</li>\n</ul>\n<h3 id=\"版本\"><a class=\"anchor\" href=\"#版本\">#</a> 版本</h3>\n<p>1.0 版本：每一次连接都会建立新的连接<br />\n 1.1 版本：复用链接</p>\n<h2 id=\"请求消息数据格式\"><a class=\"anchor\" href=\"#请求消息数据格式\">#</a> 请求消息数据格式</h2>\n<h3 id=\"1请求行\"><a class=\"anchor\" href=\"#1请求行\">#</a> 1. 请求行</h3>\n<p>请求方式  请求 url      请求协议 / 版本<br />\n GET      /login.html  HTTP/1.1</p>\n<h4 id=\"http协议有7种请求方式常用的有2种\"><a class=\"anchor\" href=\"#http协议有7种请求方式常用的有2种\">#</a> HTTP 协议有 7 种请求方式，常用的有 2 种</h4>\n<h5 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> GET:</h5>\n<ul>\n<li>请求参数在请求行中，在 url 后</li>\n<li>请求的 url 长度有限制</li>\n<li>不太安全</li>\n</ul>\n<h5 id=\"post\"><a class=\"anchor\" href=\"#post\">#</a> POST：</h5>\n<ul>\n<li>请求参数在请求体中</li>\n<li>请求的 url 长度没有限制</li>\n<li>相对安全</li>\n</ul>\n<h3 id=\"2请求头-客户端告诉服务器一些信息\"><a class=\"anchor\" href=\"#2请求头-客户端告诉服务器一些信息\">#</a> 2. 请求头：客户端告诉服务器一些信息</h3>\n<p>请求头名称：请求头值</p>\n<h4 id=\"常见的请求头\"><a class=\"anchor\" href=\"#常见的请求头\">#</a> 常见的请求头</h4>\n<ul>\n<li>user-agent: 浏览器告诉服务器，我访问你使用的浏览器版本信息。可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li>\n<li>Referer: ：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9sb2dpbi5odG1s\">http://localhost/login.html</span><br />\n 告诉服务器，我 (当前请求) 从哪里来？</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo3</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\">// 获取请求头数据：user-agent</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token class-name\">String</span> agent <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user-agent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token comment\">// 判断 agent 的浏览器版本</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chrome\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token comment\">// 谷歌</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"谷歌.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Firefox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"火狐来了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用：</h5>\n<h6 id=\"防盗链\"><a class=\"anchor\" href=\"#防盗链\">#</a> 防盗链：</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo4</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\">// 演示获取请求头数据:reference</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token class-name\">String</span> refer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"referer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\">// 防盗链</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>refer<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/day14_servlet_http_request_war_exploded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">//                System.out.println (\"播放电影\");</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放电影\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                  <span class=\"token comment\">// 盗链</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">//                System.out.println (\"想看电影吗\");</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                  response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"想看电影吗\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"统计工作\"><a class=\"anchor\" href=\"#统计工作\">#</a> 统计工作：</h6>\n<h3 id=\"3请求空行\"><a class=\"anchor\" href=\"#3请求空行\">#</a> 3. 请求空行</h3>\n<p>空行，就是用于分割 POST 请求头和请求体的</p>\n<h3 id=\"4请求体正文\"><a class=\"anchor\" href=\"#4请求体正文\">#</a> 4. 请求体 (正文)</h3>\n<ul>\n<li>封装 POST 请求消息的请求参数</li>\n<li>字符串格式：</li>\n</ul>\n<pre><code>POST /login.html HTTP/1.1\nHost: localhost\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101\nFirefox/60.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nReferer: http://localhost/login.html\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nusername=zhangsan\n</code></pre>\n<h1 id=\"request\"><a class=\"anchor\" href=\"#request\">#</a> Request</h1>\n<h2 id=\"1request对象和response对象的原理\"><a class=\"anchor\" href=\"#1request对象和response对象的原理\">#</a> 1.request 对象和 response 对象的原理</h2>\n<h3 id=\"1request和response对象是由服务器创建的我们来使用它\"><a class=\"anchor\" href=\"#1request和response对象是由服务器创建的我们来使用它\">#</a> 1.request 和 response 对象是由服务器创建的，我们来使用它。</h3>\n<h3 id=\"2request对象是来获取请求消息response对象是来设置响应信息\"><a class=\"anchor\" href=\"#2request对象是来获取请求消息response对象是来设置响应信息\">#</a> 2.request 对象是来获取请求消息，response 对象是来设置响应信息</h3>\n<h2 id=\"2request对象继承体系结构\"><a class=\"anchor\" href=\"#2request对象继承体系结构\">#</a> 2.request 对象继承体系结构</h2>\n<pre><code>ServletRequest -- 接口\n\t| 继承\nHttpServletRequest -- 接口\n\t| 实现\norg.apache.catalina.connector.RequestFacade 类(tomcat)\n</code></pre>\n<h2 id=\"3request功能\"><a class=\"anchor\" href=\"#3request功能\">#</a> 3.request 功能</h2>\n<h3 id=\"1获取请求消息数据\"><a class=\"anchor\" href=\"#1获取请求消息数据\">#</a> 1 获取请求消息数据</h3>\n<h4 id=\"1获取请求行数据\"><a class=\"anchor\" href=\"#1获取请求行数据\">#</a> 1. 获取请求行数据</h4>\n<h5 id=\"get-day14demo1namezhangsan-http11\"><a class=\"anchor\" href=\"#get-day14demo1namezhangsan-http11\">#</a> GET /day14/demo1?name=zhangsan HTTP/1.1</h5>\n<p>方法：</p>\n<ul>\n<li>\n<p>获取请求方式 ：GET<br />\nString getMethod()</p>\n</li>\n<li>\n<p>获取虚拟目录：/day14</p>\n<p>String getContextPath()</p>\n</li>\n<li>\n<p>获取 Servlet 路径: /demo1<br />\nString getServletPath()</p>\n</li>\n<li>\n<p>获取 get 方式请求参数：name=zhangsan<br />\nString getQueryString()</p>\n</li>\n<li>\n<p>获取请求 URI：/day14/demo1<br />\nString getRequestURI(): /day14/demo1<br />\nStringBuffer getRequestURL() :<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==\">http://localhost/day14/demo1</span><br />\nURL: 统一资源定位符 ： <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==\">http://localhost/day14/demo1</span> 中华人民共和国<br />\n URI：统一资源标识符 : /day14/demo1 共和国</p>\n</li>\n<li>\n<p>获取协议及版本：HTTP/1.1<br />\nString getProtocol()</p>\n</li>\n<li>\n<p>获取客户机的 IP 地址：<br />\nString getRemoteAddr()</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         * GET</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         * /day14_servlet_http_request_war_exploded</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         * /requestDemo1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         * null</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         * /day14_servlet_http_request_war_exploded/requestDemo1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         * HTTP/1.1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         * 0:0:0:0:0:0:0:1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//1. 获取请求方式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//2. 获取虚拟路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> contextPath <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>contextPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//3. 获取 servlet 路径：/demo1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">String</span> servletPath <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getServletPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>servletPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//4. 获取 get 方式请求参数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> queryString <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queryString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//5. 获取请求 URI</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> requestURI <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//6. 获取协议及版本</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> protocol <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getProtocol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//7. 获取客户机的 ip 地址</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">String</span> remoteAddr <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>remoteAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2获取请求头数据\"><a class=\"anchor\" href=\"#2获取请求头数据\">#</a> 2. 获取请求头数据</h4>\n<pre><code>方法：\n* String getHeader(String name):通过请求头的名称获取请求头的值\n</code></pre>\n<p>Enumeration&lt;String&gt; getHeaderNames (): 获取所有的请求头名称</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 演示获取请求头数据:reference</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> refer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"referer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 演示获取请求头数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//1. 获取所有请求头名称</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headerNames <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaderNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>headerNames<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> headerNames<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"------\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3获取请求体数据\"><a class=\"anchor\" href=\"#3获取请求体数据\">#</a> 3. 获取请求体数据:</h4>\n<ul>\n<li>请求体：只有 POST 请求方式才有请求体，在请求体中封装了 POST 请求的请求参数</li>\n<li>步骤：\n<ol>\n<li>获取流对象\n<ul>\n<li>BufferedReader getReader ()：获取字符输入流，只能操作字符数据</li>\n<li>ServletInputStream getInputStream ()：获取字节输入流，可以操作所有类型数据案例：用户登录</li>\n<li>在文件上传知识点后讲解</li>\n</ul>\n</li>\n<li>再从流对象中拿数据</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"其它功能\"><a class=\"anchor\" href=\"#其它功能\">#</a> 其它功能</h2>\n<h3 id=\"1-获取请求参数通用方式不论get还是post请求方式都可以使用下列方法来获取请求参数\"><a class=\"anchor\" href=\"#1-获取请求参数通用方式不论get还是post请求方式都可以使用下列方法来获取请求参数\">#</a> 1. 获取请求参数通用方式：不论 get 还是 post 请求方式都可以使用下列方法来获取请求参数</h3>\n<h4 id=\"1-string-getparameterstring-name根据参数名称获取参数值-usernamezspassword123\"><a class=\"anchor\" href=\"#1-string-getparameterstring-name根据参数名称获取参数值-usernamezspassword123\">#</a> 1. String getParameter (String name): 根据参数名称获取参数值 username=zs&amp;password=123</h4>\n<h4 id=\"2-string-getparametervaluesstring-name根据参数名称获取参数值的数组\"><a class=\"anchor\" href=\"#2-string-getparametervaluesstring-name根据参数名称获取参数值的数组\">#</a> 2. String [] getParameterValues (String name): 根据参数名称获取参数值的数组</h4>\n<p>hobby=xx&amp;hobby=game</p>\n<h4 id=\"3-enumerationstring-getparameternames获取所有请求的参数名称\"><a class=\"anchor\" href=\"#3-enumerationstring-getparameternames获取所有请求的参数名称\">#</a> 3. Enumeration&lt;String&gt; getParameterNames (): 获取所有请求的参数名称</h4>\n<h4 id=\"4-mapstringstring-getparametermap获取所有参数的map集合\"><a class=\"anchor\" href=\"#4-mapstringstring-getparametermap获取所有参数的map集合\">#</a> 4. Map&lt;String,String []&gt; getParameterMap (): 获取所有参数的 map 集合</h4>\n<ul>\n<li>中文乱码问题：</li>\n<li>get 方式：tomcat 8 已经将 get 方式乱码问题解决了</li>\n<li>post 方式：会乱码</li>\n<li>解决：在获取参数前，设置 request 的编码 request.setCharacterEncoding (&quot;utf-8&quot;);</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Enumeration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestDemo6</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 获取参数通用方式：不论是 get 方式还是 Post 方式都可以使用下列方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//post 获取请求参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//post 请求中文乱码问题</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1. 设置流的编码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 根据参数名获取参数值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//        System.out.println(\"post\");</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        System.out.println(username);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 根据参数名获取参数值的数组</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hobbies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterValues</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hobby\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//        for (String hobby:hobbies</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//             ) &#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//            System.out.println(hobby);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> parameterNames <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//        while(parameterNames.hasMoreElements())&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//            String name = parameterNames.nextElement();</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//            System.out.println(name);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//            String value = request.getParameter(name);</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//            System.out.println(value);</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//            System.out.println(\"------------------------------\");</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 获取所有参数 map 集合</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> parameterMap <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySets <span class=\"token operator\">=</span> parameterMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token operator\">:</span>keySets</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>             <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values <span class=\"token operator\">=</span> parameterMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token operator\">:</span>values</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">//get 获取请求参数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">//        String username = request.getParameter(\"username\");</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">//        System.out.println(\"get\");</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">//        System.out.println(username);</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2-请求转发一种在服务器内部的资源跳转方式\"><a class=\"anchor\" href=\"#2-请求转发一种在服务器内部的资源跳转方式\">#</a> 2. 请求转发：一种在服务器内部的资源跳转方式</h3>\n<h4 id=\"1-步骤\"><a class=\"anchor\" href=\"#1-步骤\">#</a> 1. 步骤：</h4>\n<ul>\n<li>通过 request 对象获取请求转发器对象：RequestDispatcher<br />\ngetRequestDispatcher(String path)</li>\n<li>使用 RequestDispatcher 对象来进行转发：forward (ServletRequest request,<br />\nServletResponse response)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/requestDemo8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"2特点\"><a class=\"anchor\" href=\"#2特点\">#</a> 2. 特点：</h4>\n<ul>\n<li>浏览器地址栏路径不发生变化</li>\n<li>只能转发到当前服务器内部资源中。</li>\n<li>转发是一次请求<br />\n ###3. 共享数据：</li>\n</ul>\n<ul>\n<li>域对象：一个有作用范围的对象，可以在范围内共享数据</li>\n<li>request 域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li>\n</ul>\n<h4 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法：</h4>\n<ul>\n<li>\n<p>void setAttribute (String name,Object obj): 存储数据</p>\n</li>\n<li>\n<p>Object getAttitude (String name): 通过键获取值</p>\n</li>\n<li>\n<p>void removeAttribute (String name): 通过键移除键值对</p>\n</li>\n<li>\n<p>获取 ServletContext：</p>\n<ul>\n<li>ServletContext getServletContext()</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "Java JavaWEB"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaSE/2021-7-8-java%E6%A0%B8%E5%BF%83%E5%8D%B7%E4%B8%80%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/java/JavaSE/2021-7-8-java%E6%A0%B8%E5%BF%83%E5%8D%B7%E4%B8%80%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/",
            "title": "java核心卷一第四章对象与类",
            "date_published": "2021-11-26T17:22:09.515Z",
            "content_html": "<p>##4.3<br />\n###4.3.1 Employee 类 （后续未说明都以 Employee 类为例）<br />\n文件名必须与 public 类的名字相匹配。在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类。<br />\n###4.3.2<br />\n 关键字 public 意味着任何类的任何方法都可以调用这些方法（共有四种访问级别，将在后续内容介绍）。<br />\n关键字 private 确保只有 Employ 类自身的方法能够访问这些实例字段，而其它类的方法不能够读写这些字段。</p>\n<p>###4.3.4 从构造器开始</p>\n<ul>\n<li>\n<p>构造器与类同名</p>\n</li>\n<li>\n<p>构造器可以有 0 个、1 个、或多个参数</p>\n</li>\n<li>\n<p>构造器没有返回值</p>\n</li>\n<li>\n<p>构造器总是伴随着 new 操作一起调用<br />\n注意事项：请注意，不要在构造器中，定义与实例字段同名的局部变量。例如，下面的构造器将不会设置 salary。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span><span class=\"token comment\">//ERROR</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">double</span> salary <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ERROR</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个构造器声明了局部变量 name 和 salary。这些变量只能在构造器内部访问。这下变量会遮蔽（shadow）<br />\n同名的实例字段。有些程序员偶尔会不假思索地写出这类代码，这种错误很难检查出来，<br />\n必须注意在所有的方法中都不要使用与实例字段同名的变量。</p>\n</li>\n</ul>\n<p>###4.3.5 用 var 声明局部变量<br />\n在 java10 中，如果可以从变量的初始值推导出他们的类型，那么可以用 var 关键字声明局部变量，而无需指定类型。<br />\n例如，可以不这样声明：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Employee</span> harry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Harry hacker\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">,</span><span class=\"token number\">1989</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>只需要以下代码：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> harry <span class=\"token operator\">=</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Harry hacker\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1989</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>倘若无需了解任何Java API就能下从等好右边明显看出类型，在这种情况下我们都将使用var表示法。\n不过我们不会对数字类型使用var,如int,long或者是double,使你不用当心0、0L和0.0之间的区别。\n对Java API有了更多使用经验之后，你可能会希望更多地使用var关键字。\n</code></pre>\n<p>注意 var 关键字只能用于方法中的局部变量。参数和字段的类型必须声明。</p>\n<p>###3.3.6 使用 null 引用<br />\n如果对 null 值使用了一个方法，会产生一个 NullPointerEcception 异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> birthday <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> birthday<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//NullPointerException</span></pre></td></tr></table></figure><pre><code>这是一个很严重的错误，类似于“索引越界”异常。\n如果你的程序没有捕获异常，程序就会终止。\n对此有两种解决方法。“宽容型”方法是把null参数转化为一个适当的null值：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"unknow\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 java9 中，Objects 类对此提供了一个便利方法：</p>\n",
            "tags": [
                "Java JavaSE"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%BB%84%E4%BB%B6/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%BB%84%E4%BB%B6/",
            "title": "React的组件",
            "date_published": "2021-11-26T17:22:09.510Z",
            "content_html": "<h1 id=\"react的组件\"><a class=\"anchor\" href=\"#react的组件\">#</a> React 的组件</h1>\n<h2 id=\"组件的声明方式\"><a class=\"anchor\" href=\"#组件的声明方式\">#</a> 组件的声明方式</h2>\n<p>在 React 中创建组件的方式有 3 种：</p>\n<ul>\n<li>ES5 写法：React.createClass ()(老版本用法，不建议使用)</li>\n<li>ES6 写法：React.Component;</li>\n<li>无状态的函数式写法，又称为纯组件 SFC</li>\n</ul>\n<h3 id=\"es5写法reactcreateclass\"><a class=\"anchor\" href=\"#es5写法reactcreateclass\">#</a> ES5 写法：React.createClass ()</h3>\n<p>React.createClass () 方法创建一个组件类，它接受一个对象为参数，对象中必须声明一个 render () 方法，render () 方法将返回一个组件实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 定义传入 props 中的各种属性类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    propTypes<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        initialValue<span class=\"token operator\">:</span>React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 组件默认的 props 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    defaultProps<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        initialValue<span class=\"token operator\">:</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 设置 initial state</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            text<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialValue<span class=\"token operator\">||</span><span class=\"token string\">'placeholder'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function-variable function\">handleChange</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            text<span class=\"token operator\">:</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        \t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            \tType something<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">&#125;</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>createClass () 本质上是一个工厂函数，传递给它的是一个・Object。通过 propTypes 对象和 getDefaultProps () 方法来设置 props 类型和获取 props。createClass（）方法会正确绑定 this 到 React 类的实例上。</p>\n<h3 id=\"es6写法reactcomponent\"><a class=\"anchor\" href=\"#es6写法reactcomponent\">#</a> ES6 写法：React.Component</h3>\n<p>React.Component 是以 ES6 的形式来创建组件的这是 React 目前极为推荐的创建有效动态组件的方式。</p>\n<p>实例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Input</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Reqact<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>pprops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 设置 initial state</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t text<span class=\"token operator\">:</span>props<span class=\"token punctuation\">.</span>initialValue <span class=\"token operator\">||</span> <span class=\"token string\">'placeholder'</span>       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token comment\">// ES6 中的函数必须手动绑定</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            text<span class=\"token operator\">:</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        \t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            \tType something<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            \t<span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">&#125;</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>React.Component 创建的组件，函数成员不会自动绑定 this，需要开发者手动绑定，否则 this 无法获取当前组件的实例对象</strong></p>\n<p>其它绑定方法：</p>\n<ul>\n<li>通过箭头函数来绑定 this 示例：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 arrow function 绑定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>在方法中直接用 bind (this) 来绑定</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"无状态组件\"><a class=\"anchor\" href=\"#无状态组件\">#</a> 无状态组件</h3>\n<p>如果一个组件不需要管理 state，只是单纯展示，那么就可以定义成无状态组件。这种方式声明的组件可读性好，大大减少了代码量。无状态函数式组件可以搭配箭头函数来写，更简洁，它没有 React 的生命周期和内部 state。</p>\n<p>无状态函数式组件示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HelloComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span> <span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>HelloComponent name <span class=\"token operator\">=</span> <span class=\"token string\">\"marlon\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>mountNode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>无状态函数式组件在需要生命周期时，可以搭配高阶组件 (HOC) 来实现。无状态组件组为高阶组建的参数，高阶组件内存存放需要的生命周期和状态，其它只负责展示的组件都使用无状态式的组件来写：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Table</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">composedComponent</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">componentDidmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ComponentDidmount'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            \t<span class=\"token operator\">&lt;</span>ComposedComponent <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"组件的主要成员\"><a class=\"anchor\" href=\"#组件的主要成员\">#</a> 组件的主要成员</h2>\n<p>在 react 中，数据流是单方向流动的，从父节点向子节点传递（自上而下）。子组件可以通过属性 props 接收来自父组件的状态，然后在人的人（）方法中渲染到页面。每个组件同时又拥有了属于自己内部的状态 state，当父组件的某个属性发生变化时，React 会将此改变了的状态向下递归遍历组件树，然后触发相应的子组件重新渲染（re-render）。</p>\n<p>如果把组件视为一个函数，那么 props 就是从外部传入的参数，而 state 可以视为函数内部的参数，最后函数返回虚拟 DOM。</p>\n<h3 id=\"状态\"><a class=\"anchor\" href=\"#状态\">#</a> 状态</h3>\n<p>​\t\t每个 React 组件都有自己的状态，相比于 props，state 只存在于组件自身内部，用来影响仕途的展示。可以使用 React 内置的 setState（）方法修改 state, 每当使用 setState () 时，React 会将需要更新的 state 合并后放入状态序列，触发调和过程（Reconciliation）, 而不是立即更新 state, 然后根据新的装阿泰结构重新渲染 UI 界面，最后 React 会根据差异对界面进行最小化进行重新渲染。</p>\n<p>​\t\tReact 通过 this.state 访问状态，调用 this.setState () 方法来修改状态。</p>\n<h3 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h3>\n<p>​\t\tstate 是组件内部的状态，那么组件之间如何通信呢？这就是 props 的职责所在了。通俗来说，props 就是连接各个组件信息互通的桥梁。React 本身是单向数据流，所以在 props 中数据的流向非常直观，并且 props 是不可改变的。props 的值只能从默认属性和父组件中传递过来，如果尝试修改 props，React 将会爆出类型错误的提示。</p>\n<h2 id=\"组件之间的通信\"><a class=\"anchor\" href=\"#组件之间的通信\">#</a> 组件之间的通信</h2>\n<h2 id=\"组件的生命周期\"><a class=\"anchor\" href=\"#组件的生命周期\">#</a> 组件的生命周期</h2>\n",
            "tags": [
                "前端 React"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%89%B9%E5%BE%81/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/React/2021-9-16-React%E7%9A%84%E7%89%B9%E5%BE%81/",
            "title": "",
            "date_published": "2021-11-26T17:22:09.508Z",
            "content_html": "<p>React 具有三大突出特点：组件化、虚拟 DOM 和单向数据流。</p>\n<ul>\n<li>\n<p>组件化</p>\n<p>React 书写的一切用户界面都是基于组件的。组件具有良好的封装性，可以重复使用，减少大量重复、多余的代码，并且方便迭代维护。</p>\n<p>简单的组件示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> react<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> render <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Class MyComponent <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        \t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            \tHello<span class=\"token punctuation\">,</span><span class=\"token constant\">I</span> am <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        \t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自定义组件后，在其他需要使用这个组件的地方就可以像使用 HTML 标签一样使用：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> render <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> MyComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./myComponent'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>MyComponent name<span class=\"token operator\">=</span><span class=\"token string\">'Jack'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>             <span class=\"token comment\">//name 是自定义组件的属性</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>虚拟 DOM</p>\n<p>先了解一下什么是 DOM, 什么又是虚拟 DOM。</p>\n</li>\n<li>\n<p>单向数据流</p>\n</li>\n</ul>\n",
            "tags": [
                "前端 React"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/2021-9-15-ES6%E7%89%B9%E6%80%A7/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/front-end/2021-9-15-ES6%E7%89%B9%E6%80%A7/",
            "title": "ES6特性",
            "date_published": "2021-11-26T17:22:09.505Z",
            "content_html": "<h1 id=\"es6特性\"><a class=\"anchor\" href=\"#es6特性\">#</a> ES6 特性</h1>\n<h2 id=\"1变量声明let和const\"><a class=\"anchor\" href=\"#1变量声明let和const\">#</a> 1. 变量声明 let 和 const</h2>\n<p>​\t    ES6 之前，通常用 var 关键字来声明变量。无论在何处声明，都会被视为在所在函数作用域最顶部（变量提升）。相比于使用 var 来声明变量，使用 let 和 const 声明变量带来了以下好处：</p>\n<ul>\n<li>\n<p>可以解决 ES5 使用 var 初始化变量会出现的变量提升问题。</p>\n</li>\n<li>\n<p>可以解决使用闭包时出错的问题。</p>\n</li>\n<li>\n<p>ES5 只有全局作用域和函数作用域，没有块级作用域。</p>\n</li>\n<li>\n<p>可以解决实用计数的 for 循环变量时会导致泄露为全局变量的问题。</p>\n<ol>\n<li>let 命令表示被声明的变量值在作用域内生效。比如：</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token comment\">// 报错 ReferenceError</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>b <span class=\"token comment\">// 2</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>对于 let 来说，不存在变量提升</li>\n</ol>\n<p>在一般的代码逻辑中，变量应该是定义后才会使用，但 var 的变量提升却可以先使用再定义。而 let 声明的变量再使用前必须声明后才能使用，不然就报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cosnole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 报错 ReferenceError</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>let 不允许重复声明，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在代码块内，使用 let 声明变量前，该变量都是不可用的（不可访问、不可赋值等）。在语法上。这被称为 “暂时性死区”（Temporal Dead Zone,TDZ）。</p>\n<p><strong>注意：</strong> 暂时性死区就是只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取。只有等到声明的那一行代码出现，才可以获取和使用该变量。例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//TDZ 开始，不可访问，不可赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    temp <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>  <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//TDZ 结束</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出 undefined, 可访问</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    temp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 可赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 1，访问</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 ES5 中，变量提升可能还会导致内层变量覆盖外层变量，比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure></li>\n<li>\n<p>let 还引入了块级作用于的概念，传统 ES5 中不存在块级作用域。假如没有块级作用域，还有可能碰到这种问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">,</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Uncaught ReferenceError: i is not defined</span></pre></td></tr></table></figure></li>\n<li>\n<p>块级作用域可以使内层作用域跟外层同名的变量名，比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>const 用于声明只读的变量，一旦声明就不能改变。和 let 一样，const 存在块级作用域，不存在变量提升，存在暂时性死区和不可重复声明。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-解构赋值\"><a class=\"anchor\" href=\"#2-解构赋值\">#</a> 2. 解构赋值</h2>\n<p>​\t按照一定模式从数组或对象中提取值，对变量进行赋值，叫做解构赋值。（Destructuring）</p>\n<p>​\t<strong>注意：</strong>  解构赋值的对象是数组或对象，作用是赋值</p>\n<ul>\n<li>用于对象的解构赋值示例：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sex<span class=\"token operator\">:</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> cat'</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  Tom,male,3</span></pre></td></tr></table></figure><p>​\t\t传统写法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sex<span class=\"token operator\">:</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> sex <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>对象结构也可以指定默认值：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b  <span class=\"token comment\">// 2</span></pre></td></tr></table></figure><p>解构失败时，变量的值为 undefined：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a   <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><p>数组的解构赋值：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c  <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>x  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>y  <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e  <span class=\"token comment\">// \"hello\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>f  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>g  <span class=\"token comment\">// []</span></pre></td></tr></table></figure><p>如果结构失败将会赋值为 undefined，如果等号右边是不可遍历结构也会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>数组解构赋值同样也允许默认值：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a  <span class=\"token comment\">// [1,2,3]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x  <span class=\"token comment\">// x=\"a\", y=\"hi\"</span></pre></td></tr></table></figure><h2 id=\"3拓展运算符spread\"><a class=\"anchor\" href=\"#3拓展运算符spread\">#</a> 3. 拓展运算符 (spread) ...</h2>\n<p>​\t拓展运算符 (spread) 是三个点（...）。可以将他比作 rest 参数的逆运算，将一个数组转为用逗号分隔开的参数序列。下面来看看它有哪些作用：</p>\n<ol>\n<li>合并数组。</li>\n</ol>\n<p>在 ES5 中要合并两个数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ES6 使用拓展运算符：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//  [1,2,3,4]</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>与解构赋值结合：</li>\n</ol>\n<p>拓展运算符可以和解构赋值相结合用于生成新数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>arr1<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr1   <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr2   <span class=\"token comment\">// [2,3,4]</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>函数调用（替代 apply () 方法）。</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cosnt num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 11</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//ES6</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述代码使用拓展运算符将一个数组变为参数序列。当然，拓展运算符也可以和普通函数参数相结合使用，非常灵活，比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token operator\">+</span>d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cosnt num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>num<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 11</span></pre></td></tr></table></figure><p>拓展运算符中的表达式如下：</p>\n<pre><code class=\"language-avascript\">[...(true?[1,2]:[3]),'a'];          // [1,2,'a']\n</code></pre>\n<h2 id=\"4箭头函数\"><a class=\"anchor\" href=\"#4箭头函数\">#</a> 4. 箭头函数</h2>\n<p>ES6 对与函数的拓展中增加了箭头函数 =&gt;, 用于对函数的定义。</p>\n<p>箭头函数语法很简单，先定义自变量，然后是箭头和函数主体。箭头函数相当于匿名函数并简化了函数定义。</p>\n<p>不引入参数的箭头函数示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 圆括号代表参数部分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>引入参数的箭头函数示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单个参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span><span class=\"token operator\">=></span>value<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 可以不给参数 value 加小括号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 多个参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>花括号内的函数主体部分写法基本等同于传统函数写法。</p>\n<p><strong>注意:</strong> 如果箭头函数内要返回自定义对象，需要用小括号把对象括起来。例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    id<span class=\"token operator\">:</span>id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    title<span class=\"token operator\">:</span><span class=\"token string\">'Awesome React'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        id<span class=\"token operator\">:</span>id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        title<span class=\"token operator\">:</span><span class=\"token string\">'Awesome React'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t箭头函数与传统的 JavaScript 函数主要区别有以下：</p>\n<ul>\n<li>箭头函数内置 this 不可改变；</li>\n<li>箭头函数不能使用 new 关键字来实例化对象</li>\n<li>箭头函数没有 arguments 对象，无法通过 arguments 对象访问传入的参数。</li>\n</ul>\n<p>箭头函数看似匿名函数的简写，但与匿名函数有明显区别，箭头函数内部的 this 是词法作用域，由上下文确定。如果使用了箭头函数，就不能对 this 进行修改，所以用 call () 或 apply () 调用箭头函数时都无法对 this 进行绑定，传入的第一个参数会被忽略。</p>\n<p><strong>注意：</strong> 词法作用域是定义在词法阶段的作用域，它在代码书写的时候就已经确定了。</p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "http://zhanglin233.github.io/2021/11/27/computer-science/blog/hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "url": "http://zhanglin233.github.io/2021/11/27/computer-science/blog/hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "title": "基于hexo框架部署个人博客",
            "date_published": "2021-11-26T17:22:09.498Z",
            "content_html": "<h1 id=\"基于hexo框架部署个人博客\"><a class=\"anchor\" href=\"#基于hexo框架部署个人博客\">#</a> 基于 hexo 框架部署个人博客</h1>\n<h2 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h2>\n<p>之前我的博客是基于 jekyll 搭建的，但是 jekyll 模板搭建出来的博客的样式我并不是喜欢，所以在前天看到是室友打算用 hexo 搭建博客的时候，发现效果挺好的，所以转而把博客迁移到 hexo 上来。</p>\n<h2 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<h3 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> git</h3>\n<p>因为最终是把生成的页面提交到 github 上的免费私有仓库，所以 git 环境是必不可少的，网上有关 git 安装教程很多，就不一一赘述，查询当前设备的 git 环境，在控制台输入 git -v, 得到 git 版本信息即说明 git 环境已装好。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> --version</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127143705.png\" alt=\"\" /></p>\n<h3 id=\"node\"><a class=\"anchor\" href=\"#node\">#</a> node</h3>\n<p>开发过程中需要安装较多依赖的插件，使用 npm 包管理工具来管理这些插件。具体安装步骤网上查询即可。</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127145223.png\" alt=\"\" /></p>\n<h3 id=\"hexo\"><a class=\"anchor\" href=\"#hexo\">#</a> hexo</h3>\n<p>如果电脑已经具备了 git 和 node 环境，安装 hexo 非常简单</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo -g</pre></td></tr></table></figure><p>建议加上 -g 将 hexo 设为全局环境变量</p>\n<p>查看 hexo 版本信息</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127145634.png\" alt=\"\" /></p>\n<p>能得到以上信息就说明安装成功。</p>\n<h2 id=\"开始本地部署\"><a class=\"anchor\" href=\"#开始本地部署\">#</a> 开始本地部署</h2>\n<p>此次博客部署参考了 https://shoka.lostyu.me/。</p>\n<h3 id=\"初始化文件夹\"><a class=\"anchor\" href=\"#初始化文件夹\">#</a> 初始化文件夹</h3>\n<p>选择一个文件夹用来部署你的博客。我的文件夹所在地：</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127150222.png\" alt=\"\" /></p>\n<p>接下来在终端中进入你博客的文件路径，分别输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr></table></figure><p>进行初始化，使其能够运行 hexo 和 git 命令。（接下来所有操作都是在此路径下进行）</p>\n<h3 id=\"下载模板\"><a class=\"anchor\" href=\"#下载模板\">#</a> 下载模板</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cd your-blog</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><h3 id=\"安装依赖插件\"><a class=\"anchor\" href=\"#安装依赖插件\">#</a> 安装依赖插件</h3>\n<h4 id=\"安装yarn\"><a class=\"anchor\" href=\"#安装yarn\">#</a> 安装 yarn</h4>\n<p>直接使用 npm 下载可能存在下载速率过慢的问题，可以使用 yarn 依赖插件。</p>\n<pre><code>npm install yarn\n</code></pre>\n<h4 id=\"安装项目所需依赖\"><a class=\"anchor\" href=\"#安装项目所需依赖\">#</a> 安装项目所需依赖</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># md 文件渲染器，压缩 css/js/html</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-renderer-multi-markdown-it -s </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 给生成的 css 文件们添加浏览器前缀</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-autoprefixer -s</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#站内搜索功能</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-algoliasearch -s</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 文章或站点字数及阅读时间统计\t</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-symbols-count-time -s</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 生成 Feed 文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-feed -s</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 将生成页面提交到远程仓库所需的依赖</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-deployer-git -s</pre></td></tr></table></figure><h3 id=\"基本配置\"><a class=\"anchor\" href=\"#基本配置\">#</a> 基本配置</h3>\n<p>基本配置为 blog 所在路径下的_config.yml 文件，各个配置什么作用注释应该挺清楚的，就不一一解释，如还有不清楚的可以查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">原作者的博客</span>。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Hexo Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: http://hexo.io/docs/configuration.html</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Source: https://github.com/hexojs/hexo/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Hexo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> subtitle</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> 描述123</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> 关键词1<span class=\"token punctuation\">,</span>关键词2 <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> John Doe</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN <span class=\"token comment\"># 这里只可以选 zh-CN、zh-HK、zh-TW、ja、en 这几个格式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Asia/Shanghai'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//yoursite.com</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title/ <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">permalink_defaults</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Directory</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key atrule\">source_dir</span><span class=\"token punctuation\">:</span> source</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key atrule\">public_dir</span><span class=\"token punctuation\">:</span> public</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> tags</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key atrule\">archive_dir</span><span class=\"token punctuation\">:</span> archives</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> categories</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">code_dir</span><span class=\"token punctuation\">:</span> downloads/code</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key atrule\">i18n_dir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>lang</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key atrule\">skip_render</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># Writing</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token key atrule\">new_post_name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title.md <span class=\"token comment\"># File name of new posts</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key atrule\">default_layout</span><span class=\"token punctuation\">:</span> post</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key atrule\">titlecase</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Transform title into titlecase</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">external_link</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Open external links in new tab</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> site <span class=\"token comment\"># Apply to the whole site</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token key atrule\">filename_case</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token key atrule\">render_drafts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token key atrule\">post_asset_folder</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">relative_link</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key atrule\">future</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># Category &amp; Tag</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token key atrule\">default_category</span><span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token key atrule\">计算机科学</span><span class=\"token punctuation\">:</span> computer<span class=\"token punctuation\">-</span>science</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token key atrule\">Java</span><span class=\"token punctuation\">:</span> java</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token key atrule\">二进制杂谈</span><span class=\"token punctuation\">:</span> note</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token key atrule\">零基础学Java语言-浙江大学-翁恺</span><span class=\"token punctuation\">:</span> course<span class=\"token punctuation\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token key atrule\">Theme Shoka Documentation</span><span class=\"token punctuation\">:</span> theme<span class=\"token punctuation\">-</span>shoka<span class=\"token punctuation\">-</span>doc</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token key atrule\">tag_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\"># Date / Time format</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">## Hexo uses Moment.js to parse and display date</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">## You can customize the date format as defined in</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">## http://momentjs.com/docs/#/displaying/format/</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token key atrule\">date_format</span><span class=\"token punctuation\">:</span> YYYY<span class=\"token punctuation\">-</span>MM<span class=\"token punctuation\">-</span>DD</pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token key atrule\">time_format</span><span class=\"token punctuation\">:</span> HH<span class=\"token punctuation\">:</span>mm<span class=\"token punctuation\">:</span>ss</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\"># Pagination</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">## Set per_page to 0 to disable pagination</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token key atrule\">pagination_dir</span><span class=\"token punctuation\">:</span> page</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">## Plugins: http://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">## Themes: http://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">## Docs: http://hexo.io/docs/deployment.html</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'*.min.css'</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\"># algolia:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">#   appId:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token comment\">#   apiKey:</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token comment\">#   adminApiKey:</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token comment\">#   chunkSize: 5000</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token comment\">#   indexName:</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token comment\">#   fields:</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token comment\">#     - title #必须配置</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">#     - path #必须配置</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token comment\">#     - categories #推荐配置</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token comment\">#     - content:strip:truncate,0,4000</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token comment\">#     - gallery</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token comment\">#     - photos</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token comment\">#     - tags</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token key atrule\">atom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token key atrule\">jsonFeed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"feed.json\"</span></pre></td></tr></table></figure><h3 id=\"项目配置\"><a class=\"anchor\" href=\"#项目配置\">#</a> 项目配置</h3>\n<p>项目配置文件为 themea/shoka 文件夹中的_config.yml 文件</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">alternate</span><span class=\"token punctuation\">:</span> Yume Shoka</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Assets</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#//cdn.jsdelivr.net/gh/amehime/shoka@latest/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">open_graph</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">#twitter_id:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">#google_plus:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">#fb_admins:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">#fb_app_id:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> home</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">archives</span><span class=\"token punctuation\">:</span> /archives/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> list<span class=\"token punctuation\">-</span>alt</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">friends</span><span class=\"token punctuation\">:</span> /friends/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> heart</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Social Links</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Usage: `Key: permalink || icon || color`</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Key is the link label showing to end users.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Value before `||` delimiter is the target permalink,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># secend value is the name of Font icon.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">#google: https://plus.google.com/yourname || google</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token key atrule\">twitter</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//twitter.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> twitter <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#00aff0\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token key atrule\">zhihu</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.zhihu.com/people/rurismzk <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> zhihu <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#1e88e5\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token key atrule\">music</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/user/home?id=12886823 || cloud-music || \"#e60026\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token key atrule\">weibo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//weibo.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> weibo <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#ea716e\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token key atrule\">about</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//about.me/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> address<span class=\"token punctuation\">-</span>card <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#3b5998\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">#email: mailto:yourname@mail.com || envelope || \"#55acd5\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">#facebook: https://www.facebook.com/yourname || facebook</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">#youtube: https://youtube.com/yourname || youtube</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">#instagram: https://instagram.com/yourname || instagram</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">#skype: skype:yourname?call|chat || skype</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">#douban: https://www.douban.com/people/yourname/ || douban</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\"># Specify the date when the site was setup. If not defined, current year will be used.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token key atrule\">since</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2010</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># Third Party Plugins &amp; Services Settings</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\"># Comments</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># Valine</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里不要忘了改</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里不要忘了改</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token comment\"># - deea5a8d259d17182a53be1772e4c182</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token punctuation\">-</span> deea5a8d259d17182a53be1772e4c182</pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># bgm</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表1</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2943811283</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2297706586</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表2</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2031842656</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\"># Dependencies: https://github.com/amehime/hexo-renderer-multi-markdown-it</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token key atrule\">pangu</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\"># analytics &amp; SEO Settings</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\"># Disable Baidu transformation on mobile devices.</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token key atrule\">disable_baidu_transformation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token key atrule\">exturl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><h3 id=\"显示文章\"><a class=\"anchor\" href=\"#显示文章\">#</a> 显示文章</h3>\n<p>需展示的文章应为 markdown 文件，放于 yourBlog/source/_post 目录下，如我的博客位于问价夹下 D:\\blog\\myBlog2, 则文章位于 D:\\blog\\myBlog2\\source_posts 问价夹下，其它细节配置参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">界面展示</span></p>\n<h3 id=\"本地启动项目\"><a class=\"anchor\" href=\"#本地启动项目\">#</a> 本地启动项目</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo s</pre></td></tr></table></figure><p>启动项目即可</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS D:<span class=\"token punctuation\">\\</span>blog<span class=\"token punctuation\">\\</span>myBlog<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> hexo s   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>INFO  Validating config</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INFO  Start processing</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Prism<span class=\"token string\">'s Diff Highlight plugin requires the Diff language definition (prism-diff.js).Make sure the language definition is loaded or use Prism'</span>s Autoloader plugin.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INFO  Hexo is running at http://localhost:4000 <span class=\"token builtin class-name\">.</span> Press Ctrl+C to stop.</pre></td></tr></table></figure><p>出现以上信息即为启动成功，前往 http://localhost:4000 即可查看效果。</p>\n<h2 id=\"将博客部署到github上\"><a class=\"anchor\" href=\"#将博客部署到github上\">#</a> 将博客部署到 github 上</h2>\n<p>首先在根目录下配置一下信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'git'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 https://github/yourname/yourname.github.io</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 项目所在的分支</span></pre></td></tr></table></figure><p>依次运行以下的命令</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 清楚本地缓存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 重新生成并提交到远端仓库 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hexo g <span class=\"token punctuation\">-</span>d  <span class=\"token comment\"># 相当于 hexo generate 及 hexo dep</span></pre></td></tr></table></figure><p>如果没有发生错误你就可以在你的 gihub 仓库上看到提交的内容了</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127154035.png\" alt=\"\" /></p>\n<p>在浏览器中查看效果</p>\n<h2 id=\"遇到的坑\"><a class=\"anchor\" href=\"#遇到的坑\">#</a> 遇到的坑</h2>\n<h3 id=\"按照heox官方文档推荐的部署到github上失败\"><a class=\"anchor\" href=\"#按照heox官方文档推荐的部署到github上失败\">#</a> 按照 heox 官方文档推荐的部署到 github 上失败</h3>\n<p>官方推荐<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZ2l0aHViLXBhZ2Vz\">将 Hexo 部署到 GitHub Pages | Hexo</span></p>\n<p>本人惨痛的教训建议不要按照官方步骤来，官方的太麻烦了而且还有给的步骤还有问题，反正我是没弄出来。</p>\n<p>官方的意思是使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL3RyYXZpcy1jaQ==\">Travis CI</span> 能够动态监听代码上传并将生成的页面文件提交到与项目代码文件不同的分支下。</p>\n<p>为了达到与官方类似的效果，我们只需要新建一个仓库用于存放整体项目文件（按照本文章的上述步骤，yourname.github.io 仓库只会存放生成的页面文件，即运行 hexo g 命令后生成的 publi 文件夹之中的内容），并将该项目绑定到新建的仓库即可。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin 你的仓库</pre></td></tr></table></figure><p>以后要刷新博客内容只需运行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo cl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g -d</pre></td></tr></table></figure><p>将整个项目文件保存到 github</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> pull </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h3 id=\"is-not-a-a-recognized-liquid-tag\"><a class=\"anchor\" href=\"#is-not-a-a-recognized-liquid-tag\">#</a> ... is not a  a recognized Liquid tag</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>The tag <span class=\"token variable\"><span class=\"token variable\">`</span>linksfile<span class=\"token variable\">`</span></span> on line <span class=\"token number\">23</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span>source/friends/index.md<span class=\"token variable\">`</span></span> is not a recognized Liquid tag. For <span class=\"token function\">more</span> information, see https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites<span class=\"token comment\">#unknown-tag-error.</span></pre></td></tr></table></figure><p>大概原因是 Jekyll 是一个静态站点生成器，内置 GitHub Pages 支持和简化的构建过程，所以 github 官方建议将 Jekyll 用于 GitHub Pages。因此如果你使用的不是 jekyll 框架，就可能会存在标签无法识别的情况。为了解决这样的问题，我们只需要在配置文件中禁用 jekyll 即可。</p>\n<p>在博客项目根目录下添加空的.nojekyll 文件</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211126221143.png\" alt=\"\" /></p>\n<p>并在_config.yml 文件中加入以下配置即可：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> .nojekyll</pre></td></tr></table></figure><ol>\n<li>第二个问题就是依据 hexo 官方文</li>\n</ol>\n<h3 id=\"hexo-d-时出现spawn-failed\"><a class=\"anchor\" href=\"#hexo-d-时出现spawn-failed\">#</a> hexo d 时出现 spawn failed</h3>\n<p>如果报的是类似认证远端仓库的问题的话，将</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'git'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 https://github/yourname/yourname.github.io</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 项目所在的分支</span></pre></td></tr></table></figure><p>中的 repo 换成 ssh 地址，不要使用 https 地址</p>\n<p><img data-src=\"https://gitee.com/nobody_heard_of_it/pic-md1/raw/master/image/20211127155137.png\" alt=\"\" /></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'git'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 你为你的博客所创建的仓库，建议仓库名为 yourname.github.io, 即仓库名为 git@github.com:github/yourname/yourname.github.io</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 项目所在的分支</span></pre></td></tr></table></figure><h3 id=\"hexo本地测试运行重启后页面空白提示-warn-no-layout-indexhtml\"><a class=\"anchor\" href=\"#hexo本地测试运行重启后页面空白提示-warn-no-layout-indexhtml\">#</a> hexo 本地测试运行重启后页面空白，提示 : WARN No layout: index.html?</h3>\n<p>检查 themes 文件夹下的主题名字是否和项目根目录下_config.yml 配置中的 theme 属性一样，如此次使用的主题为 shoka，则项目根目录下_config.yml 文件对应的部分为</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka</pre></td></tr></table></figure><h3 id=\"github上配置域名失效每次提交之后都要重新在github仓库的配置里重新设置域名\"><a class=\"anchor\" href=\"#github上配置域名失效每次提交之后都要重新在github仓库的配置里重新设置域名\">#</a> github 上配置域名失效，每次提交之后都要重新在 github 仓库的配置里重新设置域名‘</h3>\n<p>在项目 source 文件夹下新增 CNAME 文件，在 CNAME 文件里写入你想要绑定的域名即可。</p>\n",
            "tags": [
                "博客"
            ]
        }
    ]
}